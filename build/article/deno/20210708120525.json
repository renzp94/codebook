{"title":"deno之文件操作","slug":"uniapp pdf","time":"2021-07-08T12:05:51.000Z","author":"renzp94","status":"done","html":"<h2 id=\"文件操作\">文件操作</h2>\n<h2 id=\"readfile\">readFile</h2>\n<p><code>function Deno.readFile(path: string): Promise&lt;Uint8Array&gt;</code></p>\n<blockquote>\n<p><code>--allow-read</code></p>\n</blockquote>\n<blockquote>\n<p>异步读取文件,返回的数据类型是<code>Uint8Array</code>,需要通过<code>TextDecoder</code>解码.</p>\n</blockquote>\n<pre><code class=\"language-typescript\">const decoder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TextDecoder(&#x27;<span class=\"hljs-params\">utf</span>-8&#x27;)</span>;\nconst data = await <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Deno</span>.</span></span>read<span class=\"hljs-constructor\">File(&#x27;<span class=\"hljs-params\">hello</span>.<span class=\"hljs-params\">txt</span>&#x27;)</span>;\nconsole.log(decoder.decode(data));\n</code></pre>\n<h2 id=\"readfilesync\">readFileSync</h2>\n<blockquote>\n<p>同步读取文件,用法同<code>readFile</code></p>\n</blockquote>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> { readFile, readFileSync } = Deno;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@method <span class=\"hljs-variable\">getDecoder</span></span>\n * <span class=\"hljs-doctag\">@description </span>获取解码器\n * <span class=\"hljs-doctag\">@param </span>encoding 文件编码\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getDecoder</span>(<span class=\"hljs-params\">encoding: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">TextDecoder</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> TextDecoder(encoding);\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@method <span class=\"hljs-variable\">read</span></span>\n * <span class=\"hljs-doctag\">@description </span>异步读取文件\n * <span class=\"hljs-doctag\">@param </span>path 文件路径\n * <span class=\"hljs-doctag\">@param </span>encoding 文件编码\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">read</span>(<span class=\"hljs-params\">path: <span class=\"hljs-built_in\">string</span>, encoding: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;utf-8&#x27;</span></span>): <span class=\"hljs-title\">Promise</span>&lt;<span class=\"hljs-title\">string</span>&gt; </span>{\n    <span class=\"hljs-keyword\">const</span> decoder = getDecoder(encoding);\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> readFile(path);\n    <span class=\"hljs-keyword\">return</span> decoder.decode(data);\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@method <span class=\"hljs-variable\">readSync</span></span>\n * <span class=\"hljs-doctag\">@description </span>同步读取文件\n * <span class=\"hljs-doctag\">@param </span>path 文件路径\n * <span class=\"hljs-doctag\">@param </span>encoding 文件编码\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">readSync</span>(<span class=\"hljs-params\">path: <span class=\"hljs-built_in\">string</span>, encoding: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;utf-8&#x27;</span></span>): <span class=\"hljs-title\">string</span> </span>{\n    <span class=\"hljs-keyword\">const</span> decoder = getDecoder(encoding);\n    <span class=\"hljs-keyword\">const</span> data = readFileSync(path);\n    <span class=\"hljs-keyword\">return</span> decoder.decode(data);\n}\n</code></pre>\n<h2 id=\"writefile\">writeFile</h2>\n<p><code>function Deno.writeFile(path: string, data: Uint8Array, options?: WriteFileOptions): Promise&lt;void&gt;</code></p>\n<blockquote>\n<p><code>--allow-write</code></p>\n</blockquote>\n<blockquote>\n<p>异步写入文件,写入的数据类型是<code>Uint8Array</code>,需要通过<code>TextEncoder</code>编码数据.</p>\n</blockquote>\n<pre><code class=\"language-typescript\">const encoder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TextEncoder()</span>;\nconst data = encoder.encode(&#x27;Hello world\\n&#x27;);\nawait <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Deno</span>.</span></span>write<span class=\"hljs-constructor\">File(&#x27;<span class=\"hljs-params\">hello1</span>.<span class=\"hljs-params\">txt</span>&#x27;, <span class=\"hljs-params\">data</span>)</span>;\n</code></pre>\n<h2 id=\"writefilesync\">writeFileSync</h2>\n<blockquote>\n<p>同步写入文件,用法同<code>writeFile</code></p>\n</blockquote>\n<h2 id=\"writetextfile\">writeTextFile</h2>\n<p><code>function Deno.writeTextFile(path: string, data: string): Promise&lt;void&gt;</code></p>\n<blockquote>\n<p><code>--allow-write</code></p>\n</blockquote>\n<blockquote>\n<p>异步写入文本文件,写入的数据类型是<code>string</code></p>\n</blockquote>\n<h2 id=\"writetextfilesync\">writeTextFileSync</h2>\n<blockquote>\n<p>同步写入文本文件,用法同<code>writeTextFile</code></p>\n</blockquote>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> { writeFile, writeFileSync, writeTextFile, writeTextFileSync } = Deno;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@method <span class=\"hljs-variable\">encode</span></span>\n * <span class=\"hljs-doctag\">@description </span>编码数据\n * <span class=\"hljs-doctag\">@param </span>data 要编码的数据\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">encode</span>(<span class=\"hljs-params\">data: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">Uint8Array</span> </span>{\n    <span class=\"hljs-keyword\">const</span> decoder = <span class=\"hljs-keyword\">new</span> TextEncoder();\n    <span class=\"hljs-keyword\">return</span> decoder.encode(data);\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@method <span class=\"hljs-variable\">write</span></span>\n * <span class=\"hljs-doctag\">@description </span>异步写文件\n * <span class=\"hljs-doctag\">@param </span>path 文件路径\n * <span class=\"hljs-doctag\">@param </span>data 写入数据\n * <span class=\"hljs-doctag\">@param </span>options 写入参数\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">write</span>(<span class=\"hljs-params\">\n    path: <span class=\"hljs-built_in\">string</span>,\n    data: <span class=\"hljs-built_in\">any</span>,\n    options: Deno.WriteFileOptions = {}\n</span>): <span class=\"hljs-title\">Promise</span>&lt;<span class=\"hljs-title\">void</span>&gt; </span>{\n    <span class=\"hljs-keyword\">const</span> enData = encode(data);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> writeFile(path, enData, options);\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@method <span class=\"hljs-variable\">write</span></span>\n * <span class=\"hljs-doctag\">@description </span>异步写文件\n * <span class=\"hljs-doctag\">@param </span>path 文件路径\n * <span class=\"hljs-doctag\">@param </span>data 写入数据\n * <span class=\"hljs-doctag\">@param </span>options 写入参数\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">writeSync</span>(<span class=\"hljs-params\">path: <span class=\"hljs-built_in\">string</span>, data: <span class=\"hljs-built_in\">any</span>, options: Deno.WriteFileOptions = {}</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> enData = encode(data);\n    writeFileSync(path, enData, options);\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@method <span class=\"hljs-variable\">writeText</span></span>\n * <span class=\"hljs-doctag\">@description </span>异步写入string数据\n * <span class=\"hljs-doctag\">@param </span>path 文件路径\n * <span class=\"hljs-doctag\">@param </span>text 写入数据\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">writeText</span>(<span class=\"hljs-params\">path: <span class=\"hljs-built_in\">string</span>, text: <span class=\"hljs-built_in\">string</span></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> writeTextFile(path, text);\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@method <span class=\"hljs-variable\">writeTextSync</span></span>\n * <span class=\"hljs-doctag\">@description </span>同步写入string数据\n * <span class=\"hljs-doctag\">@param </span>path 文件路径\n * <span class=\"hljs-doctag\">@param </span>text 写入数据\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">writeTextSync</span>(<span class=\"hljs-params\">path: <span class=\"hljs-built_in\">string</span>, text: <span class=\"hljs-built_in\">string</span></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> writeTextFileSync(path, text);\n}\n</code></pre>\n"}