{"title":"deno常用命令","slug":"deno","time":"2021-07-08T12:05:06.000Z","author":"renzp94","status":"done","html":"<h2 id=\"常用命令\">常用命令</h2>\n<h3 id=\"使用方式\">使用方式</h3>\n<pre><code class=\"language-cmd\">deno <span class=\"hljs-selector-attr\">[OPTIONS]</span><span class=\"hljs-selector-attr\">[subcommand]</span>\n</code></pre>\n<h3 id=\"查看帮助\">查看帮助</h3>\n<blockquote>\n<p><code>--help</code> / <code>-h</code></p>\n</blockquote>\n<pre><code class=\"language-cmd\"><span class=\"hljs-attribute\">deno -h</span>\n</code></pre>\n<h3 id=\"查看版本\">查看版本</h3>\n<blockquote>\n<p><code>--version</code> / <code>-V</code></p>\n</blockquote>\n<pre><code class=\"language-cmd\"><span class=\"hljs-attribute\">deno -V</span>\n</code></pre>\n<h3 id=\"编译运行文件\">编译运行文件</h3>\n<blockquote>\n<p><code>deno run</code></p>\n</blockquote>\n<blockquote>\n<p>编译<code>ts</code>成<code>js</code>代码和<code>sourceMap</code>文件，存在<code>DENO_DIR/gen/</code>目录下。并且<code>js</code>和<code>sourceMap</code>文件都是以<code>hash</code>值命名的，只要代码不做变更，都会一直执行编译后的文件，如果代码变更了，会重新执行编译，并且生成新的<code>hash</code>命名的<code>js</code>和<code>sourceMap</code>文件</p>\n</blockquote>\n<h4 id=\"权限参数\">权限参数</h4>\n<blockquote>\n<p>参数后面可以通过<code>=参数值</code>的形式来指定权限的范围，如：<code>--allow-read=/docs</code>表示只能读取<code>/docs</code>下的文件</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>--allow-net</td>\n<td>允许直接使用网络权限</td>\n</tr>\n<tr>\n<td>--allow-read</td>\n<td>允许直接使用文件读权限</td>\n</tr>\n<tr>\n<td>--allow-write</td>\n<td>允许直接使用文件写权限</td>\n</tr>\n<tr>\n<td>--allow-run</td>\n<td>允许直接执行子程序/子进程</td>\n</tr>\n<tr>\n<td>--allow-env</td>\n<td>允许直接使用操作环境权限</td>\n</tr>\n<tr>\n<td>--allow-hrtime</td>\n<td>允许测量高分辨率时间</td>\n</tr>\n<tr>\n<td>--allow-all</td>\n<td>允许所有权限</td>\n</tr>\n</tbody></table>\n<h4 id=\"其他参数\">其他参数</h4>\n<ul>\n<li><code>--reload</code>：重新加载编译</li>\n<li><code>-D</code>：输出执行底层日志</li>\n<li><code>--no-prompt</code>：执行代码时不输出提示</li>\n<li><code>--v8-flags</code>：设置 V8 命令行参数</li>\n</ul>\n<pre><code class=\"language-cmd\"><span class=\"hljs-attribute\">deno</span> run --<span class=\"hljs-literal\">allow</span>-<span class=\"hljs-literal\">all</span> test.ts\n</code></pre>\n<h3 id=\"直接执行脚本代码的字符串\">直接执行脚本代码的字符串</h3>\n<blockquote>\n<p><code>eval</code></p>\n</blockquote>\n<pre><code class=\"language-cmd\">deno <span class=\"hljs-built_in\">eval</span> `console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;hello deno&#x27;</span>)`\n</code></pre>\n<h3 id=\"获取远程在线的依赖模块\">获取远程在线的依赖模块</h3>\n<blockquote>\n<p><code>fetch</code></p>\n</blockquote>\n<blockquote>\n<p>下载和编译远程依赖模块，并保存在本地， 并递归获取和编译模块的所有依赖，编译后不运行代码，执行此命令之后，除非使用<code>--reload</code>否则使用<code>fetch</code>的模块不会重新下载和编译</p>\n</blockquote>\n<pre><code class=\"language-cmd\">deno fetch https:<span class=\"hljs-regexp\">//</span>deno.land/welcome.ts\n</code></pre>\n<h3 id=\"格式化代码\">格式化代码</h3>\n<blockquote>\n<p><code>fmt</code></p>\n</blockquote>\n<pre><code class=\"language-cmd\">deno fmt <span class=\"hljs-keyword\">test</span>.ts\n</code></pre>\n<h3 id=\"查看项目信息\">查看项目信息</h3>\n<blockquote>\n<p><code>info</code></p>\n</blockquote>\n<p><code>项目信息字段</code></p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>local</td>\n<td>显示文件在本地的绝对路径</td>\n</tr>\n<tr>\n<td>type</td>\n<td>显示文件类型，主要支持 <code>JavaScript</code>, <code>TypeScript</code> 和 <code>JSON</code> 三种格式</td>\n</tr>\n<tr>\n<td>compiled</td>\n<td>只支持<code>TypeScript</code>类型的文件，显示<code>TypeScript</code>编译后<code>JavaScript</code>代码文件在本地的绝对路径</td>\n</tr>\n<tr>\n<td>map</td>\n<td>只支持<code>TypeScript</code>类型的文件，显示<code>TypeScript</code>编译后<code>sourceMap</code>文件在本地的绝对路径</td>\n</tr>\n<tr>\n<td>deps</td>\n<td>显示文件里代码的依赖模块，并显示依赖树</td>\n</tr>\n</tbody></table>\n"}