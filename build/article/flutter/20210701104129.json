{"title":"Wigets学习之Cell(自实现)","slug":"Flutter Wiget","time":"2021-07-01T10:46:41.000Z","author":"renzp94","status":"done","html":"<p><code>Flutter</code>没有<code>Cell(单元格)</code>部件，所以接下来自实现两个部件：<code>CellGroup</code>、<code>Cell</code></p>\n<p><code>cell.dart</code></p>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\n<span class=\"hljs-comment\">// 数据共享</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_Provider</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">InheritedWidget</span> </span>{\n  _Provider({required <span class=\"hljs-type\">Widget</span> child, required <span class=\"hljs-keyword\">this</span>.data}) : <span class=\"hljs-keyword\">super</span>(child: child);\n\n  <span class=\"hljs-keyword\">final</span> dynamic data;\n\n  static of(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> context.getElementForInheritedWidgetOfExactType&lt;_Provider&gt;()?.widget;\n  }\n\n  <span class=\"hljs-meta\">@override</span>\n  bool updateShouldNotify(covariant <span class=\"hljs-type\">InheritedWidget</span> oldWidget) =&gt; <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CellGroup</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  const <span class=\"hljs-type\">CellGroup</span>(\n      {<span class=\"hljs-type\">Key</span>? key, required <span class=\"hljs-keyword\">this</span>.children, <span class=\"hljs-keyword\">this</span>.title, <span class=\"hljs-keyword\">this</span>.isBorder = <span class=\"hljs-literal\">true</span>})\n      : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-comment\">// 单元格列表</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">List</span>&lt;<span class=\"hljs-type\">Cell</span>&gt; children;\n  <span class=\"hljs-comment\">// 单元格组标题</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span>? title;\n  <span class=\"hljs-comment\">// 单元格是否显示底部边框</span>\n  <span class=\"hljs-keyword\">final</span> bool? isBorder;\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">List</span>&lt;<span class=\"hljs-type\">Widget</span>&gt; list = [];\n\n    <span class=\"hljs-keyword\">if</span> (title != <span class=\"hljs-literal\">null</span>) {\n      list.add(<span class=\"hljs-type\">Padding</span>(\n        padding: <span class=\"hljs-type\">EdgeInsets</span>.symmetric(vertical: <span class=\"hljs-number\">8</span>),\n        child: <span class=\"hljs-type\">Text</span>(\n          title!,\n          style: <span class=\"hljs-type\">TextStyle</span>(color: <span class=\"hljs-type\">Colors</span>.black26),\n        ),\n      ));\n    }\n\n    list.addAll(children);\n\n    <span class=\"hljs-keyword\">return</span> _Provider(\n      data: {\n        <span class=\"hljs-symbol\">&#x27;isBorde</span>r&#x27;: isBorder,\n      },\n      child: <span class=\"hljs-type\">Column</span>(\n        crossAxisAlignment: <span class=\"hljs-type\">CrossAxisAlignment</span>.start,\n        children: list,\n      ),\n    );\n  }\n}\n\nconst defaultRightIcon = const <span class=\"hljs-type\">Icon</span>(\n  <span class=\"hljs-type\">Icons</span>.arrow_forward_ios,\n  color: <span class=\"hljs-type\">Colors</span>.black26,\n  size: <span class=\"hljs-number\">20</span>,\n);\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cell</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  const <span class=\"hljs-type\">Cell</span>(\n      {<span class=\"hljs-type\">Key</span>? key,\n      <span class=\"hljs-keyword\">this</span>.icon,\n      required <span class=\"hljs-keyword\">this</span>.title,\n      <span class=\"hljs-keyword\">this</span>.subTitle,\n      <span class=\"hljs-keyword\">this</span>.rightIcon = defaultRightIcon,\n      <span class=\"hljs-keyword\">this</span>.color = <span class=\"hljs-type\">Colors</span>.white,\n      <span class=\"hljs-keyword\">this</span>.titleColor = <span class=\"hljs-type\">Colors</span>.black,\n      <span class=\"hljs-keyword\">this</span>.titleStyle,\n      <span class=\"hljs-keyword\">this</span>.subTitleColor = <span class=\"hljs-type\">Colors</span>.black26,\n      <span class=\"hljs-keyword\">this</span>.subTitleStyle,\n      <span class=\"hljs-keyword\">this</span>.height = <span class=\"hljs-number\">48</span>,\n      <span class=\"hljs-keyword\">this</span>.horizontalPadding = <span class=\"hljs-number\">12</span>,\n      <span class=\"hljs-keyword\">this</span>.isBorder})\n      : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-comment\">// 左侧图标</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Widget</span>? icon;\n  <span class=\"hljs-comment\">// 标题</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> title;\n  <span class=\"hljs-comment\">// 副标题</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span>? subTitle;\n  <span class=\"hljs-comment\">// 右侧图标，默认为右箭头</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Icon</span>? rightIcon;\n  <span class=\"hljs-comment\">// 背景色</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Color</span>? color;\n  <span class=\"hljs-comment\">// 标题颜色</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Color</span>? titleColor;\n  <span class=\"hljs-comment\">// 标题样式</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">TextStyle</span>? titleStyle;\n  <span class=\"hljs-comment\">// 副标题颜色</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Color</span>? subTitleColor;\n  <span class=\"hljs-comment\">// 副标题样式</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">TextStyle</span>? subTitleStyle;\n  <span class=\"hljs-comment\">// 高度</span>\n  <span class=\"hljs-keyword\">final</span> double? height;\n  <span class=\"hljs-comment\">// 两侧边距</span>\n  <span class=\"hljs-keyword\">final</span> double? horizontalPadding;\n  <span class=\"hljs-comment\">// 是否显示border</span>\n  <span class=\"hljs-keyword\">final</span> bool? isBorder;\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">List</span>&lt;<span class=\"hljs-type\">Widget</span>&gt; list = [];\n    <span class=\"hljs-keyword\">if</span> (icon != <span class=\"hljs-literal\">null</span>) {\n      list.add(icon!);\n    }\n\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Text</span> titleWidget = <span class=\"hljs-type\">Text</span>(\n      title,\n      maxLines: <span class=\"hljs-number\">1</span>,\n      overflow: <span class=\"hljs-type\">TextOverflow</span>.ellipsis,\n      style: titleStyle != <span class=\"hljs-literal\">null</span> ? titleStyle : <span class=\"hljs-type\">TextStyle</span>(color: titleColor),\n    );\n\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">List</span>&lt;<span class=\"hljs-type\">Widget</span>&gt; titleList = [titleWidget];\n\n    <span class=\"hljs-keyword\">if</span> (subTitle != <span class=\"hljs-literal\">null</span>) {\n      titleList.add(<span class=\"hljs-type\">Text</span>(\n        subTitle!,\n        style: subTitleStyle != <span class=\"hljs-literal\">null</span>\n            ? subTitleStyle\n            : <span class=\"hljs-type\">TextStyle</span>(color: subTitleColor),\n        overflow: <span class=\"hljs-type\">TextOverflow</span>.ellipsis,\n      ));\n    }\n\n    list.add(<span class=\"hljs-type\">Expanded</span>(\n      child: <span class=\"hljs-type\">Container</span>(\n        padding: <span class=\"hljs-type\">EdgeInsets</span>.only(left: <span class=\"hljs-number\">8</span>),\n        child: <span class=\"hljs-type\">Column</span>(\n          mainAxisAlignment: <span class=\"hljs-type\">MainAxisAlignment</span>.center,\n          crossAxisAlignment: <span class=\"hljs-type\">CrossAxisAlignment</span>.start,\n          children: titleList,\n        ),\n      ),\n    ));\n\n    list.add(rightIcon!);\n\n    dynamic provider = _Provider?.of(context);\n    <span class=\"hljs-comment\">// isBorder存在则使用isBorder，否则判断CellGroup.isBorder存在，则用CellGroup.isBorder，否则为true</span>\n    bool borderVisible = isBorder ?? provider?.data[<span class=\"hljs-symbol\">&#x27;isBorde</span>r&#x27;] ?? <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Container</span>(\n      height: height! &lt; <span class=\"hljs-number\">48</span> ? <span class=\"hljs-number\">48</span> : height,\n      decoration: borderVisible\n          ? <span class=\"hljs-type\">BoxDecoration</span>(\n              color: color,\n              border: <span class=\"hljs-type\">Border</span>(bottom: <span class=\"hljs-type\">BorderSide</span>(color: <span class=\"hljs-type\">Colors</span>.black12)))\n          : <span class=\"hljs-literal\">null</span>,\n      padding: <span class=\"hljs-type\">EdgeInsets</span>.symmetric(horizontal: horizontalPadding!),\n      child: <span class=\"hljs-type\">Row</span>(\n        children: list,\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"cellgroup\">CellGroup</h2>\n<blockquote>\n<p>单元格组，用于包裹单元格</p>\n</blockquote>\n<ul>\n<li><code>children</code>：单元格列表(必填)，类型是<code>List&lt;Cell&gt;</code></li>\n<li><code>title</code>：单元格组标题</li>\n<li><code>isBorder</code>：单元格是否显示底部边框</li>\n</ul>\n<h2 id=\"cell\">Cell</h2>\n<ul>\n<li><code>icon</code>：左侧图标</li>\n<li><code>title</code>：标题</li>\n<li><code>subTitle</code>：副标题</li>\n<li><code>rightIcon</code>：右侧图标，默认为<code>Icons.arrow_forward_ios</code></li>\n<li><code>color</code>：背景色</li>\n<li><code>titleColor</code>：标题颜色</li>\n<li><code>titleStyle</code>：标题样式</li>\n<li><code>subTitleColor</code>：副标题颜色</li>\n<li><code>subTitleStyle</code>：副标题样式</li>\n<li><code>height</code>：高度，默认为 48 且最小为 48</li>\n<li><code>horizontalPadding</code>：两侧边距，默认为 12</li>\n<li><code>isBorder</code>：是否显示底部边框</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter/material.dart&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:learn/widgets/cell.dart&#x27;</span>;\n\n<span class=\"hljs-built_in\">void</span> <span class=\"hljs-function\"><span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>)</span> {\n  runApp(App());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  Wid<span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> MaterialApp(\n      title: <span class=\"hljs-string\">&#x27;自实现Cell&#x27;</span>,\n      <span class=\"hljs-attr\">home</span>: Scaffold(\n        appBar: AppBar(\n          title: Text(<span class=\"hljs-string\">&#x27;自实现Cell&#x27;</span>),\n        ),\n        <span class=\"hljs-attr\">body</span>: Padding(\n          padding: EdgeInsets.all(<span class=\"hljs-number\">12</span>),\n          <span class=\"hljs-attr\">child</span>: CellGroup(\n            title: <span class=\"hljs-string\">&#x27;标题&#x27;</span>,\n            <span class=\"hljs-attr\">children</span>: [\n              Cell(\n                icon: Icon(Icons.mail),\n                <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;邮件&#x27;</span>,\n              ),\n              Cell(\n                icon: Icon(Icons.message),\n                <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;消息通知&#x27;</span>,\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n"}