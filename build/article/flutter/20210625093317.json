{"title":"Wigets学习之Button","slug":"Flutter Wiget","time":"2021-06-25T09:33:40.000Z","author":"renzp94","status":"done","html":"<p><code>Material</code>提供了多种按钮：</p>\n<ul>\n<li><code>TextButton</code>：文本按钮</li>\n<li><code>OutlinedButton</code>：边框按钮</li>\n<li><code>IconButton</code>：图标按钮</li>\n<li><code>FloatingActionButton</code>：悬浮按钮</li>\n<li><code>MaterialButton</code>：<code>Material</code>风格按钮</li>\n<li><code>ElevatedButton</code>：凸起按钮</li>\n<li><code>ButtonBar</code>：按钮组</li>\n<li><code>DropdownButton</code>：下拉框按钮</li>\n<li><code>BackButton</code>：返回按钮</li>\n<li><code>CloseButton</code>：关闭按钮</li>\n</ul>\n<h2 id=\"textbutton：文本按钮\">TextButton：文本按钮</h2>\n<blockquote>\n<p>显示一个可点击的文本</p>\n</blockquote>\n<ul>\n<li><code>child</code>：显示的内容(必填)</li>\n<li><code>onPressed</code>：点击事件(必填，可以为 null)</li>\n<li><code>onLongPress</code>：长按事件</li>\n<li><code>style</code>: 按钮样式，使用<code>ButtonStyle</code>设置</li>\n<li><code>autofocus</code>：是否自动聚焦，默认为<code>false</code></li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Row</span>(\n      textDirection: <span class=\"hljs-type\">TextDirection</span>.ltr,\n      mainAxisAlignment: <span class=\"hljs-type\">MainAxisAlignment</span>.center,\n      crossAxisAlignment: <span class=\"hljs-type\">CrossAxisAlignment</span>.center,\n      children: [\n        <span class=\"hljs-type\">Directionality</span>(\n            textDirection: <span class=\"hljs-type\">TextDirection</span>.ltr,\n            child: <span class=\"hljs-type\">TextButton</span>(\n                onLongPress: () {\n                  print(&#x27;长按事件&#x27;);\n                },\n                onPressed: () {\n                  print(&#x27;点击事件&#x27;);\n                },\n                child: <span class=\"hljs-type\">Text</span>(\n                  &#x27;文本按钮&#x27;,\n                  textDirection: <span class=\"hljs-type\">TextDirection</span>.ltr,\n                )))\n      ],\n    );\n  }\n}\n</code></pre>\n<h2 id=\"outlinedbutton：边框按钮\">OutlinedButton：边框按钮</h2>\n<blockquote>\n<p>带有边框的按钮</p>\n</blockquote>\n<p>属性和<code>TextButton</code>一致，通过<code>OutlinedButton.styleFrom</code>来设置边框等样式</p>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Center</span>(\n      child: <span class=\"hljs-type\">Directionality</span>(\n        textDirection: <span class=\"hljs-type\">TextDirection</span>.ltr,\n        child: <span class=\"hljs-type\">OutlinedButton</span>(\n          onPressed: () {\n            print(&#x27;点击事件&#x27;);\n          },\n          style: <span class=\"hljs-type\">OutlinedButton</span>.styleFrom(\n              backgroundColor: <span class=\"hljs-type\">Colors</span>.blue,\n              side: <span class=\"hljs-type\">BorderSide</span>(width: <span class=\"hljs-number\">1</span>, color: <span class=\"hljs-type\">Colors</span>.red)),\n          child: <span class=\"hljs-type\">Text</span>(\n            <span class=\"hljs-string\">&quot;边框按钮&quot;</span>,\n            style: <span class=\"hljs-type\">TextStyle</span>(color: <span class=\"hljs-type\">Colors</span>.white),\n            textDirection: <span class=\"hljs-type\">TextDirection</span>.ltr,\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"iconbutton：图标按钮\">IconButton：图标按钮</h2>\n<blockquote>\n<p>图标按钮</p>\n</blockquote>\n<ul>\n<li><code>icon</code>：图标</li>\n<li><code>onPressed</code>：点击事件(必填)</li>\n<li><code>iconSize</code>：图标大小，默认为<code>24</code></li>\n<li><code>padding</code>：内边距</li>\n<li><code>alignment</code>：对齐方式</li>\n<li><code>splashRadius</code>：点击的水波纹大小</li>\n<li><code>color</code>：图标颜色</li>\n<li><code>focusColor</code>：焦点聚集时背景颜色</li>\n<li><code>hoverColor</code>：悬停时背景颜色</li>\n<li><code>highlightColor</code>：水波纹高亮颜色</li>\n<li><code>splashColor</code>：水波纹颜色</li>\n<li><code>disabledColor</code>：禁用时颜色</li>\n</ul>\n<blockquote>\n<p>注意：<code>IconButton</code>需要用<code>Material Widget</code>包裹，否则会报错。</p>\n</blockquote>\n<p>除了使用<code>IconButton</code>可以实现图标按钮还可以使用<code>TextButton.icon()</code>、<code>OutlinedButton.icon()</code>、<code>ElevatedButton.icon()</code>实现图标按钮</p>\n<pre><code class=\"language-dart\">import <span class=\"hljs-string\">&#x27;package:flutter/material.dart&#x27;</span>;\n\nvoid ma<span class=\"hljs-meta\">in(</span>) {\n  runApp(App());\n}\n\nclass App extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    <span class=\"hljs-meta\">return</span> Material(\n      child: Row(\n        textDirection: TextDirection.ltr,\n        children: [\n          Directionality(\n              textDirection: TextDirection.ltr,\n              child: IconButt<span class=\"hljs-meta\">on(</span>\n                  icon: Ic<span class=\"hljs-meta\">on(</span>Icons.search),\n                  onPressed: () {\n                    p<span class=\"hljs-meta\">rint(</span><span class=\"hljs-string\">&#x27;点击事件&#x27;</span>);\n                  })),\n          Directionality(\n              textDirection: TextDirection.ltr,\n              child: TextButton.ic<span class=\"hljs-meta\">on(</span>\n                  onPressed: () {\n                    p<span class=\"hljs-meta\">rint(</span><span class=\"hljs-string\">&#x27;点击事件&#x27;</span>);\n                  },\n                  icon: Ic<span class=\"hljs-meta\">on(</span>Icons.<span class=\"hljs-meta\">add</span>),\n                  <span class=\"hljs-meta\">label</span>: Text(<span class=\"hljs-string\">&quot;添加&quot;</span>))),\n          Directionality(\n              textDirection: TextDirection.ltr,\n              child: OutlinedButton.ic<span class=\"hljs-meta\">on(</span>\n                  onPressed: () {\n                    p<span class=\"hljs-meta\">rint(</span><span class=\"hljs-string\">&#x27;点击事件&#x27;</span>);\n                  },\n                  icon: Ic<span class=\"hljs-meta\">on(</span>Icons.online_prediction_rounded),\n                  <span class=\"hljs-meta\">label</span>: Text(<span class=\"hljs-string\">&quot;测试&quot;</span>))),\n          Directionality(\n              textDirection: TextDirection.ltr,\n              child: ElevatedButton.ic<span class=\"hljs-meta\">on(</span>\n                  onPressed: () {\n                    p<span class=\"hljs-meta\">rint(</span><span class=\"hljs-string\">&#x27;点击事件&#x27;</span>);\n                  },\n                  icon: Ic<span class=\"hljs-meta\">on(</span>Icons.access_time_sharp),\n                  <span class=\"hljs-meta\">label</span>: Text(<span class=\"hljs-string\">&quot;时间&quot;</span>)))\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"floatingactionbutton：悬浮按钮\">FloatingActionButton：悬浮按钮</h2>\n<blockquote>\n<p>显示一个悬停的按钮</p>\n</blockquote>\n<ul>\n<li><code>onPressed</code>：点击事件(必填)</li>\n<li><code>child</code>：按钮显示的内容</li>\n<li><code>tooltip</code>：提示信息</li>\n<li><code>foregroundColor</code>：内容颜色</li>\n<li><code>backgroundColor</code>：背景色</li>\n<li><code>focusColor</code>：焦点聚集时背景颜色</li>\n<li><code>hoverColor</code>：悬停时背景颜色</li>\n<li><code>splashColor</code>：按下抬起时背景颜色</li>\n<li><code>elevation</code>：阴影</li>\n<li><code>focusElevation</code>：焦点聚集时阴影</li>\n<li><code>hoverElevation</code>：悬停时阴影</li>\n<li><code>highlightElevation</code>：按下时阴影</li>\n<li><code>disabledElevation</code>：禁用时阴影</li>\n<li><code>mini</code>：是否为小型按钮，默认为<code>false</code></li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      home: <span class=\"hljs-type\">Scaffold</span>(\n        floatingActionButton: <span class=\"hljs-type\">FloatingActionButton</span>(\n          child: <span class=\"hljs-type\">Icon</span>(<span class=\"hljs-type\">Icons</span>.add),\n          onPressed: () {\n            print(&#x27;点击事件&#x27;);\n          },\n          tooltip: &#x27;提示信息&#x27;,\n          foregroundColor: <span class=\"hljs-type\">Colors</span>.black,\n          backgroundColor: <span class=\"hljs-type\">Colors</span>.yellow,\n          elevation: <span class=\"hljs-number\">4.0</span>,\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"materialbutton：material风格按钮\">MaterialButton：<code>Material</code>风格按钮</h2>\n<blockquote>\n<p>显示一个<code>Material</code>风格的按钮</p>\n</blockquote>\n<ul>\n<li><code>onPressed</code>：点击事件(必填)</li>\n<li><code>child</code>：显示内容</li>\n<li><code>onLongPress</code>：长按事件</li>\n<li><code>textTheme</code>：内容主题设置</li>\n<li><code>textColor</code>：内容颜色</li>\n<li><code>disabledTextColor</code>：禁用时内容颜色</li>\n<li><code>color</code>：背景色</li>\n<li><code>disabledColor</code>：禁用时背景色</li>\n<li><code>focusColor</code>：焦点聚集时背景色</li>\n<li><code>hoverColor</code>：悬停时背景色</li>\n<li><code>highlightColor</code>：水波纹高亮颜色</li>\n<li><code>splashColor</code>：水波纹颜色</li>\n<li><code>colorBrightness</code>：主题风格，<code>Brightness.light</code>：浅色主题，<code>Brightness.dark</code>：黑色主题</li>\n<li><code>elevation</code>：阴影</li>\n<li><code>focusElevation</code>：焦点聚集时阴影</li>\n<li><code>hoverElevation</code>：悬停时阴影</li>\n<li><code>highlightElevation</code>：按下时阴影</li>\n<li><code>disabledElevation</code>：禁用时阴影</li>\n<li><code>padding</code>：内边距</li>\n<li><code>minWidth</code>：最小宽度</li>\n<li><code>height</code>：高度</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      home: <span class=\"hljs-type\">Scaffold</span>(\n        body: <span class=\"hljs-type\">Center</span>(\n          child: <span class=\"hljs-type\">Directionality</span>(\n            textDirection: <span class=\"hljs-type\">TextDirection</span>.ltr,\n            child: <span class=\"hljs-type\">MaterialButton</span>(\n              onPressed: () {\n                print(&#x27;点击事件&#x27;);\n              },\n              onLongPress: () {\n                print(&#x27;长按事件&#x27;);\n              },\n              textColor: <span class=\"hljs-type\">Colors</span>.white,\n              color: <span class=\"hljs-type\">Colors</span>.blue,\n              highlightColor: <span class=\"hljs-type\">Colors</span>.blue.shade100,\n              splashColor: <span class=\"hljs-type\">Colors</span>.red,\n              elevation: <span class=\"hljs-number\">16.0</span>,\n              child: <span class=\"hljs-type\">Text</span>(\n                &#x27;测试&#x27;,\n                textDirection: <span class=\"hljs-type\">TextDirection</span>.ltr,\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"elevatedbutton：凸起按钮\">ElevatedButton：凸起按钮</h2>\n<blockquote>\n<p>显示有阴影的按钮，好像凸起一样</p>\n</blockquote>\n<ul>\n<li><code>onPressed</code>：点击事件(必填)</li>\n<li><code>child</code>：显示内容(必填)</li>\n<li><code>onLongPress</code>：长按事件</li>\n<li><code>style</code>：样式</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      home: <span class=\"hljs-type\">Scaffold</span>(\n        body: <span class=\"hljs-type\">Center</span>(\n          child: <span class=\"hljs-type\">Directionality</span>(\n              textDirection: <span class=\"hljs-type\">TextDirection</span>.ltr,\n              child: <span class=\"hljs-type\">ElevatedButton</span>(\n                onPressed: () {\n                  print(&#x27;点击事件&#x27;);\n                },\n                onLongPress: () {\n                  print(&#x27;长按事件&#x27;);\n                },\n                child: <span class=\"hljs-type\">Text</span>(\n                  <span class=\"hljs-string\">&quot;漂浮按钮&quot;</span>,\n                  textDirection: <span class=\"hljs-type\">TextDirection</span>.ltr,\n                ),\n              )),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"buttonbar：按钮组\">ButtonBar：按钮组</h2>\n<blockquote>\n<p>用于展示一组按钮</p>\n</blockquote>\n<ul>\n<li><code>children</code>：按钮列表</li>\n<li><code>alignment</code>：对齐方式</li>\n<li><code>buttonTextTheme</code>：按钮内容主题</li>\n<li><code>buttonMinWidth</code>：按钮最小宽度</li>\n<li><code>buttonHeight</code>：按钮高度</li>\n<li><code>buttonPadding</code>：按钮内边距</li>\n</ul>\n<h2 id=\"dropdownbutton：下拉框按钮\">DropdownButton：下拉框按钮</h2>\n<blockquote>\n<p>显示下拉框的按钮</p>\n</blockquote>\n<ul>\n<li><code>items</code>：下拉选项(必填)</li>\n<li><code>selectedItemBuilder</code>：选项构造器</li>\n<li><code>value</code>：当前选中的值</li>\n<li><code>hint</code>：没有选中值的时候默认显示的内容</li>\n<li><code>disabledHint</code>：禁用时显示的内容</li>\n<li><code>onChange</code>：选项改变事件</li>\n<li><code>onTap</code>：点击事件</li>\n<li><code>elevation</code>：阴影，默认为 8</li>\n<li><code>style</code>：样式</li>\n<li><code>underline</code>：下划线,如果不想要下划线，最简单的做法就是<code>underline: Container()</code></li>\n<li><code>icon</code>：图标</li>\n<li><code>iconDisabledColor</code>：不可用时图标颜色</li>\n<li><code>iconEnabledColor</code>：可用时图标颜色</li>\n<li><code>iconSize</code>：图标大小，默认为 24</li>\n<li><code>itemHeight</code>：选项高度</li>\n<li><code>dropdownColor</code>：下拉容器的背景色</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Home</span>();\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  int _val = <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      home: <span class=\"hljs-type\">Scaffold</span>(\n        body: <span class=\"hljs-type\">Center</span>(\n          child: <span class=\"hljs-type\">DropdownButton</span>(\n            value: _val,\n            onChanged: (int? <span class=\"hljs-keyword\">val</span>) {\n              setState(() {\n                _val = <span class=\"hljs-keyword\">val</span>!;\n              });\n            },\n            hint: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">&quot;请选择&quot;</span>),\n            style: <span class=\"hljs-type\">TextStyle</span>(color: <span class=\"hljs-type\">Colors</span>.blue),\n            underline: <span class=\"hljs-type\">Container</span>(),\n            icon: <span class=\"hljs-type\">Icon</span>(<span class=\"hljs-type\">Icons</span>.arrow_circle_down),\n            iconEnabledColor: <span class=\"hljs-type\">Colors</span>.cyan,\n            itemHeight: <span class=\"hljs-number\">60</span>,\n            dropdownColor: <span class=\"hljs-type\">Colors</span>.black,\n            items: [\n              <span class=\"hljs-type\">DropdownMenuItem</span>(\n                child: <span class=\"hljs-type\">Text</span>(&#x27;选项<span class=\"hljs-number\">1</span>&#x27;),\n                value: <span class=\"hljs-number\">1</span>,\n              ),\n              <span class=\"hljs-type\">DropdownMenuItem</span>(\n                child: <span class=\"hljs-type\">Text</span>(&#x27;选项<span class=\"hljs-number\">2</span>&#x27;),\n                value: <span class=\"hljs-number\">2</span>,\n              ),\n              <span class=\"hljs-type\">DropdownMenuItem</span>(\n                child: <span class=\"hljs-type\">Text</span>(&#x27;选项<span class=\"hljs-number\">3</span>&#x27;),\n                value: <span class=\"hljs-number\">3</span>,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"backbutton：返回按钮\">BackButton：返回按钮</h2>\n<blockquote>\n<p>用于返回上一页的按钮，本身就是一个<code>IconButton</code>，默认点击事件是<code>Navigator.maybePop</code>，即：如果有上一页则返回上一页。</p>\n</blockquote>\n<ul>\n<li><code>color</code>：按钮颜色</li>\n<li><code>onPressed</code>：点击事件</li>\n</ul>\n<h2 id=\"closebutton：关闭按钮\">CloseButton：关闭按钮</h2>\n<blockquote>\n<p>用于关闭的按钮，本身就是一个<code>IconButton</code>，默认点击事件是<code>Navigator.maybePop</code>，即：如果有上一页则返回上一页。<code>BackButton</code>用于全屏的页面，而<code>CloseButton</code>用于弹窗。</p>\n</blockquote>\n<ul>\n<li><code>color</code>：按钮颜色</li>\n<li><code>onPressed</code>：点击事件</li>\n</ul>\n"}