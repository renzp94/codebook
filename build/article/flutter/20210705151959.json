{"title":"Wigets学习之Form表单","slug":"Flutter Wiget","time":"2021-07-06T09:34:03.000Z","author":"renzp94","status":"done","html":"<h2 id=\"form\">Form</h2>\n<blockquote>\n<p>创建一个表单</p>\n</blockquote>\n<ul>\n<li><code>child</code>：子部件(必填)</li>\n<li><code>autovalidate</code>：是否自动校验输入内容，默认为<code>false</code>，如果为<code>true</code>当子<code>FormField</code>内容发生变化后就会触发校验，为<code>false</code>可通过<code>FromState.validate</code>手动触发校验</li>\n<li><code>onWillPop</code>：是否可以直接返回，此参数值是一个返回<code>Future&lt;bool&gt;</code>的函数，如果解析为<code>false</code>则当前路由不会返回，为<code>true</code>则返回上一个路由</li>\n<li><code>onChanged</code>：当子<code>FormField</code>内容发生变化就会触发</li>\n</ul>\n<h2 id=\"textformfield\">TextFormField</h2>\n<blockquote>\n<p>创建一个包含<code>Textfield</code>的<code>FormField</code></p>\n</blockquote>\n<ul>\n<li><code>controller</code>：指定默认值，通过<code>TextEditingController(text:&#39;默认值&#39;)</code>来指定，不能和<code>initialValue</code>同时使用</li>\n<li><code>initialValue</code>：指定初始值，此参数只会在部件创建时指定，如果值改变则输入框不会内容不会改变，如果会动态改变输入框的值则使用<code>controller</code></li>\n<li><code>decoration</code>：装饰器，通过<code>InputDecoration</code>来设置</li>\n<li><code>keyboardType</code>：设置文本，通过<code>TextInputType</code>指定</li>\n<li><code>TextInputType.text</code>：文本输入</li>\n<li><code>TextInputType.multiline</code>：多行输入</li>\n<li><code>TextInputType.number</code>：数字输入</li>\n<li><code>TextInputType.phone</code>：手机号键盘</li>\n<li><code>TextInputType.datetime</code>：地址键盘</li>\n<li><code>TextInputType.emailAddress</code>：邮箱键盘</li>\n<li><code>TextInputType.url</code>：链接键盘</li>\n<li><code>TextInputType.visiblePassword</code>：显示密码键盘</li>\n<li><code>TextInputType.name</code>：人名键盘</li>\n<li><code>TextInputType.streetAddress</code>：邮政地址键盘</li>\n<li><code>TextInputType.visiblePassword</code>：显示密码键盘</li>\n<li><code>textCapitalization</code>：设置键盘大小写规则，默认为<code>TextCapitalization.none</code></li>\n<li><code>TextCapitalization.none</code>：小写键盘</li>\n<li><code>TextCapitalization.words</code>：单词首字母大写</li>\n<li><code>TextCapitalization.sentences</code>：首句字母大写</li>\n<li><code>TextCapitalization.characters</code>：字母大写</li>\n<li><code>textInputAction</code>：键盘类型</li>\n<li><code>style</code>：输入框文字样式</li>\n<li><code>textDirection</code>：文字排列方式</li>\n<li><code>textAlign</code>：文字水平对齐方式，默认为<code>TextAlign.start</code></li>\n<li><code>textAlignVertical</code>：文字垂直对齐方式</li>\n<li><code>autofocus</code>：自动获取焦点，默认为<code>false</code></li>\n<li><code>readOnly</code>：是否只读，默认为<code>false</code></li>\n<li><code>toolbarOptions</code>：双击或长按之后的操作，通过<code>ToolbarOptions</code>指定，<code>ToolbarOptions</code>参数如下：<ul>\n<li><code>selectAll</code>：全选</li>\n<li><code>copy</code>：复制</li>\n<li><code>cut</code>：剪切</li>\n<li><code>paste</code>：粘贴</li>\n</ul>\n</li>\n<li><code>enableInteractiveSelection</code>：输入框选择是否可用，默认为<code>true</code>，为<code>false</code>时，则<code>toolbarOptions</code>设置无效</li>\n<li><code>showCursor</code>：是否显示光标，默认为：<code>true</code></li>\n<li><code>obscuringCharacter</code>：掩码字符(只能指定一个字符)，当指定<code>obscureText=true</code>时，此参数生效，每次输入的值在显示的时候都会被掩码替换，默认为<code>•</code></li>\n<li><code>obscureText</code>：是否显示掩码，默认为<code>false</code></li>\n<li><code>autocorrect</code>：是否启用自动校验，默认为<code>true</code></li>\n<li><code>enableSuggestions</code>：是否在输入时给出建议，默认为<code>true</code></li>\n<li><code>maxLines</code>：最大行数，默认为<code>1</code></li>\n<li><code>minLines</code>：最小行数</li>\n<li><code>maxLength</code>：最大长度</li>\n<li><code>maxLengthEnforced</code>：达到<code>maxLength</code>长度后是否阻止输入</li>\n<li><code>onChanged</code>：输入框内容发生变化时触发</li>\n<li><code>onTap</code>：点击输入框时触发</li>\n<li><code>onEditingComplete</code>：编辑完成时触发，即点击键盘上的完成或回车时</li>\n<li><code>onFieldSubmitted</code>：完成输入框编辑后触发，接收一个当前输入框的值</li>\n<li><code>onSaved</code>：当调用<code>FormState</code>的<code>save</code>函数时触发</li>\n<li><code>validator</code>：校验函数，通过<code>FormState</code>的<code>validate</code>函数触发，返回<code>null</code>为校验通过，返回字符串则为错误提示</li>\n<li><code>inputFormatters</code>：输入规则，是一个<code>List&lt;TextInputFormatter&gt;</code>类型</li>\n<li><code>enabled</code>：是否可用</li>\n<li><code>cursorWidth</code>：光标宽度</li>\n<li><code>cursorHeight</code>：光标高度</li>\n<li><code>cursorRadius</code>：光标圆角</li>\n<li><code>cursorColor</code>：光标颜色</li>\n<li><code>keyboardAppearance</code>：键盘主题，默认为<code>Brightness.light(浅色)</code>，可选值为<code>Brightness.dark(深色)</code></li>\n</ul>\n<h3 id=\"inputdecoration\">InputDecoration</h3>\n<blockquote>\n<p>设置<code>Input</code>样式</p>\n</blockquote>\n<ul>\n<li><code>icon</code>：左侧图标</li>\n<li><code>labelText</code>：左侧 label 文字</li>\n<li><code>labelStyle</code>：左侧 label 样式</li>\n<li><code>helperText</code>：在输入框下方出现用于展示提示信息的</li>\n<li><code>helperStyle</code>：提示信息的样式</li>\n<li><code>helperMaxLines</code>：提示信息最多展示几行</li>\n<li><code>hintText</code>：占位文本和<code>HTML</code>中的<code>placeholder</code>一样</li>\n<li><code>hintStyle</code>：占位文本样式</li>\n<li><code>hintTextDirection</code>：占位文本的文字排列方式</li>\n<li><code>hintMaxLines</code>：占位文本最多展示几行</li>\n<li><code>errorText</code>：错误信息</li>\n<li><code>errorStyle</code>：错误信息样式</li>\n<li><code>errorMaxLines</code>：错误信息最多展示几行</li>\n<li><code>floatingLabelBehavior</code>：焦点获取时 label 展示行为，默认为<code>FloatingLabelBehavior.auto</code>，可选值<code>FloatingLabelBehavior.always(总是显示)</code>，<code>FloatingLabelBehavior.never(从不显示)</code></li>\n<li><code>isCollapsed</code>：是否将<code>label</code>和输入框收起，默认为<code>false</code>，如果为<code>true</code>，则<code>label</code>会重叠在输入框上，此时最好设置<code>floatingLabelBehavior=FloatingLabelBehavior.never</code></li>\n<li><code>isDense</code>：是否将输入框作为<code>Form</code>的一部分，默认为<code>false</code>，当为<code>true</code>时上下间距会少一点</li>\n<li><code>contentPadding</code>：输入框内边距</li>\n<li><code>prefixIcon</code>：前缀图标</li>\n<li><code>prefixIconConstraints</code>：前缀图标约束</li>\n<li><code>prefix</code>：自定义前缀部件</li>\n<li><code>prefixText</code>：前缀文字</li>\n<li><code>prefixStyle</code>：前缀样式</li>\n<li><code>suffixIcon</code>：后缀图标</li>\n<li><code>suffixIconConstraints</code>：后缀图标约束</li>\n<li><code>suffix</code>：自定义后缀部件</li>\n<li><code>suffixText</code>：后缀文字</li>\n<li><code>suffixStyle</code>：后缀样式</li>\n<li><code>counter</code>：自定义输入框下的内容</li>\n<li><code>counterText</code>：输入框下的内容</li>\n<li><code>counterStyle</code>：输入下的内容样式</li>\n<li><code>filled</code>：是否显示输入框背景，默认为<code>false</code></li>\n<li><code>fillColor</code>：背景颜色</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: <span class=\"hljs-symbol\">&#x27;Form</span>表单学习&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-type\">String</span> userName = &#x27;&#x27;;\n  <span class=\"hljs-type\">String</span> password = &#x27;&#x27;;\n  <span class=\"hljs-type\">GlobalKey</span>&lt;<span class=\"hljs-type\">FormState</span>&gt; _formKey = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">GlobalKey</span>&lt;<span class=\"hljs-type\">FormState</span>&gt;();\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-symbol\">&#x27;Form</span>表单学习&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Form</span>(\n        key: _formKey,\n        child: <span class=\"hljs-type\">Padding</span>(\n          padding: <span class=\"hljs-type\">EdgeInsets</span>.all(<span class=\"hljs-number\">24</span>),\n          child: <span class=\"hljs-type\">Column</span>(\n            children: [\n              <span class=\"hljs-type\">TextFormField</span>(\n                  controller: <span class=\"hljs-type\">TextEditingController</span>(text: userName),\n                  style: <span class=\"hljs-type\">TextStyle</span>(color: <span class=\"hljs-type\">Colors</span>.cyan),\n                  toolbarOptions: <span class=\"hljs-type\">ToolbarOptions</span>(\n                      selectAll: <span class=\"hljs-literal\">true</span>, copy: <span class=\"hljs-literal\">true</span>, cut: <span class=\"hljs-literal\">true</span>, paste: <span class=\"hljs-literal\">true</span>),\n                  onEditingComplete: () =&gt; print(<span class=\"hljs-symbol\">&#x27;onEditingComplet</span>e&#x27;),\n                  onFieldSubmitted: (value) =&gt; print(value),\n                  onSaved: (value) =&gt; setState(() {\n                        userName = value!;\n                      }),\n                  validator: (value) =&gt; value!.isEmpty ? &#x27;请输入账号&#x27; : <span class=\"hljs-literal\">null</span>,\n                  decoration:\n                      <span class=\"hljs-type\">InputDecoration</span>(labelText: &#x27;账号&#x27;, hintText: &#x27;请输入账号&#x27;)),\n              <span class=\"hljs-type\">TextFormField</span>(\n                obscureText: <span class=\"hljs-literal\">true</span>,\n                obscuringCharacter: &#x27;*&#x27;,\n                cursorColor: <span class=\"hljs-type\">Colors</span>.yellow,\n                onSaved: (value) =&gt; setState(() {\n                  password = value!;\n                }),\n                decoration: <span class=\"hljs-type\">InputDecoration</span>(\n                  hintText: &#x27;请输入密码&#x27;,\n                  counterText: &#x27;忘记密码?&#x27;,\n                  counterStyle: <span class=\"hljs-type\">TextStyle</span>(color: <span class=\"hljs-type\">Colors</span>.black12),\n                ),\n              ),\n              <span class=\"hljs-type\">Container</span>(\n                  width: double.infinity,\n                  height: <span class=\"hljs-number\">48</span>,\n                  margin: <span class=\"hljs-type\">EdgeInsets</span>.only(top: <span class=\"hljs-number\">24</span>),\n                  child: <span class=\"hljs-type\">ElevatedButton</span>(\n                    onPressed: () {\n                      _formKey.currentState!.validate();\n                      _formKey.currentState!.save();\n                      print(<span class=\"hljs-symbol\">&#x27;userName</span>：$userName，password：$password&#x27;);\n                    },\n                    child: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">&quot;登录&quot;</span>),\n                    style: <span class=\"hljs-type\">ButtonStyle</span>(\n                      elevation: <span class=\"hljs-type\">MaterialStateProperty</span>.all(<span class=\"hljs-number\">0</span>),\n                    ),\n                  )),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"textfield\">TextField</h2>\n<blockquote>\n<p>输入框</p>\n</blockquote>\n<p>参数和<code>TextFormField</code>基本保存一致</p>\n<h2 id=\"radio\">Radio</h2>\n<blockquote>\n<p>单选按钮</p>\n</blockquote>\n<ul>\n<li><code>value</code>：单选值(必填)</li>\n<li><code>groupValue</code>：选中的值(必填)</li>\n<li><code>onChanged</code>：改变事件(必填)，接收当前<code>Radio</code>的<code>value</code></li>\n<li><code>toggleable</code>：是否可改变，默认为<code>false</code>，为<code>true</code>时，选中的<code>Radio</code>可再次点击取消</li>\n<li><code>activeColor</code>：选中的颜色</li>\n<li><code>fillColor</code>：默认颜色，通过<code>MaterialStateProperty</code>指定，指定此参数之后<code>activeColor</code>无效，可通过<code>MaterialStateProperty.resolveWith</code>判断状态设置不同颜色</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: <span class=\"hljs-symbol\">&#x27;Textfield</span>学习&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  int radio = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-symbol\">&#x27;Radio</span>学习&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: [\n          <span class=\"hljs-type\">Radio</span>(\n              value: <span class=\"hljs-number\">1</span>,\n              groupValue: radio,\n              onChanged: (int? value) {\n                setState(() {\n                  radio = value!;\n                });\n              }),\n          <span class=\"hljs-type\">Radio</span>(\n              value: <span class=\"hljs-number\">2</span>,\n              groupValue: radio,\n              toggleable: <span class=\"hljs-literal\">true</span>,\n              activeColor: <span class=\"hljs-type\">Colors</span>.red,\n              onChanged: (int? value) {\n                setState(() {\n                  radio = value != <span class=\"hljs-literal\">null</span> ? value : <span class=\"hljs-number\">0</span>;\n                });\n              }),\n          <span class=\"hljs-type\">Radio</span>(\n              value: <span class=\"hljs-number\">3</span>,\n              groupValue: radio,\n              fillColor: <span class=\"hljs-type\">MaterialStateProperty</span>.all(<span class=\"hljs-type\">Colors</span>.orange),\n              onChanged: (int? value) {\n                setState(() {\n                  radio = value!;\n                });\n              }),\n          <span class=\"hljs-type\">Radio</span>(\n              value: <span class=\"hljs-number\">4</span>,\n              groupValue: radio,\n              fillColor: <span class=\"hljs-type\">MaterialStateProperty</span>.resolveWith((states) {\n                <span class=\"hljs-keyword\">return</span> states.contains(<span class=\"hljs-type\">MaterialState</span>.selected)\n                    ? <span class=\"hljs-type\">Colors</span>.red\n                    : <span class=\"hljs-type\">Colors</span>.yellow;\n              }),\n              onChanged: (int? value) {\n                setState(() {\n                  radio = value!;\n                });\n              }),\n          <span class=\"hljs-type\">Radio</span>(\n              value: <span class=\"hljs-number\">4</span>,\n              groupValue: radio,\n              fillColor: <span class=\"hljs-type\">MaterialStateProperty</span>.resolveWith((states) {\n                <span class=\"hljs-keyword\">return</span> states.contains(<span class=\"hljs-type\">MaterialState</span>.selected)\n                    ? <span class=\"hljs-type\">Colors</span>.red\n                    : <span class=\"hljs-type\">Colors</span>.yellow;\n              }),\n              onChanged: (int? value) {\n                setState(() {\n                  radio = value!;\n                });\n              }),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"radiolisttile\">RadioListTile</h2>\n<blockquote>\n<p>带有标题的单选按钮</p>\n</blockquote>\n<ul>\n<li><code>value</code>：单选值(必填)</li>\n<li><code>groupValue</code>：选中的值(必填)</li>\n<li><code>onChanged</code>：改变事件(必填)，接收当前<code>RadioListTile</code>的<code>value</code></li>\n<li><code>toggleable</code>：是否可改变，默认为<code>false</code>，为<code>true</code>时，选中的<code>RadioListTile</code>可再次点击取消</li>\n<li><code>title</code>：标题部件</li>\n<li><code>subtitle</code>：副标题部件</li>\n<li><code>selected</code>：内容部分是否为选中状态，默认为<code>false</code></li>\n<li><code>activeColor</code>：选中的颜色</li>\n<li><code>tileColor</code>：当前<code>RadioListTile</code>背景色</li>\n<li><code>selectedTileColor</code>：当前<code>RadioListTile</code>选中背景色</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: <span class=\"hljs-symbol\">&#x27;RadioListTile</span>学习&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  int radio = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-symbol\">&#x27;TextField</span>学习&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: [\n          <span class=\"hljs-type\">RadioListTile</span>(\n              value: <span class=\"hljs-number\">1</span>,\n              groupValue: radio,\n              title: <span class=\"hljs-type\">Text</span>(&#x27;选项<span class=\"hljs-number\">1</span>&#x27;),\n              onChanged: (int? value) {\n                setState(() {\n                  radio = value!;\n                });\n              }),\n          <span class=\"hljs-type\">RadioListTile</span>(\n              value: <span class=\"hljs-number\">2</span>,\n              groupValue: radio,\n              title: <span class=\"hljs-type\">Text</span>(&#x27;选项<span class=\"hljs-number\">2</span>&#x27;),\n              subtitle: <span class=\"hljs-type\">Text</span>(&#x27;副标题&#x27;),\n              onChanged: (int? value) {\n                setState(() {\n                  radio = value!;\n                });\n              }),\n          <span class=\"hljs-type\">RadioListTile</span>(\n              value: <span class=\"hljs-number\">3</span>,\n              groupValue: radio,\n              title: <span class=\"hljs-type\">Text</span>(&#x27;选项<span class=\"hljs-number\">3</span>&#x27;),\n              subtitle: <span class=\"hljs-type\">Text</span>(&#x27;副标题&#x27;),\n              activeColor: <span class=\"hljs-type\">Colors</span>.white,\n              selected: radio == <span class=\"hljs-number\">3</span>,\n              tileColor: <span class=\"hljs-type\">Colors</span>.cyan,\n              selectedTileColor: <span class=\"hljs-type\">Colors</span>.orange,\n              onChanged: (int? value) {\n                setState(() {\n                  radio = value!;\n                });\n              }),\n          <span class=\"hljs-type\">RadioListTile</span>(\n              value: <span class=\"hljs-number\">4</span>,\n              groupValue: radio,\n              title: <span class=\"hljs-type\">Text</span>(&#x27;选项<span class=\"hljs-number\">4</span>&#x27;),\n              subtitle: <span class=\"hljs-type\">Text</span>(&#x27;副标题&#x27;),\n              onChanged: (int? value) {\n                setState(() {\n                  radio = value!;\n                });\n              }),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"checkbox\">Checkbox</h2>\n<blockquote>\n<p>复选框</p>\n</blockquote>\n<ul>\n<li><code>value</code>：是否选中(必填)</li>\n<li><code>onChanged</code>：改变事件(必填)</li>\n<li><code>tristate</code>：默认为<code>false</code>，如果为<code>true</code>，未选中状态为<code>null</code>，为<code>false</code>则为选中状态为<code>false</code></li>\n<li><code>activeColor</code>：选中的颜色</li>\n<li><code>checkColor</code>：选中的<code>√</code>颜色</li>\n<li><code>splashRadius</code>：点击水波纹大小</li>\n<li><code>materialTapTargetSize</code>：最小点击范围，默认为<code>MaterialTapTargetSize.padded</code>，可选值为<code>MaterialTapTargetSize.shrinkWrap</code></li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: <span class=\"hljs-symbol\">&#x27;Checkbox</span>学习&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-type\">List</span>&lt;int&gt; _selectList = [];\n  <span class=\"hljs-type\">List</span>&lt;int&gt; list = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-symbol\">&#x27;Checkbox</span>学习&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: list\n            .map((item) =&gt; <span class=\"hljs-type\">Row</span>(\n                  children: [\n                    <span class=\"hljs-type\">Checkbox</span>(\n                        value: _selectList.contains(item),\n                        activeColor: <span class=\"hljs-type\">Colors</span>.yellow,\n                        checkColor: <span class=\"hljs-type\">Colors</span>.black,\n                        splashRadius: <span class=\"hljs-number\">30</span>,\n                        materialTapTargetSize: <span class=\"hljs-type\">MaterialTapTargetSize</span>.shrinkWrap,\n                        onChanged: (value) {\n                          value!\n                                ? _selectList.add(item)\n                                : _selectList.remove(item);\n                            setState(() {\n                              _selectList = _selectList;\n                            });\n                        }),\n                    <span class=\"hljs-type\">Text</span>(item.toString())\n                  ],\n                ))\n            .toList(),\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"checkboxlisttile\">CheckboxListTile</h2>\n<blockquote>\n<p>带有标题的复选框</p>\n</blockquote>\n<ul>\n<li><code>value</code>：是否选中(必填)</li>\n<li><code>onChanged</code>：改变事件(必填)</li>\n<li><code>activeColor</code>：选中的颜色</li>\n<li><code>checkColor</code>：选中的<code>√</code>颜色</li>\n<li><code>title</code>：标题</li>\n<li><code>tileColor</code>：<code>CheckboxListTile</code>背景色</li>\n<li><code>selectedTileColor</code>：<code>CheckboxListTile</code>选中的背景色</li>\n<li><code>subtitle</code>：副标题</li>\n<li><code>isThreeLine</code>：平铺是否要显示三行文本，默认为<code>false</code></li>\n<li><code>dense</code>：平铺是否为垂直密集</li>\n<li><code>selected</code>：内容部分是否选中，默认为<code>false</code></li>\n<li><code>tristate</code>：默认为<code>false</code>，如果为<code>true</code>，未选中状态为<code>null</code>，为<code>false</code>则为选中状态为<code>false</code></li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: <span class=\"hljs-symbol\">&#x27;Checkbox</span>学习&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-type\">List</span>&lt;int&gt; _selectList = [];\n  <span class=\"hljs-type\">List</span>&lt;int&gt; list = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-symbol\">&#x27;Checkbox</span>学习&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: list\n            .map((item) =&gt; <span class=\"hljs-type\">CheckboxListTile</span>(\n                value: _selectList.contains(item),\n                title: <span class=\"hljs-type\">Text</span>(item.toString()),\n                subtitle: <span class=\"hljs-type\">Text</span>(&#x27;$item subTitle&#x27;),\n                activeColor: <span class=\"hljs-type\">Colors</span>.yellow,\n                checkColor: <span class=\"hljs-type\">Colors</span>.black,\n                onChanged: (value) {\n                  value! ? _selectList.add(item) : _selectList.remove(item);\n                  setState(() {\n                    _selectList = _selectList;\n                  });\n                }))\n            .toList(),\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"switch\">Switch</h2>\n<blockquote>\n<p>开关</p>\n</blockquote>\n<ul>\n<li><code>value</code>：是否选中(必填)</li>\n<li><code>onChanged</code>：改变事件(必填)</li>\n<li><code>activeColor</code>：选中颜色</li>\n<li><code>activeTrackColor</code>：选中的<code>track</code>颜色，即：横向部分的颜色</li>\n<li><code>inactiveThumbColor</code>：未选中的<code>Thumb</code>颜色，即：圆形部分的颜色</li>\n<li><code>inactiveTrackColor</code>：未选中的<code>track</code>颜色，即：横向部分的颜色</li>\n<li><code>thumbColor</code>：<code>Thumb</code>颜色，即：圆形部分的颜色</li>\n<li><code>trackColor</code>：<code>track</code>颜色，即：横向部分的颜色</li>\n<li><code>materialTapTargetSize</code>：最小点击范围，默认为<code>MaterialTapTargetSize.padded</code>，可选值为<code>MaterialTapTargetSize.shrinkWrap</code></li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: &#x27;开关学习&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(&#x27;开关学习&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: [\n          <span class=\"hljs-type\">Switch</span>(\n              value: <span class=\"hljs-literal\">true</span>,\n              activeColor: <span class=\"hljs-type\">Colors</span>.red,\n              activeTrackColor: <span class=\"hljs-type\">Colors</span>.cyan,\n              inactiveThumbColor: <span class=\"hljs-type\">Colors</span>.yellow,\n              onChanged: (value) {\n                print(value);\n              }),\n          <span class=\"hljs-type\">Switch</span>(\n              value: <span class=\"hljs-literal\">false</span>,\n              activeColor: <span class=\"hljs-type\">Colors</span>.red,\n              inactiveThumbColor: <span class=\"hljs-type\">Colors</span>.yellow,\n              inactiveTrackColor: <span class=\"hljs-type\">Colors</span>.orange,\n              onChanged: (value) {\n                print(value);\n              }),\n          <span class=\"hljs-type\">Switch</span>(\n              value: <span class=\"hljs-literal\">false</span>,\n              thumbColor: <span class=\"hljs-type\">MaterialStateProperty</span>.all(<span class=\"hljs-type\">Colors</span>.cyan),\n              trackColor: <span class=\"hljs-type\">MaterialStateProperty</span>.all(<span class=\"hljs-type\">Colors</span>.amber),\n              onChanged: (value) {\n                print(value);\n              }),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"switchlisttile\">SwitchListTile</h2>\n<blockquote>\n<p>带有标题的开关</p>\n</blockquote>\n<ul>\n<li><code>value</code>：是否选中(必填)</li>\n<li><code>onChanged</code>：改变事件(必填)</li>\n<li><code>activeColor</code>：选中颜色</li>\n<li><code>activeTrackColor</code>：选中的<code>track</code>颜色，即：横向部分的颜色</li>\n<li><code>inactiveThumbColor</code>：未选中的<code>Thumb</code>颜色，即：圆形部分的颜色</li>\n<li><code>inactiveTrackColor</code>：未选中的<code>track</code>颜色，即：横向部分的颜色</li>\n<li><code>title</code>：标题</li>\n<li><code>tileColor</code>：<code>CheckboxListTile</code>背景色</li>\n<li><code>selectedTileColor</code>：<code>CheckboxListTile</code>选中的背景色</li>\n<li><code>subtitle</code>：副标题</li>\n<li><code>isThreeLine</code>：平铺是否要显示三行文本，默认为<code>false</code></li>\n<li><code>dense</code>：平铺是否为垂直密集</li>\n<li><code>contentPadding</code>：内边距</li>\n<li><code>secondary</code>：左侧部件</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: &#x27;开关学习&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  bool _opened = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(&#x27;开关学习&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: [\n          <span class=\"hljs-type\">SwitchListTile</span>(\n              value: _opened,\n              secondary: <span class=\"hljs-type\">Icon</span>(<span class=\"hljs-type\">Icons</span>.cached),\n              title: <span class=\"hljs-type\">Text</span>(&#x27;开关<span class=\"hljs-number\">1</span>&#x27;),\n              onChanged: (value) {\n                setState(() {\n                  _opened = value;\n                });\n              })\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"slider\">Slider</h2>\n<blockquote>\n<p>滑块</p>\n</blockquote>\n<ul>\n<li><code>value</code>：是否选中(必填)</li>\n<li><code>onChanged</code>：改变事件(必填)</li>\n<li><code>onChangeStart</code>：改变开始事件</li>\n<li><code>onChangeEnd</code>：改变结束事件</li>\n<li><code>min</code>：最小值</li>\n<li><code>max</code>：最大值</li>\n<li><code>divisions</code>：间隔数量，设置之后每次改变必须是间隔量</li>\n<li><code>label</code>：滑块的 label，显示在圆点上方</li>\n<li><code>activeColor</code>：已用滑块的颜色</li>\n<li><code>inactiveColor</code>：未用滑块的颜色</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/rendering.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: &#x27;滑块学习&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  double _value = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(&#x27;滑块学习&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: [\n          <span class=\"hljs-type\">Slider</span>(\n            min: <span class=\"hljs-number\">0</span>,\n            max: <span class=\"hljs-number\">100</span>,\n            value: _value,\n            divisions: <span class=\"hljs-number\">10</span>,\n            label: &#x27;这是一个label&#x27;,\n            activeColor: <span class=\"hljs-type\">Colors</span>.orange,\n            inactiveColor: <span class=\"hljs-type\">Colors</span>.red,\n            onChangeStart: (value) {\n              print(<span class=\"hljs-symbol\">&#x27;change</span> start $value&#x27;);\n            },\n            onChanged: (value) {\n              print(value);\n            },\n            onChangeEnd: (value) {\n              print(<span class=\"hljs-symbol\">&#x27;change</span> end $value&#x27;);\n              setState(() {\n                _value = value;\n              });\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n"}