{"title":"Wigets学习之Toast轻提示","slug":"Flutter Wiget","time":"2021-07-01T15:52:31.000Z","author":"renzp94","status":"done","html":"<p><code>Flutter</code>中只有一种轻提示<code>SnackBar</code>，所以要实现其他效果需要自实现</p>\n<h2 id=\"snackbar\">SnackBar</h2>\n<blockquote>\n<p>从底部弹出一条提示信息</p>\n</blockquote>\n<ul>\n<li><code>content</code>：提示内容(必填)</li>\n<li><code>backgroundColor</code>：背景色</li>\n<li><code>elevation</code>：阴影，<code>behavior=SnackBarBehavior.floating</code>才能看到效果</li>\n<li><code>margin</code>：外边距，需要<code>behavior=SnackBarBehavior.floating</code>才行，否则会报错</li>\n<li><code>padding</code>：内边距</li>\n<li><code>width</code>：宽度，需要<code>behavior=SnackBarBehavior.floating &amp;&amp; margin == null</code>才行，否则会报错</li>\n<li><code>shape</code>：裁剪，可通过此属性设置圆角，如：<code>shape: RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(48)))</code></li>\n<li><code>behavior</code>：设置定位，默认为<code>SnackBarBehavior.fixed(紧贴底部)</code>，<code>behavior=SnackBarBehavior.floating(悬停底部)</code></li>\n<li><code>action</code>：操作，可用<code>SnackBarAction</code>指定</li>\n<li><code>duration</code>：动画时长</li>\n<li><code>animation</code>：动画</li>\n<li><code>onVisible</code>：显示事件</li>\n</ul>\n<h3 id=\"snackbaraction\">SnackBarAction</h3>\n<blockquote>\n<p><code>SnackBar</code>操作</p>\n</blockquote>\n<ul>\n<li><code>label</code>：操作的文字</li>\n<li><code>onPressed</code>：操作的点击事件</li>\n<li><code>textColor</code>：文字颜色</li>\n<li><code>disabledTextColor</code>：文字禁用颜色</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-keyword\">final</span> scaffoldMessengerKey = <span class=\"hljs-type\">GlobalKey</span>&lt;<span class=\"hljs-type\">ScaffoldMessengerState</span>&gt;();\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      scaffoldMessengerKey: scaffoldMessengerKey,\n      title: <span class=\"hljs-symbol\">&#x27;Toast</span>轻提示&#x27;,\n      home: <span class=\"hljs-type\">Scaffold</span>(\n        appBar: <span class=\"hljs-type\">AppBar</span>(\n          title: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">&quot;Toast轻提示&quot;</span>),\n        ),\n        body: <span class=\"hljs-type\">Row</span>(\n          children: [\n            <span class=\"hljs-type\">OutlinedButton</span>(\n                onPressed: () {\n                  scaffoldMessengerKey.currentState?.showSnackBar(<span class=\"hljs-type\">SnackBar</span>(\n                      content: <span class=\"hljs-type\">Text</span>(&#x27;这是一条提示&#x27;),\n                      behavior: <span class=\"hljs-type\">SnackBarBehavior</span>.floating,\n                      elevation: <span class=\"hljs-number\">12</span>,\n                      margin: <span class=\"hljs-type\">EdgeInsets</span>.all(<span class=\"hljs-number\">12</span>),\n                      action: <span class=\"hljs-type\">SnackBarAction</span>(\n                        label: &#x27;确定&#x27;,\n                        onPressed: () {},\n                      ),\n                      onVisible: () {\n                        print(&#x27;显示&#x27;);\n                      }));\n                },\n                child: <span class=\"hljs-type\">Text</span>(&#x27;显示提示&#x27;)),\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"toast自实现\">Toast(自实现)</h2>\n<blockquote>\n<p>注意：此实现父部件一定要是一个<code>StatefulWidget</code>，否则使用<code>Overlay.of(context)</code>获取<code>OverlayState</code>时总是为<code>null</code>，等找到解决办法再更新一下代码。</p>\n</blockquote>\n<p><code>toast.dart</code></p>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:async&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter/material.dart&#x27;</span>;\n\nclass Toast {\n  Toast(\n      {required <span class=\"hljs-keyword\">this</span>.context,\n      <span class=\"hljs-keyword\">this</span>.child,\n      <span class=\"hljs-keyword\">this</span>.message,\n      <span class=\"hljs-keyword\">this</span>.position = ToastPosition.center,\n      <span class=\"hljs-keyword\">this</span>.icon,\n      <span class=\"hljs-keyword\">this</span>.duration = <span class=\"hljs-number\">2000</span>,\n      <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-built_in\">color</span> = Colors.black,\n      <span class=\"hljs-keyword\">this</span>.textColor = Colors.white})\n      : <span class=\"hljs-keyword\">assert</span>(child == <span class=\"hljs-keyword\">null</span> || message == <span class=\"hljs-keyword\">null</span>,\n            <span class=\"hljs-string\">&#x27;child != null || message != null&#x27;</span>),\n        <span class=\"hljs-keyword\">assert</span>(message != <span class=\"hljs-keyword\">null</span> &amp;&amp; child == <span class=\"hljs-keyword\">null</span>,\n            <span class=\"hljs-string\">&#x27;message != null &amp;&amp; child == null&#x27;</span>) {\n    OverlayState overlay = Overlay.of(context)!;\n\n    <span class=\"hljs-comment\">// 屏幕大小</span>\n    <span class=\"hljs-keyword\">final</span> offset = MediaQuery.of(context).<span class=\"hljs-built_in\">size</span>.<span class=\"hljs-built_in\">height</span> * <span class=\"hljs-number\">0.2</span>;\n    <span class=\"hljs-comment\">// 距顶部距离</span>\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">double</span>? top = position == ToastPosition.top ? offset : <span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-comment\">// 距底部距离</span>\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">double</span>? bottom = position == ToastPosition.bottom ? offset : <span class=\"hljs-keyword\">null</span>;\n\n    <span class=\"hljs-keyword\">final</span> Widget iconText = icon != <span class=\"hljs-keyword\">null</span>\n        ? Column(\n            mainAxisSize: MainAxisSize.<span class=\"hljs-built_in\">min</span>,\n            children: [\n              SizedBox(\n                <span class=\"hljs-built_in\">height</span>: <span class=\"hljs-number\">4</span>,\n              ),\n              icon!,\n              SizedBox(\n                <span class=\"hljs-built_in\">height</span>: <span class=\"hljs-number\">4</span>,\n              ),\n              Text(message!)\n            ],\n          )\n        : Text(message!);\n\n    <span class=\"hljs-comment\">// 提示信息</span>\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">text</span> = child ?? iconText;\n\n    <span class=\"hljs-keyword\">if</span> (_overlayEntry != <span class=\"hljs-keyword\">null</span>) {\n      <span class=\"hljs-built_in\">clear</span>();\n    }\n\n    _overlayEntry = OverlayEntry(builder: (BuildContext context) {\n      <span class=\"hljs-comment\">// 如果是Toast.loading则icon一定是_LoadingIcon类型</span>\n      <span class=\"hljs-keyword\">final</span> isDisabledTap = icon != <span class=\"hljs-keyword\">null</span> &amp;&amp; icon is _LoadingIcon;\n\n      <span class=\"hljs-keyword\">final</span> body = _Body(\n        <span class=\"hljs-built_in\">text</span>,\n        <span class=\"hljs-built_in\">color</span>: <span class=\"hljs-built_in\">color</span>,\n      );\n\n      <span class=\"hljs-keyword\">final</span> absorbPointer = AbsorbPointer(\n        ignoringSemantics: <span class=\"hljs-keyword\">true</span>,\n        child: body,\n      );\n\n      <span class=\"hljs-keyword\">return</span> Positioned(\n          top: top,\n          bottom: bottom,\n          child: _MessageDefaultStyle(\n            isDisabledTap ? absorbPointer : body,\n            <span class=\"hljs-built_in\">color</span>: textColor,\n          ));\n    });\n\n    overlay.insert(_overlayEntry!);\n\n    <span class=\"hljs-comment\">// 展示时长为0，则为不关闭</span>\n    <span class=\"hljs-keyword\">if</span> (duration != <span class=\"hljs-number\">0</span>) {\n      _timer = Timer(Duration(milliseconds: duration!), <span class=\"hljs-built_in\">clear</span>);\n    }\n  }\n\n  <span class=\"hljs-keyword\">final</span> BuildContext context;\n  <span class=\"hljs-comment\">// 自定义内容</span>\n  <span class=\"hljs-keyword\">final</span> Widget? child;\n  <span class=\"hljs-comment\">// 提示内容</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span>? message;\n  <span class=\"hljs-comment\">// 位置</span>\n  <span class=\"hljs-keyword\">final</span> ToastPosition? position;\n  <span class=\"hljs-comment\">// 图标</span>\n  <span class=\"hljs-keyword\">final</span> Widget? icon;\n  <span class=\"hljs-comment\">// 展示时长(ms)</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">int</span>? duration;\n  <span class=\"hljs-comment\">// 背景色</span>\n  <span class=\"hljs-keyword\">final</span> Color? <span class=\"hljs-built_in\">color</span>;\n  <span class=\"hljs-comment\">// 文本颜色</span>\n  <span class=\"hljs-keyword\">final</span> Color? textColor;\n\n  factory Toast.loading(\n      {required BuildContext context,\n      Widget? child,\n      <span class=\"hljs-keyword\">String</span>? message,\n      <span class=\"hljs-built_in\">int</span>? duration,\n      Color? <span class=\"hljs-built_in\">color</span>,\n      Color? textColor}) = _ToastLoading;\n\n  factory Toast.success(\n      {required BuildContext context,\n      Widget? child,\n      <span class=\"hljs-keyword\">String</span>? message,\n      <span class=\"hljs-built_in\">int</span>? duration,\n      Color? <span class=\"hljs-built_in\">color</span>,\n      Color? textColor}) = _ToastSuccess;\n\n  factory Toast.error(\n      {required BuildContext context,\n      Widget? child,\n      <span class=\"hljs-keyword\">String</span>? message,\n      <span class=\"hljs-built_in\">int</span>? duration,\n      Color? <span class=\"hljs-built_in\">color</span>,\n      Color? textColor}) = _ToastError;\n\n  <span class=\"hljs-comment\">// 清除</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">clear</span>() {\n    _timer?.cancel();\n    _timer = <span class=\"hljs-keyword\">null</span>;\n    _overlayEntry?.remove();\n    _overlayEntry = <span class=\"hljs-keyword\">null</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">enum</span> ToastPosition { top, center, bottom }\n\nOverlayEntry? _overlayEntry;\nTimer? _timer;\n\nclass _ToastLoading extends Toast {\n  _ToastLoading(\n      {required <span class=\"hljs-keyword\">this</span>.context,\n      <span class=\"hljs-keyword\">this</span>.child,\n      <span class=\"hljs-keyword\">this</span>.message,\n      <span class=\"hljs-keyword\">this</span>.duration = <span class=\"hljs-number\">2000</span>,\n      <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-built_in\">color</span> = Colors.black,\n      <span class=\"hljs-keyword\">this</span>.textColor = Colors.white,\n      <span class=\"hljs-keyword\">this</span>.iconBackgroupColor = Colors.white,\n      <span class=\"hljs-keyword\">this</span>.iconColor = Colors.black12})\n      : <span class=\"hljs-keyword\">super</span>(\n            context: context,\n            child: child,\n            message: message,\n            duration: duration,\n            icon: _LoadingIcon(\n              backgroundColor: iconBackgroupColor!,\n              <span class=\"hljs-built_in\">color</span>: iconColor!,\n            ),\n            <span class=\"hljs-built_in\">color</span>: <span class=\"hljs-built_in\">color</span>,\n            textColor: textColor);\n\n  <span class=\"hljs-keyword\">final</span> BuildContext context;\n  <span class=\"hljs-comment\">// 自定义内容</span>\n  <span class=\"hljs-keyword\">final</span> Widget? child;\n  <span class=\"hljs-comment\">// 提示内容</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span>? message;\n  <span class=\"hljs-comment\">// 展示时长(ms)</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">int</span>? duration;\n  <span class=\"hljs-comment\">// 背景色</span>\n  <span class=\"hljs-keyword\">final</span> Color? <span class=\"hljs-built_in\">color</span>;\n  <span class=\"hljs-comment\">// 文本颜色</span>\n  <span class=\"hljs-keyword\">final</span> Color? textColor;\n  <span class=\"hljs-comment\">// loading背景色</span>\n  <span class=\"hljs-keyword\">final</span> Color? iconBackgroupColor;\n  <span class=\"hljs-comment\">// loading颜色</span>\n  <span class=\"hljs-keyword\">final</span> Color? iconColor;\n}\n\nclass _ToastSuccess extends Toast {\n  _ToastSuccess(\n      {required <span class=\"hljs-keyword\">this</span>.context,\n      <span class=\"hljs-keyword\">this</span>.child,\n      <span class=\"hljs-keyword\">this</span>.message,\n      <span class=\"hljs-keyword\">this</span>.duration = <span class=\"hljs-number\">2000</span>,\n      <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-built_in\">color</span> = Colors.black,\n      <span class=\"hljs-keyword\">this</span>.textColor = Colors.white,\n      <span class=\"hljs-keyword\">this</span>.iconColor = Colors.white})\n      : <span class=\"hljs-keyword\">super</span>(\n            context: context,\n            child: child,\n            message: message,\n            duration: duration,\n            icon: Icon(\n              Icons.check_circle,\n              <span class=\"hljs-built_in\">color</span>: iconColor,\n              <span class=\"hljs-built_in\">size</span>: <span class=\"hljs-number\">36</span>,\n            ),\n            <span class=\"hljs-built_in\">color</span>: <span class=\"hljs-built_in\">color</span>,\n            textColor: textColor);\n\n  <span class=\"hljs-keyword\">final</span> BuildContext context;\n  <span class=\"hljs-comment\">// 自定义内容</span>\n  <span class=\"hljs-keyword\">final</span> Widget? child;\n  <span class=\"hljs-comment\">// 提示内容</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span>? message;\n  <span class=\"hljs-comment\">// 展示时长(ms)</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">int</span>? duration;\n  <span class=\"hljs-comment\">// 背景色</span>\n  <span class=\"hljs-keyword\">final</span> Color? <span class=\"hljs-built_in\">color</span>;\n  <span class=\"hljs-comment\">// 文本颜色</span>\n  <span class=\"hljs-keyword\">final</span> Color? textColor;\n  <span class=\"hljs-comment\">// icon颜色</span>\n  <span class=\"hljs-keyword\">final</span> Color? iconColor;\n}\n\nclass _ToastError extends Toast {\n  _ToastError(\n      {required <span class=\"hljs-keyword\">this</span>.context,\n      <span class=\"hljs-keyword\">this</span>.child,\n      <span class=\"hljs-keyword\">this</span>.message,\n      <span class=\"hljs-keyword\">this</span>.duration = <span class=\"hljs-number\">2000</span>,\n      <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-built_in\">color</span> = Colors.black,\n      <span class=\"hljs-keyword\">this</span>.textColor = Colors.white,\n      <span class=\"hljs-keyword\">this</span>.iconColor = Colors.white})\n      : <span class=\"hljs-keyword\">super</span>(\n            context: context,\n            child: child,\n            message: message,\n            duration: duration,\n            icon: Icon(\n              Icons.cancel,\n              <span class=\"hljs-built_in\">color</span>: iconColor,\n              <span class=\"hljs-built_in\">size</span>: <span class=\"hljs-number\">36</span>,\n            ),\n            <span class=\"hljs-built_in\">color</span>: <span class=\"hljs-built_in\">color</span>,\n            textColor: textColor);\n\n  <span class=\"hljs-keyword\">final</span> BuildContext context;\n  <span class=\"hljs-comment\">// 自定义内容</span>\n  <span class=\"hljs-keyword\">final</span> Widget? child;\n  <span class=\"hljs-comment\">// 提示内容</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span>? message;\n  <span class=\"hljs-comment\">// 展示时长(ms)</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">int</span>? duration;\n  <span class=\"hljs-comment\">// 背景色</span>\n  <span class=\"hljs-keyword\">final</span> Color? <span class=\"hljs-built_in\">color</span>;\n  <span class=\"hljs-comment\">// 文本颜色</span>\n  <span class=\"hljs-keyword\">final</span> Color? textColor;\n  <span class=\"hljs-comment\">// icon颜色</span>\n  <span class=\"hljs-keyword\">final</span> Color? iconColor;\n}\n\n<span class=\"hljs-comment\">// 文本默认样式</span>\nclass _MessageDefaultStyle extends StatelessWidget {\n  <span class=\"hljs-keyword\">const</span> _MessageDefaultStyle(<span class=\"hljs-keyword\">this</span>.child, {Key? <span class=\"hljs-built_in\">key</span>, <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-built_in\">color</span>})\n      : <span class=\"hljs-keyword\">super</span>(<span class=\"hljs-built_in\">key</span>: <span class=\"hljs-built_in\">key</span>);\n\n  <span class=\"hljs-keyword\">final</span> Widget child;\n  <span class=\"hljs-keyword\">final</span> Color? <span class=\"hljs-built_in\">color</span>;\n\n  @override\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> DefaultTextStyle(\n      <span class=\"hljs-built_in\">textAlign</span>: TextAlign.center,\n      style: TextStyle(fontSize: <span class=\"hljs-number\">14</span>, <span class=\"hljs-built_in\">color</span>: <span class=\"hljs-built_in\">color</span>!),\n      child: child,\n    );\n  }\n}\n\n<span class=\"hljs-comment\">// 内容主体</span>\nclass _Body extends StatelessWidget {\n  <span class=\"hljs-keyword\">const</span> _Body(<span class=\"hljs-keyword\">this</span>.child, {Key? <span class=\"hljs-built_in\">key</span>, <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-built_in\">color</span>}) : <span class=\"hljs-keyword\">super</span>(<span class=\"hljs-built_in\">key</span>: <span class=\"hljs-built_in\">key</span>);\n\n  <span class=\"hljs-keyword\">final</span> Widget child;\n  <span class=\"hljs-keyword\">final</span> Color? <span class=\"hljs-built_in\">color</span>;\n\n  @override\n  Widget build(BuildContext context) {\n    <span class=\"hljs-comment\">// 屏幕大小</span>\n    <span class=\"hljs-keyword\">final</span> windowWidth = MediaQuery.of(context).<span class=\"hljs-built_in\">size</span>.<span class=\"hljs-built_in\">width</span>;\n    <span class=\"hljs-comment\">// 最大宽度</span>\n    <span class=\"hljs-keyword\">final</span> maxWidth = windowWidth * <span class=\"hljs-number\">0.7</span>;\n\n    <span class=\"hljs-keyword\">return</span> Container(\n        <span class=\"hljs-built_in\">width</span>: windowWidth,\n        child: Center(\n          child: Container(\n              padding: EdgeInsets.symmetric(horizontal: <span class=\"hljs-number\">12</span>, vertical: <span class=\"hljs-number\">8</span>),\n              decoration: BoxDecoration(\n                  <span class=\"hljs-built_in\">color</span>: <span class=\"hljs-built_in\">color</span>!.withOpacity(<span class=\"hljs-number\">0.7</span>),\n                  borderRadius: BorderRadius.all(Radius.circular(<span class=\"hljs-number\">4</span>))),\n              constraints: BoxConstraints(\n                  minWidth: <span class=\"hljs-number\">88</span>, minHeight: <span class=\"hljs-number\">40</span>, maxWidth: maxWidth),\n              child: child),\n        ));\n  }\n}\n\n<span class=\"hljs-comment\">// 加载Icon</span>\nclass _LoadingIcon extends StatelessWidget {\n  _LoadingIcon(\n      {Key? <span class=\"hljs-built_in\">key</span>,\n      <span class=\"hljs-keyword\">this</span>.backgroundColor = Colors.white,\n      <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-built_in\">color</span> = Colors.black12})\n      : <span class=\"hljs-keyword\">super</span>(<span class=\"hljs-built_in\">key</span>: <span class=\"hljs-built_in\">key</span>);\n\n  <span class=\"hljs-keyword\">final</span> Color backgroundColor;\n  <span class=\"hljs-keyword\">final</span> Color <span class=\"hljs-built_in\">color</span>;\n\n  @override\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> CircularProgressIndicator(\n      valueColor: AlwaysStoppedAnimation(<span class=\"hljs-built_in\">color</span>),\n      backgroundColor: backgroundColor,\n    );\n  }\n}\n</code></pre>\n<ul>\n<li><code>context</code>：上下文(必填)</li>\n<li><code>child</code>：自定义内容</li>\n<li><code>message</code>：提示内容</li>\n<li><code>position</code>：显示位置，默认为<code>ToastPosition.center</code></li>\n<li><code>icon</code>：图标</li>\n<li><code>duration</code>：展示时长，默认为 2000，单位：<code>ms</code></li>\n<li><code>color</code>：背景色</li>\n<li><code>textColor</code>：文本颜色</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:learn/widgets/toast.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: <span class=\"hljs-string\">&quot;Toast轻提示&quot;</span>,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n        appBar: <span class=\"hljs-type\">AppBar</span>(\n          title: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-symbol\">&#x27;Toast</span>轻提示&#x27;),\n        ),\n        body: <span class=\"hljs-type\">Wrap</span>(\n          children: [\n            <span class=\"hljs-type\">OutlinedButton</span>(\n              child: <span class=\"hljs-type\">Text</span>(&#x27;显示<span class=\"hljs-type\">Toast</span>&#x27;),\n              onPressed: () {\n                <span class=\"hljs-type\">Toast</span>(\n                  context: context,\n                  message: <span class=\"hljs-string\">&quot;这是一个toast&quot;</span>,\n                );\n              },\n            ),\n            <span class=\"hljs-type\">OutlinedButton</span>(\n              child: <span class=\"hljs-type\">Text</span>(&#x27;显示顶部<span class=\"hljs-type\">Toast</span>&#x27;),\n              onPressed: () {\n                <span class=\"hljs-type\">Toast</span>(\n                    context: context,\n                    message: <span class=\"hljs-string\">&quot;这是一个顶部toast&quot;</span>,\n                    position: <span class=\"hljs-type\">ToastPosition</span>.top);\n              },\n            ),\n            <span class=\"hljs-type\">OutlinedButton</span>(\n              child: <span class=\"hljs-type\">Text</span>(&#x27;显示底部<span class=\"hljs-type\">Toast</span>&#x27;),\n              onPressed: () {\n                <span class=\"hljs-type\">Toast</span>(\n                    context: context,\n                    message: <span class=\"hljs-string\">&quot;这是一个底部toast&quot;</span>,\n                    position: <span class=\"hljs-type\">ToastPosition</span>.bottom);\n              },\n            ),\n            <span class=\"hljs-type\">OutlinedButton</span>(\n              child: <span class=\"hljs-type\">Text</span>(&#x27;显示自定义背景色<span class=\"hljs-type\">Toast</span>&#x27;),\n              onPressed: () {\n                <span class=\"hljs-type\">Toast</span>(\n                    context: context,\n                    message: <span class=\"hljs-string\">&quot;这是一个自定义背景色toast&quot;</span>,\n                    color: <span class=\"hljs-type\">Colors</span>.yellow.shade800);\n              },\n            ),\n            <span class=\"hljs-type\">OutlinedButton</span>(\n              child: <span class=\"hljs-type\">Text</span>(&#x27;显示自定义颜色<span class=\"hljs-type\">Toast</span>&#x27;),\n              onPressed: () {\n                <span class=\"hljs-type\">Toast</span>(\n                    context: context,\n                    message: <span class=\"hljs-string\">&quot;这是一个自定义颜色toast&quot;</span>,\n                    textColor: <span class=\"hljs-type\">Colors</span>.green);\n              },\n            ),\n          ],\n        ));\n  }\n}\n</code></pre>\n<p>Toast 还提供了三个命名构造函数：<code>Toast.loading</code>，<code>Toast.success</code>，<code>Toast.error</code></p>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:learn/widgets/toast.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: <span class=\"hljs-string\">&quot;Toast轻提示&quot;</span>,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n        appBar: <span class=\"hljs-type\">AppBar</span>(\n          title: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-symbol\">&#x27;Toast</span>轻提示&#x27;),\n        ),\n        body: <span class=\"hljs-type\">Wrap</span>(\n          children: [\n            <span class=\"hljs-type\">OutlinedButton</span>(\n              child: <span class=\"hljs-type\">Text</span>(&#x27;显示<span class=\"hljs-type\">Loading</span> <span class=\"hljs-type\">Toast</span>&#x27;),\n              onPressed: () {\n                <span class=\"hljs-type\">Toast</span>.loading(context: context, message: <span class=\"hljs-string\">&quot;这是一个Loading Toast&quot;</span>);\n              },\n            ),\n            <span class=\"hljs-type\">OutlinedButton</span>(\n              child: <span class=\"hljs-type\">Text</span>(&#x27;显示成功<span class=\"hljs-type\">Toast</span>&#x27;),\n              onPressed: () {\n                <span class=\"hljs-type\">Toast</span>.success(context: context, message: <span class=\"hljs-string\">&quot;这是一个成功Toast&quot;</span>);\n              },\n            ),\n            <span class=\"hljs-type\">OutlinedButton</span>(\n              child: <span class=\"hljs-type\">Text</span>(&#x27;显示失败<span class=\"hljs-type\">Toast</span>&#x27;),\n              onPressed: () {\n                <span class=\"hljs-type\">Toast</span>.error(context: context, message: <span class=\"hljs-string\">&quot;这是一个Loading Toast&quot;</span>);\n              },\n            ),\n          ],\n        ));\n  }\n}\n</code></pre>\n"}