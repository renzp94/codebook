{"title":"Wigets学习之Tab","slug":"Flutter Wiget","time":"2021-06-30T16:57:26.000Z","author":"renzp94","status":"done","html":"<p><code>tab</code>包含：<code>TabBar</code>、<code>TabBarView</code></p>\n<h2 id=\"tabbar\">TabBar</h2>\n<ul>\n<li><code>tabs</code>：<code>tabBar</code>选项列表</li>\n<li><code>controller</code>：控制器，一般需要指定</li>\n<li><code>isScrollable</code>：是否可滚动，默认为<code>false</code></li>\n<li><code>indicatorColor</code>：当前激活项的底部指示颜色</li>\n<li><code>automaticIndicatorColorAdjustment</code>：是否自动调整<code>indicatorColor</code>，默认为<code>true</code>，即：当<code>indicatorColor</code>和<code>Material.color</code>相同时，则自动调整<code>indicatorColor=Colors.white</code></li>\n<li><code>indicatorWeight</code>：底部指示器高度，默认为 2</li>\n<li><code>indicatorPadding</code>：底部指示器内边距</li>\n<li><code>indicatorSize</code>：底部指示器宽度，默认为<code>TabBarIndicatorSize.tab(与tab选项一样宽)</code>，还可指定：<code>TabBarIndicatorSize.label(和文本一样宽)</code></li>\n<li><code>labelColor</code>：文本颜色</li>\n<li><code>labelStyle</code>：文本样式</li>\n<li><code>labelPadding</code>：文本内边距</li>\n<li><code>unselectedLabelColor</code>：未选中选项文本颜色</li>\n<li><code>unselectedLabelStyle</code>：未选中选项文本样式</li>\n<li><code>dragStartBehavior</code>：拖拽开始行为，默认：<code>DragStartBehavior.start(拖动开始位置)</code>，<code>DragStartBehavior.down(点击位置)</code></li>\n<li><code>onTap</code>：点击事件</li>\n<li><code>physics</code>：滑动动画，禁止滑动可指定为<code>NeverScrollableScrollPhysics</code></li>\n</ul>\n<h2 id=\"tabbarview\">TabBarView</h2>\n<ul>\n<li><code>children</code>：选项对应的选项页(必填)</li>\n<li><code>controller</code>：控制器，一般需要指定</li>\n<li><code>physics</code>：滑动行为</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/gestures.dart&#x27;;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(title: <span class=\"hljs-symbol\">&#x27;Tab</span>学习&#x27;, home: <span class=\"hljs-type\">Home</span>());\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">SingleTickerProviderStateMixin</span> </span>{\n  late <span class=\"hljs-type\">TabController</span> _tabController;\n  <span class=\"hljs-type\">List</span>&lt;<span class=\"hljs-type\">String</span>&gt; list = <span class=\"hljs-type\">List</span>.generate(<span class=\"hljs-number\">10</span>, (index) =&gt; &#x27;分类${index + <span class=\"hljs-number\">1</span>}&#x27;);\n\n  <span class=\"hljs-meta\">@override</span>\n  void initState() {\n    <span class=\"hljs-keyword\">super</span>.initState();\n    _tabController = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">TabController</span>(length: list.length, vsync: <span class=\"hljs-keyword\">this</span>);\n  }\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-symbol\">&#x27;Tab</span>学习&#x27;),\n        bottom: <span class=\"hljs-type\">TabBar</span>(\n          controller: _tabController,\n          isScrollable: <span class=\"hljs-literal\">true</span>,\n          indicatorColor: <span class=\"hljs-type\">Colors</span>.orange,\n          indicatorSize: <span class=\"hljs-type\">TabBarIndicatorSize</span>.tab,\n          labelColor: <span class=\"hljs-type\">Colors</span>.black,\n          labelStyle: <span class=\"hljs-type\">TextStyle</span>(fontWeight: <span class=\"hljs-type\">FontWeight</span>.bold),\n          labelPadding: <span class=\"hljs-type\">EdgeInsets</span>.symmetric(horizontal: <span class=\"hljs-number\">12</span>, vertical: <span class=\"hljs-number\">4</span>),\n          unselectedLabelColor: <span class=\"hljs-type\">Colors</span>.black26,\n          tabs: list.map((item) =&gt; <span class=\"hljs-type\">Text</span>(item)).toList(),\n        ),\n      ),\n      body: <span class=\"hljs-type\">TabBarView</span>(\n          controller: _tabController,\n          children: list\n              .map((item) =&gt; <span class=\"hljs-type\">Container</span>(\n                    child: <span class=\"hljs-type\">Text</span>(\n                      item,\n                      textDirection: <span class=\"hljs-type\">TextDirection</span>.ltr,\n                    ),\n                  ))\n              .toList()),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"defaulttabcontroller\">DefaultTabController</h2>\n<blockquote>\n<p>为子部件提供一个默认的<code>tab controller</code>，这样就不用指定<code>tabBar</code>、<code>tabBarView</code>的<code>controller</code>了</p>\n</blockquote>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(title: <span class=\"hljs-symbol\">&#x27;Tab</span>学习&#x27;, home: <span class=\"hljs-type\">Home</span>());\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">SingleTickerProviderStateMixin</span> </span>{\n  <span class=\"hljs-type\">List</span>&lt;<span class=\"hljs-type\">String</span>&gt; list = <span class=\"hljs-type\">List</span>.generate(<span class=\"hljs-number\">10</span>, (index) =&gt; &#x27;分类${index + <span class=\"hljs-number\">1</span>}&#x27;);\n\n  <span class=\"hljs-meta\">@override</span>\n  void initState() {\n    <span class=\"hljs-keyword\">super</span>.initState();\n  }\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">DefaultTabController</span>(\n        length: list.length,\n        child: <span class=\"hljs-type\">Scaffold</span>(\n          appBar: <span class=\"hljs-type\">AppBar</span>(\n            title: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-symbol\">&#x27;Tab</span>学习&#x27;),\n            bottom: <span class=\"hljs-type\">TabBar</span>(\n              isScrollable: <span class=\"hljs-literal\">true</span>,\n              indicatorColor: <span class=\"hljs-type\">Colors</span>.orange,\n              indicatorSize: <span class=\"hljs-type\">TabBarIndicatorSize</span>.tab,\n              labelColor: <span class=\"hljs-type\">Colors</span>.black,\n              labelStyle: <span class=\"hljs-type\">TextStyle</span>(fontWeight: <span class=\"hljs-type\">FontWeight</span>.bold),\n              labelPadding: <span class=\"hljs-type\">EdgeInsets</span>.symmetric(horizontal: <span class=\"hljs-number\">12</span>, vertical: <span class=\"hljs-number\">4</span>),\n              unselectedLabelColor: <span class=\"hljs-type\">Colors</span>.black26,\n              tabs: list.map((item) =&gt; <span class=\"hljs-type\">Text</span>(item)).toList(),\n            ),\n          ),\n          body: <span class=\"hljs-type\">TabBarView</span>(\n              children: list\n                  .map((item) =&gt; <span class=\"hljs-type\">Container</span>(\n                        child: <span class=\"hljs-type\">Text</span>(\n                          item,\n                          textDirection: <span class=\"hljs-type\">TextDirection</span>.ltr,\n                        ),\n                      ))\n                  .toList()),\n        ));\n  }\n}\n</code></pre>\n"}