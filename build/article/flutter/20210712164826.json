{"title":"Wigets学习之日期时间","slug":"Flutter Wiget","time":"2021-07-12T16:48:47.000Z","author":"renzp94","status":"done","html":"<h2 id=\"calendardatepicker\">CalendarDatePicker</h2>\n<blockquote>\n<p>日期选择器</p>\n</blockquote>\n<ul>\n<li><code>initialDate</code>：初始化日期(必填)</li>\n<li><code>firstDate</code>：可选的最早日期(必填)</li>\n<li><code>lastDate</code>：可选的最晚日期(必填)</li>\n<li><code>onDateChanged</code>：日期改变事件(必填)</li>\n<li><code>currentDate</code>：当前选择日期</li>\n<li><code>onDisplayedMonthChanged</code>：年月改变事件</li>\n<li><code>initialCalendarMode</code>：日期格式，默认为<code>DatePickerMode.day(天选择)</code>，可选值<code>DatePickerMode.year(年选择)</code></li>\n<li><code>selectableDayPredicate</code>：可选择的日期，接收一个当前显示的日期参数，返回<code>true</code>则表示当前日期可选，返回<code>false</code>则当前日期不可选</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: &#x27;日期选择&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(&#x27;日期选择&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: [\n          <span class=\"hljs-type\">CalendarDatePicker</span>(\n            initialDate: <span class=\"hljs-type\">DateTime</span>.now(),\n            firstDate: <span class=\"hljs-type\">DateTime</span>(<span class=\"hljs-number\">1970</span>),\n            lastDate: <span class=\"hljs-type\">DateTime</span>.now(),\n            selectableDayPredicate: (date) {\n              <span class=\"hljs-keyword\">return</span> date != <span class=\"hljs-type\">DateTime</span>(<span class=\"hljs-number\">2021</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">1</span>);\n            },\n            onDisplayedMonthChanged: (value) {\n              print(<span class=\"hljs-symbol\">&#x27;onDisplayedMonthChanged</span> $value&#x27;);\n            },\n            onDateChanged: (value) {\n              print(value);\n            },\n          )\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"yearpicker\">YearPicker</h2>\n<blockquote>\n<p>年份选择器</p>\n</blockquote>\n<ul>\n<li><code>firstDate</code>：可选的最早年份(必填)</li>\n<li><code>lastDate</code>：可选的最晚年份(必填)</li>\n<li><code>selectedDate</code>：已选的年份(必填)</li>\n<li><code>onChanged</code>：年份改变事件(必填)</li>\n<li><code>currentDate</code>：当前选择日期</li>\n<li><code>initialDate</code>：初始化日期</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: &#x27;年份选择&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(&#x27;年份选择&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: [\n          <span class=\"hljs-type\">Expanded</span>(\n              child: <span class=\"hljs-type\">YearPicker</span>(\n                  firstDate: <span class=\"hljs-type\">DateTime</span>(<span class=\"hljs-number\">1970</span>),\n                  lastDate: <span class=\"hljs-type\">DateTime</span>.now(),\n                  selectedDate: <span class=\"hljs-type\">DateTime</span>(<span class=\"hljs-number\">2020</span>),\n                  onChanged: (value) {\n                    print(value);\n                  })),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"showdatepicker\">showDatePicker</h2>\n<blockquote>\n<p>显示日期选择器</p>\n</blockquote>\n<ul>\n<li><code>context</code>：上下文(必填)</li>\n<li><code>initialDate</code>：初始化日期(必填)</li>\n<li><code>firstDate</code>：可选的最早日期(必填)</li>\n<li><code>lastDate</code>：可选的最晚日期(必填)</li>\n<li><code>currentDate</code>：当前选择日期</li>\n<li><code>initialEntryMode</code>：日期面板模式，默认为<code>DatePickerEntryMode.calendar(日期面板)</code>，可选<code>DatePickerEntryMode.input(输入框)</code></li>\n<li><code>selectableDayPredicate</code>：可选择的日期，接收一个当前显示的日期参数，返回<code>true</code>则表示当前日期可选，返回<code>false</code>则当前日期不可选</li>\n<li><code>helpText</code>：顶部标题的文本</li>\n<li><code>cancelText</code>：取消按钮的文本</li>\n<li><code>confirmText</code>：确定按钮的文本</li>\n<li><code>locale</code>：国际化配置</li>\n<li><code>useRootNavigator</code>：是否使用路由，默认为<code>true</code></li>\n<li><code>routeSettings</code>：路由配置</li>\n<li><code>initialDatePickerMode</code>：日期格式，默认为<code>DatePickerMode.day(天选择)</code>，可选值<code>DatePickerMode.year(年选择)</code></li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: &#x27;日期选择&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(&#x27;日期选择&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: [\n          <span class=\"hljs-type\">Row</span>(\n            children: [\n              <span class=\"hljs-type\">Text</span>(&#x27;日期选择：&#x27;),\n              <span class=\"hljs-type\">Expanded</span>(\n                  child: <span class=\"hljs-type\">TextField</span>(\n                readOnly: <span class=\"hljs-literal\">true</span>,\n                decoration: <span class=\"hljs-type\">InputDecoration</span>(hintText: &#x27;请选择日期&#x27;),\n                onTap: () {\n                  showDatePicker(\n                      context: context,\n                      initialDate: <span class=\"hljs-type\">DateTime</span>.now(),\n                      firstDate: <span class=\"hljs-type\">DateTime</span>(<span class=\"hljs-number\">1970</span>),\n                      lastDate: <span class=\"hljs-type\">DateTime</span>.now(),\n                      selectableDayPredicate: (date) {\n                        <span class=\"hljs-keyword\">return</span> date != <span class=\"hljs-type\">DateTime</span>(<span class=\"hljs-number\">2021</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">1</span>);\n                      },\n                      helpText: &#x27;请选择一个日期&#x27;,\n                      cancelText: &#x27;取消&#x27;,\n                      confirmText: &#x27;确定&#x27;,\n                      useRootNavigator: <span class=\"hljs-literal\">true</span>,\n                      initialDatePickerMode: <span class=\"hljs-type\">DatePickerMode</span>.day);\n                },\n              ))\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"showdaterangepicker\">showDateRangePicker</h2>\n<blockquote>\n<p>日期范围选择器</p>\n</blockquote>\n<ul>\n<li><code>context</code>：上下文(必填)</li>\n<li><code>initialDateRange</code>：初始化日期范围</li>\n<li><code>firstDate</code>：可选的最早日期(必填)</li>\n<li><code>lastDate</code>：可选的最晚日期(必填)</li>\n<li><code>currentDate</code>：当前选择日期</li>\n<li><code>initialEntryMode</code>：日期面板模式，默认为<code>DatePickerEntryMode.calendar(日期面板)</code>，可选<code>DatePickerEntryMode.input(输入框)</code></li>\n<li><code>selectableDayPredicate</code>：可选择的日期，接收一个当前显示的日期参数，返回<code>true</code>则表示当前日期可选，返回<code>false</code>则当前日期不可选</li>\n<li><code>helpText</code>：顶部标题的文本</li>\n<li><code>cancelText</code>：<code>DatePickerEntryMode.input</code>模式下取消按钮的文本</li>\n<li><code>confirmText</code>：<code>DatePickerEntryMode.input</code>模式下确定按钮的文本</li>\n<li><code>saveText</code>：<code>DatePickerEntryMode.calendar</code>模式下确定按钮的文本</li>\n<li><code>fieldStartHintText</code>：<code>DatePickerEntryMode.input</code>模式下开始日期的提示文本</li>\n<li><code>fieldEndHintText</code>：<code>DatePickerEntryMode.input</code>模式下结束日期的提示文本</li>\n<li><code>fieldStartLabelText</code>：<code>DatePickerEntryMode.input</code>模式下开始日期<code>label</code>的文本</li>\n<li><code>fieldEndLabelText</code>：<code>DatePickerEntryMode.input</code>模式下结束日期<code>label</code>的文本</li>\n<li><code>locale</code>：国际化配置</li>\n<li><code>useRootNavigator</code>：是否使用路由，默认为<code>true</code></li>\n<li><code>routeSettings</code>：路由配置</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: &#x27;日期范围选择&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(&#x27;日期范围选择&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: [\n          <span class=\"hljs-type\">Row</span>(\n            children: [\n              <span class=\"hljs-type\">Text</span>(&#x27;日期范围选择：&#x27;),\n              <span class=\"hljs-type\">Expanded</span>(\n                  child: <span class=\"hljs-type\">TextField</span>(\n                readOnly: <span class=\"hljs-literal\">true</span>,\n                decoration: <span class=\"hljs-type\">InputDecoration</span>(hintText: &#x27;请选择日期范围&#x27;),\n                onTap: () {\n                  showDateRangePicker(\n                      context: context,\n                      firstDate: <span class=\"hljs-type\">DateTime</span>(<span class=\"hljs-number\">1970</span>),\n                      lastDate: <span class=\"hljs-type\">DateTime</span>.now(),\n                      helpText: &#x27;请选择日期范围&#x27;,\n                      cancelText: &#x27;取消&#x27;,\n                      confirmText: &#x27;确定&#x27;,\n                      saveText: &#x27;确定&#x27;,\n                      fieldStartHintText: &#x27;请输入开始日期&#x27;,\n                      fieldEndHintText: &#x27;请输入结束日期&#x27;,\n                      fieldStartLabelText: &#x27;开始日期&#x27;,\n                      fieldEndLabelText: &#x27;结束日期&#x27;);\n                },\n              ))\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"cupertinodatepicker\">CupertinoDatePicker</h2>\n<blockquote>\n<p>IOS 风格的日期时间选择器</p>\n</blockquote>\n<ul>\n<li><code>onDateTimeChanged</code>：时间改变事件(必填)</li>\n<li><code>mode</code>：显示模式，默认为<code>CupertinoDatePickerMode.dateAndTime(日期时间)</code>，可选：<code>CupertinoDatePickerMode.time(时间)</code>、<code>CupertinoDatePickerMode.date(日期)</code></li>\n<li><code>initialDateTime</code>：初始化日期时间</li>\n<li><code>minimumDate</code>：最小日期</li>\n<li><code>minimumYear</code>：最小年份，默认为<code>1</code></li>\n<li><code>maximumYear</code>：最大年份</li>\n<li><code>minuteInterval</code>：分钟的粒度，必须是 60 的正整数因子，即一分钟可以分割为<code>60/minuteInterval</code>份，默认为<code>1</code></li>\n<li><code>use24hFormat</code>：是否使用 24 小时制，默认为<code>false</code></li>\n<li><code>backgroundColor</code>：背景色</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/cupertino.dart&#x27;;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: &#x27;日期时间选择&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(&#x27;日期时间选择&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: [\n          <span class=\"hljs-type\">Expanded</span>(\n              child: <span class=\"hljs-type\">CupertinoDatePicker</span>(\n            onDateTimeChanged: (value) {\n              print(value);\n            },\n            initialDateTime: <span class=\"hljs-type\">DateTime</span>.now(),\n            minimumDate: <span class=\"hljs-type\">DateTime</span>(<span class=\"hljs-number\">2021</span>, <span class=\"hljs-number\">6</span>),\n            use24hFormat: <span class=\"hljs-literal\">true</span>,\n            backgroundColor: <span class=\"hljs-type\">Colors</span>.black38,\n          )),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"showtimepicker\">showTimePicker</h2>\n<blockquote>\n<p>时间选择器</p>\n</blockquote>\n<ul>\n<li><code>context</code>：上下文(必填)</li>\n<li><code>initialTime</code>：初始化时间</li>\n<li><code>useRootNavigator</code>：是否使用路由，默认为<code>true</code></li>\n<li><code>initialEntryMode</code>：时间面板模式，默认为<code>TimePickerEntryMode.dial(时钟面板)</code>，可选<code>DatePickerEntryMode.input(输入框)</code></li>\n<li><code>helpText</code>：顶部标题的文本</li>\n<li><code>cancelText</code>：取消按钮的文本</li>\n<li><code>confirmText</code>：确定按钮的文本</li>\n<li><code>routeSettings</code>：路由配置</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: &#x27;日期时间选择&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(&#x27;日期时间选择&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: [\n          <span class=\"hljs-type\">Row</span>(\n            children: [\n              <span class=\"hljs-type\">Text</span>(&#x27;时间选择：&#x27;),\n              <span class=\"hljs-type\">Expanded</span>(\n                  child: <span class=\"hljs-type\">TextField</span>(\n                readOnly: <span class=\"hljs-literal\">true</span>,\n                decoration: <span class=\"hljs-type\">InputDecoration</span>(hintText: &#x27;请选择时间&#x27;),\n                onTap: () {\n                  showTimePicker(\n                      context: context,\n                      initialTime: <span class=\"hljs-type\">TimeOfDay</span>.now(),\n                      helpText: &#x27;请选择时间&#x27;,\n                      cancelText: &#x27;取消&#x27;,\n                      confirmText: &#x27;确定&#x27;);\n                },\n              ))\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"cupertinotimerpicker\">CupertinoTimerPicker</h2>\n<blockquote>\n<p>IOS 风格的时间选择器</p>\n</blockquote>\n<ul>\n<li><code>onTimerDurationChanged</code>：时间改变事件(必填)</li>\n<li><code>mode</code>：模式，默认为<code>CupertinoTimerPickerMode.hms(时/分/秒)</code>，可选：<code>CupertinoTimerPickerMode.hm(时/分)</code>、<code>CupertinoTimerPickerMode.ms(分/秒)</code></li>\n<li><code>initialTimerDuration</code>：初始化时间，默认为<code>Duration.zero</code></li>\n<li><code>minuteInterval</code>：分钟的粒度，必须是 60 的正整数因子，即一分钟可以分割为<code>60/minuteInterval</code>份，默认为<code>1</code></li>\n<li><code>secondInterval</code>：秒的粒度，必须是 60 的正整数因子，即一分钟可以分割为<code>60/secondInterval</code>份，默认为<code>1</code></li>\n<li><code>alignment</code>：对齐方式，默认为<code>Alignment.center</code></li>\n<li><code>backgroundColor</code>：背景色</li>\n</ul>\n<pre><code class=\"language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/cupertino.dart&#x27;;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-symbol\">&#x27;package</span>:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(<span class=\"hljs-type\">App</span>());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MaterialApp</span>(\n      title: &#x27;日期时间选择&#x27;,\n      home: <span class=\"hljs-type\">Home</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-type\">Home</span>({<span class=\"hljs-type\">Key</span>? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  _HomeState createState() =&gt; _HomeState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_HomeState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State&lt;Home&gt;</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-type\">Widget</span> build(<span class=\"hljs-type\">BuildContext</span> context) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Scaffold</span>(\n      appBar: <span class=\"hljs-type\">AppBar</span>(\n        title: <span class=\"hljs-type\">Text</span>(&#x27;日期时间选择&#x27;),\n      ),\n      body: <span class=\"hljs-type\">Column</span>(\n        children: [\n          <span class=\"hljs-type\">Expanded</span>(\n              child: <span class=\"hljs-type\">CupertinoTimerPicker</span>(\n            onTimerDurationChanged: (value) {\n              print(value);\n            },\n            initialTimerDuration: <span class=\"hljs-type\">Duration</span>(hours: <span class=\"hljs-number\">12</span>),\n            backgroundColor: <span class=\"hljs-type\">Colors</span>.orange,\n          )),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n"}