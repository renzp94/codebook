{"title":"Svelte中的动态渲染和事件绑定","slug":"svelte","time":"2021-03-22T14:30:46.000Z","author":"renzp94","status":"done","html":"<h2 id=\"动态渲染\">动态渲染</h2>\n<p>在<code>Svelte</code>中支持：<code>条件渲染(if)</code>、<code>列表渲染(each)</code>、<code>异步判断渲染(await)</code>。</p>\n<h3 id=\"条件渲染if\">条件渲染(if)</h3>\n<p>在<code>Svelte</code>中使用条件渲染主要有以下几个方式：</p>\n<ul>\n<li>if：<code>{#if 条件} ... {/if}</code></li>\n<li>if-else：<code>{#if 条件} ... {:else} ... {/if}</code></li>\n<li>if-else if：<code>{#if 条件} ... {:else if 条件} ... {/if}</code></li>\n</ul>\n<p><a href=\"https://svelte.dev/repl/7408082a2be74214b71de24be656d315?version=3\">在线 REPL</a></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> role = <span class=\"hljs-string\">&#x27;admin&#x27;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">bind:value</span>=</span></span><span class=\"hljs-template-variable\">{role}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;normal&quot;</span>&gt;</span>普通用户<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;admin&quot;</span>&gt;</span>管理员<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span>超级管理员<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n</span><span class=\"hljs-template-tag\">{#<span class=\"hljs-name\">if</span> role === &#x27;normal&#x27;}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>普通用户<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</span><span class=\"hljs-template-variable\">{:else <span class=\"hljs-keyword\">if</span> role === &#x27;admin&#x27;}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>管理员<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</span><span class=\"hljs-template-variable\">{:else <span class=\"hljs-keyword\">if</span> role === &#x27;root&#x27;}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>超级管理员<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</span><span class=\"hljs-template-variable\">{:else}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>未知身份<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</span><span class=\"hljs-template-tag\">{/<span class=\"hljs-name\">if</span>}</span>\n</code></pre>\n<h3 id=\"列表渲染each\">列表渲染(each)</h3>\n<p>在<code>Svelte</code>中列表渲染通过<code>{#each 列表 as 列表元素,列表下标 (key)} ... {/each}</code>，支持<code>数组</code>或<code>类似数组的对象(有length属性)</code>,列表元素支持解构。其中，<code>key</code>是为了保证列表数据更新后视图渲染正确，一般需要具有唯一性。</p>\n<p><a href=\"https://svelte.dev/repl/46bea9c9d7ad4725b10240ef9e7c1b42?version=3\">在线 REPL</a></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">const</span> books = [\n        </span></span><span class=\"xquery\">{<span class=\"hljs-built_in\"> id</span>: <span class=\"hljs-number\">1</span>, text: <span class=\"hljs-string\">&#x27;Javascript&#x27;</span> }</span><span class=\"xml\">,\n        </span><span class=\"xquery\">{<span class=\"hljs-built_in\"> id</span>: <span class=\"hljs-number\">2</span>, text: <span class=\"hljs-string\">&#x27;Svelte&#x27;</span> }</span><span class=\"xml\">,\n        </span><span class=\"xquery\">{<span class=\"hljs-built_in\"> id</span>: <span class=\"hljs-number\">3</span>, text: <span class=\"hljs-string\">&#x27;React&#x27;</span> }</span><span class=\"xml\">,\n        </span><span class=\"xquery\">{<span class=\"hljs-built_in\"> id</span>: <span class=\"hljs-number\">4</span>, text: <span class=\"hljs-string\">&#x27;Vue&#x27;</span> }</span><span class=\"xml\">\n    ];\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--\n        </span></span><span class=\"xquery\">{#each books <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">item</span>,index (<span class=\"hljs-type\">item</span><span class=\"hljs-built_in\">.id</span>)}</span><span class=\"xml\"><span class=\"hljs-comment\">\n            </span></span><span class=\"xml\"><span class=\"hljs-comment\">&lt;li&gt;</span></span><span class=\"xquery\">{index + <span class=\"hljs-number\">1</span>}</span><span class=\"xml\"><span class=\"hljs-comment\">. </span></span><span class=\"xquery\">{<span class=\"hljs-type\">item</span>.<span class=\"hljs-type\">text</span>}</span><span class=\"xml\"><span class=\"hljs-comment\">&lt;/li&gt;</span></span><span class=\"xml\"><span class=\"hljs-comment\">\n        </span></span><span class=\"xquery\">{/each}</span><span class=\"xml\"><span class=\"hljs-comment\">\n    --&gt;</span>\n    </span><span class=\"xquery\">{#each books <span class=\"hljs-keyword\">as</span> {<span class=\"hljs-built_in\"> id</span>, <span class=\"hljs-type\">text</span> }</span><span class=\"xml\">, index (id)}\n        </span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span></span><span class=\"xquery\">{index + <span class=\"hljs-number\">1</span>}</span><span class=\"xml\">. </span><span class=\"xquery\">{<span class=\"hljs-type\">text</span>}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><span class=\"xml\">\n    </span><span class=\"xquery\">{/each}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span>\n</code></pre>\n<h3 id=\"异步判断渲染await\">异步判断渲染(await)</h3>\n<p>当列表需要请求中状态时，就可以用<code>异步判断渲染</code>，主要有以下几个方式。</p>\n<ul>\n<li>请求中、成功、错误：<code>{#await expression}...{:then data}...{:catch error}...{/await}</code></li>\n<li>请求中、成功：<code>{#await expression}...{:then data}...{/await}</code></li>\n<li>请求成功：<code>{#await expression then data}...{/await}</code></li>\n<li>请求错误：<code>{#await expression catch error}...{/await}</code></li>\n</ul>\n<p><a href=\"https://svelte.dev/repl/426d2afd6d6b47ffa2377d10f6536275?version=3.35.0\">在线 REPL</a></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> list = [];\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mock</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n            <span class=\"hljs-keyword\">const</span> list = [\n                { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Javascript&#x27;</span> },\n                { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Svelte&#x27;</span> },\n                { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;React&#x27;</span> },\n                { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Vue&#x27;</span> }\n            ];\n\n            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n                resolve(list);\n                <span class=\"hljs-comment\">//                 reject()</span>\n            }, <span class=\"hljs-number\">3000</span>);\n        });\n    }\n\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">init</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> mock();\n        list = data;\n    }\n\n    <span class=\"hljs-keyword\">let</span> promise = init();\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n{#await promise}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n{:then}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n        {#each list as { id, text } (id)}\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>{text}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n        {/each}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n{:catch}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>请求失败，请稍后重试<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n{/await}\n</code></pre>\n<blockquote>\n<p>注意：如果不需要请求或失败后的数据可以省略为：<code>{:then data}</code>→<code>{:then}</code>、<code>{:catch error}</code>→<code>{:catch}</code></p>\n</blockquote>\n<h2 id=\"事件绑定\">事件绑定</h2>\n<h3 id=\"dom-事件绑定\">DOM 事件绑定</h3>\n<p>在<code>Svelte</code>中使用<code>on:</code>来绑定事件，支持<code>inline handlers(内联函数)</code>。</p>\n<p><a href=\"https://svelte.dev/repl/27d894922eea42eb88b32678911f554a?version=3\">在线 REPL</a></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">const</span> onClick = <span class=\"hljs-function\">() =&gt;</span> count++;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- 内联样式 --&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- &lt;button on:click=</span></span><span class=\"hljs-template-variable\">{() =&gt; count++}</span><span class=\"xml\"><span class=\"hljs-comment\">&gt;点击了</span></span><span class=\"hljs-template-variable\">{count}</span><span class=\"xml\"><span class=\"hljs-comment\">次&lt;/button&gt; --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=</span></span><span class=\"hljs-template-variable\">{onClick}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>点击了</span><span class=\"hljs-template-variable\">{count}</span><span class=\"xml\">次<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n</code></pre>\n<p><code>Svelte</code>同时也提供了可以更改其行为的事件修饰符，用<code>|</code>使用，修饰符可以多个使用。</p>\n<ul>\n<li><code>preventDefault</code>：<code>event.preventDefault()</code>阻止默认事件</li>\n<li><code>stopPropagation</code>：<code>event.stopPropagation()</code>阻止事件传递</li>\n<li><code>passive</code>：改善了触摸/滚轮事件的滚动性能（Svelte 会在安全的地方自动添加滚动条）</li>\n<li><code>nonpassive</code>：明确设置<code>passive: false</code></li>\n<li><code>capture</code>：将事件触发时机改为<code>捕获阶段</code>，默认为<code>冒泡阶段</code>。<a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling_and_capture\">MDN Docs</a></li>\n<li><code>once</code>：只触发一次</li>\n<li><code>self</code>：仅当<code>event.target</code>是元素本身时才会触发事件</li>\n</ul>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> blockCount = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">const</span> onClick = <span class=\"hljs-function\">() =&gt;</span> count++;\n    <span class=\"hljs-keyword\">const</span> onBlockClick = <span class=\"hljs-function\">() =&gt;</span> blockCount++;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;block&quot;</span> <span class=\"hljs-attr\">on:click</span>|<span class=\"hljs-attr\">self</span>=<span class=\"hljs-string\">{onBlockClick}</span>&gt;</span>\n    block被点击了{blockCount}次\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>|<span class=\"hljs-attr\">once</span>=<span class=\"hljs-string\">{onClick}</span>&gt;</span>点击了{count}次<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-class\">.block</span> {\n        <span class=\"hljs-attribute\">background-color</span>: red;\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></pre>\n<h3 id=\"组件中传递事件\">组件中传递事件</h3>\n<p>如果想监听组件的事件，则需要在组件内容触发事件，可通过<code>createEventDispatcher</code>创建一个触发器来触发。</p>\n<blockquote>\n<p>注意：通过<code>createEventDispatcher</code>触发的事件在回调中的参数是一个自定义事件对象<code>CustomEvent</code>，需要通过<code>e.detail</code>来获取触发时传入的数据。</p>\n</blockquote>\n<p><a href=\"https://svelte.dev/repl/b35de87bef9740b593984d0487c63ae7?version=3\">在线 REPL</a></p>\n<p><code>Select.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> </span></span><span class=\"hljs-template-variable\">{ createEventDispatcher }</span><span class=\"xml\"><span class=\"javascript\"> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;svelte&#x27;</span>;\n\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> value;\n\n    <span class=\"hljs-keyword\">const</span> dispatch = createEventDispatcher();\n    <span class=\"hljs-keyword\">const</span> onChange = <span class=\"hljs-function\">() =&gt;</span> dispatch(<span class=\"hljs-string\">&#x27;change&#x27;</span>, value);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">bind:value</span> <span class=\"hljs-attr\">on:blur</span> <span class=\"hljs-attr\">on:change</span>=</span></span><span class=\"hljs-template-variable\">{onChange}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></span>\n</code></pre>\n<p><code>App.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> Select <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Select.svelte&#x27;</span>;\n    <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-string\">&#x27;1&#x27;</span>;\n\n    <span class=\"hljs-keyword\">const</span> onChange = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(e.detail);\n    };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span> <span class=\"hljs-attr\">bind:value</span> <span class=\"hljs-attr\">on:change</span>=<span class=\"hljs-string\">{onChange}</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span>选项1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;2&quot;</span>&gt;</span>选项2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;3&quot;</span>&gt;</span>选项3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Select</span>&gt;</span>\n</code></pre>\n<p>组件事件不会冒泡，若需要监听某个深度嵌套的组件，则需要在中间组件做转发，若中间组件只是转发事件，不对事件传递的数据做处理，则可以通过<code>on:事件名</code>直接转发(DOM 元素也适用)，无需通过<code>createEventDispatcher</code>来触发。</p>\n<p><a href=\"https://svelte.dev/repl/8a5d783774dd4f5db9e88b3e144590b0?version=3\">在线 REPL</a></p>\n<p><code>Level2.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> </span></span><span class=\"hljs-template-variable\">{ createEventDispatcher }</span><span class=\"xml\"><span class=\"javascript\"> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;svelte&#x27;</span>;\n\n    <span class=\"hljs-keyword\">const</span> dispatch = createEventDispatcher();\n\n    <span class=\"hljs-keyword\">const</span> onClick = <span class=\"hljs-function\">() =&gt;</span> dispatch(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-string\">&#x27;click&#x27;</span>);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=</span></span><span class=\"hljs-template-variable\">{onClick}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n</code></pre>\n<p><code>Level1.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> { createEventDispatcher } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;svelte&#x27;</span>;\n    <span class=\"hljs-keyword\">import</span> Level2 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Level2.svelte&#x27;</span>;\n\n    <span class=\"hljs-keyword\">const</span> dispatch = createEventDispatcher();\n\n    <span class=\"hljs-keyword\">const</span> onClick = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> dispatch(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${e.detail}</span> Level1处理了`</span>);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Level2</span>&gt;</span>\n    Level1未做转发\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Level2</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Level2</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">{onClick}</span>&gt;</span>\n    Level1处理\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Level2</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Level2</span> <span class=\"hljs-attr\">on:click</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Level2</span>&gt;</span>\n</code></pre>\n<p><code>App.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> Level1 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Level1.svelte&#x27;</span>;\n\n    <span class=\"hljs-keyword\">const</span> onClick = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(e.detail);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Level1</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">{onClick}</span>&gt;</span>点击<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Level1</span>&gt;</span>\n</code></pre>\n"}