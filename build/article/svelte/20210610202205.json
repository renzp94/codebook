{"title":"SvelteKit：一个基于Svelte开发服务端渲染网站的框架","slug":"svelte kit","time":"2021-05-24T16:59:55.000Z","author":"renzp94","status":"done","html":"<blockquote>\n<p><code>SvelteKit</code>是一个用于构建各种规模的<code>Web</code>应用程序的框架且具有出色的开发体验和基于文件系统的灵活路由。\n<br />\n与单页应用程序不同，<code>SvelteKit</code>不会在<code>SEO</code>，渐进增强或初始加载体验上做出让步-但与传统的服务器呈现的应用程序不同，导航是即时的，类似于应用程序的感觉。<code>(摘自SvelteKit官网)</code></p>\n</blockquote>\n<h2 id=\"入门\">入门</h2>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">npm</span> init svelte@next my-app\ncd my-app\n<span class=\"hljs-built_in\">npm</span> install\n<span class=\"hljs-built_in\">npm</span> run dev\n</code></pre>\n<p><code>SvelteKit</code>是基于<code>Svelte</code>构建的一个服务端渲染框架，对标的是<code>React</code>的<code>Next</code>框架，最初是基于<code>Snowpack</code>打包的，后来<code>Vite</code>出来之后，团队将其迁移到了<code>Vite</code>。此框架有三大特点：</p>\n<ul>\n<li>基于<code>Svelte</code></li>\n<li>友好的服务端渲染，<code>SEO</code>，渐进式增强，以及<code>SPA</code>的流畅导航。</li>\n<li>使用基于文件系统的路由，代码拆分，离线支持。</li>\n</ul>\n<p>总之如果你想尝试<code>Svelte</code>技术栈的话，此框架是开发的不二选择。你现在的所看到的网站就是用<code>SvelteKit</code>开发的静态网站。</p>\n<h2 id=\"router路由\">router(路由)</h2>\n<p><code>SvelteKit</code>是基于文件系统的生成的路由，默认在<code>src/routes</code>的<code>.svelte</code>文件都是一个页面，路由就是文件名且区分大小写。如：<code>routes/about.svelte</code>→<code>/about</code>、<code>routes/userHome.svelte</code>→<code>/userHome</code>。所以建议使用<code>短横线</code>命名法命名文件，即：<code>user-home</code>。</p>\n<h2 id=\"嵌套路由\">嵌套路由</h2>\n<p>实现嵌套路由就只需嵌套目录即可，目录下的<code>index.svelte</code>会自动将当前目录名转换为路由。如：<code>routes/news/index.svelte</code>→<code>/news</code>、<code>routes/news/list.svelte</code>→<code>/news/list</code>。</p>\n<h3 id=\"动态路由\">动态路由</h3>\n<p>如果需要使用动态路由可以使用<code>[路由名].svelte</code>来命名文件，如：<code>routes/news/[id].svelte</code>→<code>/news/:id</code>。其动态的路由可作为<code>params</code>参数传入页面中，获取方法会在下面说明。\n<br />\n如果需要多个动态参数传入的话，可使用<code>-</code>分割。如：<code>routes/news/[category]-[id].svelte</code>→<code>/news/:idcategory/:id</code>。\n<br />\n如果路由的动态数量未知，可以使用剩余参数，即：<code>routes/[tree]/[dir]/[...file]</code>→<code>/:tree/:dir/...file</code>。如：<code>routes/master/docs/router/01.md</code>解析为<code>master</code>→<code>tree</code>、<code>dir</code>→<code>docs</code>、<code>file</code>→<code>router/01.md</code></p>\n<h2 id=\"layout布局\">layout(布局)</h2>\n<p>如果需要使用布局模板的话，可以在其目录下创建<code>__layout.svelte</code>，则此目录下的所有页面都会应用此布局。布局页中必须含有<code>&lt;slot&gt;&lt;/slot&gt;</code>，其代表页面内容在布局页的位置。如果在<code>routes</code>下创建一个<code>__layout.svelte</code>则所有页面都会应用此布局，如果想重置布局，则在其目录下创建一个<code>__layout.reset.svelte</code>文件即可，然后此目录下的所有页面都会应用此布局，而不会布局中含有布局。如果需要嵌套布局则在目录下继续创建一个<code>__layout.svelte</code>即可。</p>\n<h2 id=\"error错误页面\">error(错误页面)</h2>\n<p>如果想自定义页面错误页的话，可以在目录下创建一个<code>__error.svelte</code>，默认就近查找，如果没有就一直往上一级目录查找，知道<code>routes</code>目录下，如果都没有，则使用默认的错误页，建议在<code>routes</code>下创建一个<code>__error.svelte</code>。\n<br />\n错误页面有一个<code>load</code>函数，其接受一个对象：<code>{error,status}</code></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">context</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">load</span>(<span class=\"hljs-params\">{ error, status }</span>) </span>{\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">props</span>: {\n                <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${status}</span>: <span class=\"hljs-subst\">${error.message}</span>`</span>\n            }\n        };\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> title;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n</code></pre>\n<h2 id=\"load-函数\">load 函数</h2>\n<p>每个页面、布局、错误页都有一个组件创建前运行的函数：<code>load</code>，此函数在服务端渲染和客户端中运行，并允许获取页面数据。此函数要在<code>script context=&quot;module</code>标签中。\nload 函数的接收和输出的参数类型为：</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-comment\">// 输入</span>\n<span class=\"hljs-keyword\">type</span> LoadInput = {\n    <span class=\"hljs-attr\">page</span>: {\n        <span class=\"hljs-attr\">host</span>: <span class=\"hljs-built_in\">string</span>;\n        path: <span class=\"hljs-built_in\">string</span>;\n        params: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;;\n        query: URLSearchParams;\n    };\n    fetch: <span class=\"hljs-function\">(<span class=\"hljs-params\">info: RequestInfo, init?: RequestInit</span>) =&gt;</span> <span class=\"hljs-built_in\">Promise</span>&lt;Response&gt;;\n    session: <span class=\"hljs-built_in\">any</span>;\n    context: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>&gt;;\n};\n<span class=\"hljs-comment\">// 输出</span>\n<span class=\"hljs-keyword\">type</span> LoadOutput = {\n    status?: <span class=\"hljs-built_in\">number</span>;\n    error?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">Error</span>;\n    redirect?: <span class=\"hljs-built_in\">string</span>;\n    props?: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>&gt;;\n    context?: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>&gt;;\n    maxage?: <span class=\"hljs-built_in\">number</span>;\n};\n</code></pre>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">context</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">load</span>(<span class=\"hljs-params\">{\n        page: {\n            params: { id }\n        }\n    }</span>) </span>{\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">props</span>: {\n                <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;详情&#x27;</span>,\n                id\n            }\n        };\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> title;\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> id;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>当前详情ID：{id}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<blockquote>\n<ul>\n<li>在<code>load</code>函数里面应该使用<code>fetch</code>方法获取数据，以避免重复的网络请求</li>\n<li>不应该使用<code>window</code>、<code>document</code>灯任何浏览器对象</li>\n</ul>\n</blockquote>\n<h2 id=\"服务端渲染数据请求\">服务端渲染数据请求</h2>\n<p><code>SvelteKit</code>允许你为每一个页面提供了一个同名的以<code>.json.js</code>为后缀的文件，此文件中可以导出一个异步的函数，一般在此文件中获取数据并返回，通过<code>load</code>函数加载数据。<code>.json.js</code>文件支持三个异步函数：<code>get</code>、<code>post</code>、<code>del</code>。异步函数的接收和输出参数类型：</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">type</span> Headers = Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;;\n\n<span class=\"hljs-keyword\">type</span> Request&lt;Locals = Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>&gt;, Body = unknown&gt; = {\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-built_in\">string</span>;\n    host: <span class=\"hljs-built_in\">string</span>;\n    headers: Headers;\n    path: <span class=\"hljs-built_in\">string</span>;\n    params: Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;;\n    query: URLSearchParams;\n    rawBody: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">Uint8Array</span>;\n    body: ParameterizedBody&lt;Body&gt;;\n    locals: Locals; <span class=\"hljs-comment\">// populated by hooks handle</span>\n};\n\n<span class=\"hljs-keyword\">type</span> EndpointOutput = {\n    status?: <span class=\"hljs-built_in\">number</span>;\n    headers?: Headers;\n    body?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">Uint8Array</span> | JSONValue;\n};\n\n<span class=\"hljs-keyword\">type</span> RequestHandler&lt;Locals = Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>&gt;&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n    request: Request&lt;Locals&gt;\n</span>) =&gt;</span> <span class=\"hljs-built_in\">void</span> | EndpointOutput | <span class=\"hljs-built_in\">Promise</span>&lt;EndpointOutput&gt;;\n</code></pre>\n<p><code>news/[id].svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">context</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> load = <span class=\"hljs-keyword\">async</span> ({\n        <span class=\"hljs-attr\">page</span>: {\n            <span class=\"hljs-attr\">params</span>: { id }\n        },\n        fetch\n    }) =&gt; {\n        <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${id}</span>.json`</span>);\n\n        <span class=\"hljs-keyword\">if</span> (res.ok) {\n            <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> res.json();\n            <span class=\"hljs-keyword\">return</span> {\n                <span class=\"hljs-attr\">props</span>: {\n                    <span class=\"hljs-attr\">details</span>: data\n                }\n            };\n        }\n\n        <span class=\"hljs-keyword\">const</span> { message } = <span class=\"hljs-keyword\">await</span> res.json();\n\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">error</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(message)\n        };\n    };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> details;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{details.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{details.description}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p><code>news/[id].json.js</code></p>\n<pre><code class=\"language-javascript\">import { fetchDetails } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;api&#x27;</span>;\n\nexport <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">get</span>: RequestHandler&lt;<span class=\"hljs-built_in\">string</span>&gt; = <span class=\"hljs-keyword\">async</span> ({ <span class=\"hljs-keyword\">params</span>: { id } }) =&gt; {\n    <span class=\"hljs-keyword\">const</span> data = fetchDetails(id);\n\n    <span class=\"hljs-keyword\">return</span> {\n        body: data\n    };\n};\n</code></pre>\n<p>以上就是基本的<code>SvelteKit</code>介绍，更多的详细介绍请前往<a href=\"https://kit.svelte.dev/\">官网</a>查看。</p>\n"}