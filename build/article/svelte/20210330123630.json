{"title":"Svelte中的一些其他用法","slug":"svelte","time":"2021-03-30T12:37:27.000Z","author":"renzp94","status":"done","html":"<h2 id=\"action\">Action</h2>\n<p><code>Action</code>可以针对元素级别的生命周期做一些自定义行为，主要提供三个生命周期：<code>mounted</code>、<code>update</code>、<code>destroy</code>。\n<code>Action</code>是一个函数，有两个参数，第一个参数为元素，第二个参数为传入参数。函数主体为<code>mounted</code>生命周期，其内部返回一个对象，对象可以包含两个属性分别为：<code>update</code>，<code>destroy</code>。<code>mounted</code>会在元素渲染后执行，<code>update</code>会在<code>Action</code>参数发生变化后调用，<code>destroy</code>会在元素销毁后调用。</p>\n<p><a href=\"https://svelte.dev/repl/effdfc028c5d4218aa7272760071c311?version=3.36.0\">在线 REPL</a></p>\n<p><code>countAction.js</code></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (node, params) =&gt; {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;mounted：&#x27;</span>, node, params);\n\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-function\"><span class=\"hljs-title\">update</span>(<span class=\"hljs-params\">val</span>)</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;update：&#x27;</span>, val);\n        },\n        <span class=\"hljs-function\"><span class=\"hljs-title\">destroy</span>(<span class=\"hljs-params\"></span>)</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;destroy&#x27;</span>);\n        }\n    };\n};\n</code></pre>\n<p><code>App.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> countAction <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./countAction&#x27;</span>;\n    <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> count++;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">use:countAction</span>=</span></span><span class=\"hljs-template-variable\">{count}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-template-variable\">{count}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=</span></span><span class=\"hljs-template-variable\">{onAdd}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span> +1 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n</code></pre>\n<h2 id=\"class\">Class</h2>\n<p><code>Svelte</code>中对于绑定<code>class</code>提供了一些指令来简化。</p>\n<ul>\n<li><code>class={条件?类名1:类名2}</code>：条件满足用<code>类名1</code>，否则用<code>类名2</code></li>\n<li><code>class:类名={条件}</code>：条件满足则使用<code>类名</code></li>\n<li><code>class:类名</code>：变量名和类名一致，当类名为真时则采用类名。</li>\n</ul>\n<p><a href=\"https://svelte.dev/repl/625710def0304289a8d008f93bd16ebc?version=3.36.0\">在线 REPL</a></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> bold = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">let</span> error = <span class=\"hljs-literal\">true</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">{error</span> ? &#x27;<span class=\"hljs-attr\">red</span>&#x27; <span class=\"hljs-attr\">:</span> &#x27;<span class=\"hljs-attr\">green</span>&#x27;}&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class:bold</span>&gt;</span>Hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class:bold</span>&gt;</span>Hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-class\">.bold</span> {\n        <span class=\"hljs-attribute\">font-weight</span>: bold;\n    }\n    <span class=\"hljs-selector-class\">.red</span> {\n        <span class=\"hljs-attribute\">color</span>: red;\n    }\n    <span class=\"hljs-selector-class\">.green</span> {\n        <span class=\"hljs-attribute\">color</span>: green;\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></pre>\n<h2 id=\"context\">Context</h2>\n<p>当需要兄弟组件间共享数据时，可以通过<code>Context</code>来操作。<code>Context API</code>提供了三个方法：</p>\n<ul>\n<li><code>setContext</code>：设置<code>context</code>。接受两个参数：<code>key</code>，<code>value</code>。</li>\n<li><code>getContext</code>：获取<code>context</code>。接受一个参数：<code>key</code>。</li>\n<li><code>hasContext</code>：判断是否有某个<code>context</code>。接受一个参数：<code>key</code>。</li>\n</ul>\n<p><a href=\"https://svelte.dev/repl/beeab7d9050148c8a81b319b1853d9c7?version=3\">在线 REPL</a></p>\n<p><code>Button.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> { getContext, hasContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;svelte&#x27;</span>;\n\n    <span class=\"hljs-keyword\">let</span> border = <span class=\"hljs-literal\">false</span>;\n\n    <span class=\"hljs-built_in\">console</span>.log(hasContext(<span class=\"hljs-string\">&#x27;BUTTON_BORDER&#x27;</span>), getContext(<span class=\"hljs-string\">&#x27;BUTTON_BORDER&#x27;</span>));\n\n    <span class=\"hljs-keyword\">if</span> (hasContext(<span class=\"hljs-string\">&#x27;BUTTON_BORDER&#x27;</span>)) {\n        border = getContext(<span class=\"hljs-string\">&#x27;BUTTON_BORDER&#x27;</span>);\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class:border</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-tag\">button</span> {\n        <span class=\"hljs-attribute\">border</span>: none;\n    }\n    <span class=\"hljs-selector-class\">.border</span> {\n        <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#000</span>;\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></pre>\n<p><code>App.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> Button <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Button.svelte&#x27;</span>;\n    <span class=\"hljs-keyword\">import</span> </span></span><span class=\"hljs-template-variable\">{ setContext }</span><span class=\"xml\"><span class=\"javascript\"> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;svelte&#x27;</span>;\n\n    setContext(<span class=\"hljs-string\">&#x27;BUTTON_BORDER&#x27;</span>, <span class=\"hljs-literal\">true</span>);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n</code></pre>\n<h2 id=\"component-slot\">Component Slot</h2>\n<p><code>Svelte</code>还为组件提供了插槽，实现更灵活的自定义组件。使用插槽用<code>&lt;slot&gt;&lt;/slot&gt;</code>，如果不指定<code>name</code>则为默认插槽，指定了<code>name</code>则为<code>命名插槽</code>。如果需要给某个插槽指定默认内容，则在<code>&lt;slot&gt;</code>和<code>&lt;/slot&gt;</code>之前添加默认内容即可，当插槽没有指定内容时会采用默认内容。在组件外使用插槽时，对于默认插槽只需要放在组件区域内，如：<code>&lt;Button&gt;默认插槽&lt;/Button&gt;</code>，对于命名插槽则需要使用<code>slot=&quot;插槽名&quot;</code>属性在组件区域内指定，如：<code>&lt;Button&gt;&lt;span slot=&quot;suffix&quot;&gt;命名插槽&lt;/span&gt;&lt;/Button&gt;</code>。如果需要根据插槽是否存在来进行相应操作，还可以用<code>$$slots</code>检查是否有某个插槽是否存在。如果需要插槽内可以访问子组件中才有的数据，可以使用<code>slot props</code>，通过在组件内<code>slot</code>上设置属性，并在父组件中使用组件时用<code>let</code>指令使用。</p>\n<p><a href=\"https://svelte.dev/repl/a46b1d1ea01547b386761f472f131521?version=3\">在线 REPL</a></p>\n<p><code>Button.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;default: &#x27;</span>, $$slots.defaults);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;prefix: &#x27;</span>, $$slots.prefix);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;suffix: &#x27;</span>, $$slots.suffix);\n\n    <span class=\"hljs-keyword\">let</span> hoving = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">const</span> onMouseenter = <span class=\"hljs-function\">() =&gt;</span> (hoving = <span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-keyword\">const</span> onMouseleave = <span class=\"hljs-function\">() =&gt;</span> (hoving = <span class=\"hljs-literal\">false</span>);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:mouseenter</span>=</span></span><span class=\"hljs-template-variable\">{onMouseenter}</span><span class=\"xml\"><span class=\"hljs-tag\"> <span class=\"hljs-attr\">on:mouseleave</span>=</span></span><span class=\"hljs-template-variable\">{onMouseleave}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;prefix&quot;</span>&gt;</span>默认的prefix<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> </span></span><span class=\"hljs-template-variable\">{hoving}</span><span class=\"xml\"><span class=\"hljs-tag\"> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;suffix&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n</code></pre>\n<p><code>App.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> Button <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Button.svelte&#x27;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">let:hoving</span>&gt;</span>\n    </span><span class=\"hljs-template-tag\">{#<span class=\"hljs-name\">if</span> hoving}</span><span class=\"xml\">\n        鼠标悬停\n    </span><span class=\"hljs-template-variable\">{:else}</span><span class=\"xml\">\n        默认内容\n    </span><span class=\"hljs-template-tag\">{/<span class=\"hljs-name\">if</span>}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;suffix&quot;</span>&gt;</span>后置内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n</code></pre>\n<h2 id=\"内置元素\">内置元素</h2>\n<p><code>Svelte</code>提供了一些内置元素：</p>\n<ul>\n<li><code>&lt;svelte:self&gt;</code>：允许组件递归的调用自己。</li>\n<li><code>&lt;svelte:component&gt;</code>：设置动态组件。</li>\n<li><code>&lt;svelte:window&gt;</code>：<code>window</code>对象。</li>\n<li><code>&lt;svelte:body&gt;</code>：<code>body</code>元素。</li>\n<li><code>&lt;svelte:head&gt;</code>：<code>head</code>元素。</li>\n<li><code>&lt;svelte:options&gt;</code>：指定编译选项。<ul>\n<li><code>immutable</code>：是否禁止使用可变数据</li>\n<li><code>accessors</code>：是否为组件的 props 添加<code>getter</code>和<code>setter</code></li>\n<li><code>namespace</code>：命名空间</li>\n<li><code>tag</code>：将组件编译成自定义元素的名称</li>\n</ul>\n</li>\n<li><code>&lt;svelte:fragment&gt;</code>：在使用组件插槽配合使用可以不渲染元素。</li>\n</ul>\n<p><a href=\"https://svelte.dev/repl/d84cee4cf00048599ce7e4bda0d3f0d4?version=3.37.0\">在线 REPL</a></p>\n<p><code>Menu.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> menus;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;test&quot;</span> /&gt;</span>\n    </span><span class=\"hljs-template-tag\">{#<span class=\"hljs-name\">each</span> menus as menu (menu.key)}</span><span class=\"xml\">\n        </span><span class=\"hljs-template-tag\">{#<span class=\"hljs-name\">if</span> menu.children &amp;&amp; menu.children.length &gt; 0}</span><span class=\"xml\">\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{menu.name}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-left: 8px&quot;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svelte:self</span> <span class=\"hljs-attr\">menus</span>=</span></span><span class=\"hljs-template-variable\">{menu.children}</span><span class=\"xml\"><span class=\"hljs-tag\"> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        </span><span class=\"hljs-template-variable\">{:else}</span><span class=\"xml\">\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{menu.name}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        </span><span class=\"hljs-template-tag\">{/<span class=\"hljs-name\">if</span>}</span><span class=\"xml\">\n    </span><span class=\"hljs-template-tag\">{/<span class=\"hljs-name\">each</span>}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</code></pre>\n<p><code>App.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> Menu <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Menu.svelte&#x27;</span>;\n    <span class=\"hljs-keyword\">let</span> menus = [\n        </span></span><span class=\"xquery\">{\n           <span class=\"hljs-built_in\"> key</span>: <span class=\"hljs-string\">&#x27;home&#x27;</span>,\n           <span class=\"hljs-built_in\"> name</span>: <span class=\"hljs-string\">&#x27;首页&#x27;</span>\n        }</span><span class=\"xml\">,\n        </span><span class=\"xquery\">{\n           <span class=\"hljs-built_in\"> key</span>: <span class=\"hljs-string\">&#x27;user&#x27;</span>,\n           <span class=\"hljs-built_in\"> name</span>: <span class=\"hljs-string\">&#x27;用户管理&#x27;</span>,\n            children: [\n                {\n                   <span class=\"hljs-built_in\"> key</span>: <span class=\"hljs-string\">&#x27;admin&#x27;</span>,\n                   <span class=\"hljs-built_in\"> name</span>: <span class=\"hljs-string\">&#x27;超级管理员&#x27;</span>\n                }</span><span class=\"xml\">,\n                </span><span class=\"xquery\">{\n                   <span class=\"hljs-built_in\"> key</span>: <span class=\"hljs-string\">&#x27;normal&#x27;</span>,\n                   <span class=\"hljs-built_in\"> name</span>: <span class=\"hljs-string\">&#x27;普通用户&#x27;</span>\n                }</span><span class=\"xml\">\n            ]\n        }\n    ];\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n\n&lt;Menu {menus}&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svelte:fragment</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;test&quot;</span>&gt;</span>\n        </span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svelte:fragment</span>&gt;</span></span>\n&lt;/Menu&gt;\n</code></pre>\n<h2 id=\"module-context\">module context</h2>\n<p><code>Svelte</code>提供了<code>&lt;script context=&quot;module&quot;&gt;&lt;/script&gt;</code>块来执行模块首次加载时的代码，不是在组件实例化时运行(组件实例化运行时在<code>&lt;script&gt;&lt;/script&gt;</code>块中)。</p>\n<p><a href=\"https://svelte.dev/repl/e7886e299f4541eb8dede6de835bc77e?version=3\">在线 REPL</a></p>\n<p><code>Button.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">context</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> buttonText = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> text;\n    <span class=\"hljs-keyword\">const</span> onClick = <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;button text before：&#x27;</span>, buttonText);\n        buttonText = text;\n    };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">{onClick}</span>&gt;</span>\n    {text}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre>\n<p><code>App.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> Button <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Button.svelte&#x27;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">&quot;按钮1&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">&quot;按钮2&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">&quot;按钮3&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">&quot;按钮4&quot;</span> /&gt;</span>\n</code></pre>\n"}