{"title":"一分钟了解Svelte","slug":"svelte","time":"2021-03-15T23:01:12.000Z","author":"renzp94","status":"done","html":"<p>如今主流的前端框架(<code>React</code>、<code>Vue</code>)都是在浏览器中完成大部分的工作（<code>runtime</code>），并且借助于<code>virtual DOM(虚拟DOM)</code>和<code>Diff算法</code>来实现局部更新。所以对于<code>React</code>或<code>Vue</code>来说不可避免的需要引入<code>runtime code</code>以及<code>virtual DOM</code>所带来的性能损耗。而 <code>Svelte</code>则是使用了一个全新的方式来构建用户界面。</p>\n<h2 id=\"svelte-三大特点\">Svelte 三大特点</h2>\n<ul>\n<li>Write less code(更少的编码)</li>\n<li>No virtual DOM(无虚拟 DOM)</li>\n<li>Truly reactive(真正的响应式)</li>\n</ul>\n<h3 id=\"write-less-code\">Write less code</h3>\n<p>相对于<code>React</code>、<code>Vue</code>，<code>Svelte</code>在编写代码时可通过少量的代码来完成相同的事情。比如：<code>一个简单的计数器</code></p>\n<p><code>React</code></p>\n<pre><code class=\"language-react\"><span class=\"hljs-keyword\">import</span> React,{ useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; {\n    <span class=\"hljs-keyword\">const</span> [count,setCount] = useState(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> setCount(count+<span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onAdd}</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    )\n}\n</code></pre>\n<p><code>Vue2</code></p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">count</span> }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onAdd&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\n        };\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        <span class=\"hljs-function\"><span class=\"hljs-title\">onAdd</span>(<span class=\"hljs-params\"></span>)</span> {\n            <span class=\"hljs-built_in\">this</span>.count++;\n        }\n    }\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p><code>Vue3</code></p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{<span class=\"hljs-name\">count</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onAdd&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> count.value++\n\n        <span class=\"hljs-keyword\">return</span> {\n            count,\n            onAdd\n        }\n    }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p><code>Vue3 script setup rfc</code></p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{<span class=\"hljs-name\">count</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onAdd&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>)\n<span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> count.value++\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p><code>Svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> count++;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{count}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=</span></span><span class=\"hljs-template-variable\">{onAdd}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n</code></pre>\n<p>上述分别列举了在<code>React</code>,<code>Vue2</code>,<code>Vue3</code>,<code>Vue3 script setup rfc</code>，<code>Svelte</code>中的实现一个简单的计数器，从中可以看出，仅当<code>Vue3</code>使用了<code>script setup</code>的提案后相对于其他实现足够精简了，但对比<code>Svelte</code>来说还不够精简，在<a href=\"https://svelte.dev/blog/write-less-code\">此文</a>中有官方列举的例子。</p>\n<h3 id=\"no-virtual-dom\">No virtual DOM</h3>\n<p><code>Svelte</code>没有<code>虚拟DOM</code>，也不存在<code>runtime code</code>，<code>Svelte</code>的魔法发生在构建时，即<code>Svelte</code>是一个编译器，在编译过程中注入所需的魔法代码。在<a href=\"https://svelte.dev/blog/virtual-dom-is-pure-overhead\">此文</a>中有详细内容来说明此特点。</p>\n<h3 id=\"truky-reactive\">Truky reactive</h3>\n<p><code>Svelte</code>中实现了真正的响应式，省去了响应式使用代理或访问器的开销和复杂性，仅仅一个变量便可实现拥有响应式。在上述<code>一个简单的计数器</code>的例子中可以看出，只是定义了一个变量<code>count</code>,然后<code>count++</code>便可以自动更新视图，可谓是惊喜。<a href=\"https://svelte.dev/blog/svelte-3-rethinking-reactivity\">此文</a>有一个简短的介绍。</p>\n<h2 id=\"快速上手\">快速上手</h2>\n<p>快速创建项目</p>\n<pre><code class=\"language-bash\">npx degit sveltejs/template <span class=\"hljs-keyword\">my</span>-svelte-project\n<span class=\"hljs-comment\"># or download and extract</span>\ncd <span class=\"hljs-keyword\">my</span>-svelte-project\n<span class=\"hljs-comment\"># to use  run:</span>\n<span class=\"hljs-comment\"># node scripts/setupTypeScript.js</span>\n\nnpm install\nnpm <span class=\"hljs-built_in\">run</span> dev\n</code></pre>\n<h3 id=\"基础知识\">基础知识</h3>\n<p><code>Svelte</code>文件是以<code>.svelte</code>为后缀，文件中可以书写<code>HTML</code>、<code>JavaScript</code>、<code>Css</code>，每个<code>Svelte</code>文件都是一个组件。</p>\n<h4 id=\"展示数据\">展示数据</h4>\n<p><code>Svelte</code>通过<code>{}</code>来插入<code>JavaScript</code>变量，在<code>{}</code>中可以放置任何<code>JavaScript</code>代码，如：<code>name.toUpperCase()</code>。<code>{}</code>只能插入纯文本，如果需要插入<code>HTML</code>需要使用<code>{@html }</code>。<code>Svelte</code>还提供了一个调试 API：<code>{@debug val1,var2...}</code>，每当特定的值发生改变时都会记录这些变量的值，如果打开了调试控制台，则会暂停代码执行（打断点）。</p>\n<blockquote>\n<p>注意：在<code>Svelte</code>中<code>style</code>的样式只对当前组件生效，如需全局影响，需要使用<code>:global()</code>。</p>\n</blockquote>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> name;\n    <span class=\"hljs-keyword\">let</span> html = <span class=\"hljs-string\">&#x27;&lt;h1&gt;这是一个H1&lt;/h1&gt;&#x27;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello {name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{@html html}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-tag\">h1</span> {\n        <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#ff3e00</span>;\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></pre>\n<h4 id=\"动态属性\">动态属性</h4>\n<p>如果一个<code>HTML</code>元素需要动态绑定属性的话，可通过<code>{}</code>来绑定，如果绑定的值和属性名一样，可以简写为<code>{变量名}</code>，如：<code>&lt;img src={src} /&gt; 简写： &lt;img {src} /&gt;</code>。</p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> src = <span class=\"hljs-string\">&#x27;https://codebook.vercel.app/assets/images/logo.png&#x27;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> </span></span><span class=\"hljs-template-variable\">{src}</span><span class=\"xml\"><span class=\"hljs-tag\"> /&gt;</span></span>\n</code></pre>\n<p>通过简单的了解，可以发现<code>Svelte</code>还是和<code>React</code>和<code>Vue</code>有很多相似的地方，但是要记住一个关键性的区别：</p>\n<blockquote>\n<p><code>Svelte</code>在<code>构建/编译阶段</code>将应用程序转换为理想的<code>JavaScript</code>应用，而不是在<code>运行阶段</code>解释应用程序的代码。这意味着不需要为框架所消耗的性能付出成本，并且在应用程序首次加载时没有额外损失。同时，<code>Svelte</code>还可以将组件作为独立的包发布并应用到任何地方且不会带来额外的开销。</p>\n</blockquote>\n"}