{"title":"Svelte中的Reactivity(响应式)和组件中的Props(属性)","slug":"svelte","time":"2021-03-22T09:43:55.000Z","author":"renzp94","status":"done","html":"<h2 id=\"reactivity响应式\">Reactivity(响应式)</h2>\n<p>在<code>Svelte</code>中响应式很简单，只需要定义一个变量，它就是响应式的，如果导出的是<code>const</code>、<code>class</code>、<code>function</code>，则在组件之外是只读的。如：<code>记录点击按钮的次数</code>。</p>\n<p><a href=\"https://svelte.dev/repl/5401d712866c475992191bb82e205bc0?version=3.35.0\">在线 REPL</a></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">const</span> onClick = <span class=\"hljs-function\">() =&gt;</span> count++;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=</span></span><span class=\"hljs-template-variable\">{onClick}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>点击了</span><span class=\"hljs-template-variable\">{count}</span><span class=\"xml\">次<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n</code></pre>\n<blockquote>\n<p>注意：如果变量是<code>数组</code>，通过下标改变后，需要将新数组重新赋值给变量，否则视图不会更新。如果是对象且将其赋值给一个不是响应式的变量，则在更改了新变量的值之后需要将新变量重新赋值给对象，否则视图不会更新。</p>\n</blockquote>\n<p><a href=\"https://svelte.dev/repl/d3de9248b9c642d3a01d37b369613ec2?version=3\">在线 REPL</a></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> user = {\n        <span class=\"hljs-attr\">github</span>: <span class=\"hljs-string\">&#x27;https://github.com/sveltejs&#x27;</span>,\n        <span class=\"hljs-attr\">auth</span>: {\n            <span class=\"hljs-attr\">qq</span>: <span class=\"hljs-string\">&#x27;123456&#x27;</span>\n        }\n    };\n\n    <span class=\"hljs-keyword\">let</span> tags = [<span class=\"hljs-string\">&#x27;code&#x27;</span>, <span class=\"hljs-string\">&#x27;blog&#x27;</span>, <span class=\"hljs-string\">&#x27;book&#x27;</span>];\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onChangeGithub</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-comment\">//             // 此处是值赋值，不是引用赋值，所以改变tmp需要再次赋值给user</span>\n        <span class=\"hljs-comment\">//             let tmp = user</span>\n        <span class=\"hljs-comment\">//             tmp.github = &#x27;https://github.com/renzp94&#x27;</span>\n        <span class=\"hljs-comment\">//             user = tmp</span>\n        user.github = <span class=\"hljs-string\">&#x27;https://github.com/renzp94&#x27;</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onChangeQQ</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-comment\">// 这个和改变github一样，需要将auth重新赋值给user.auth</span>\n        <span class=\"hljs-keyword\">let</span> auth = user.auth;\n        auth.qq = <span class=\"hljs-string\">&#x27;456789&#x27;</span>;\n        user.auth = auth;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onChangeTag</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-comment\">//             tags.push(&#x27;svelte&#x27;)</span>\n        <span class=\"hljs-comment\">//             // 只push，是不会视图是不会更新的，需要重新赋值</span>\n        <span class=\"hljs-comment\">//             tags = tags</span>\n        <span class=\"hljs-comment\">//             这种更简洁</span>\n        tags = [...tags, <span class=\"hljs-string\">&#x27;svelte&#x27;</span>];\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;user&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{user.github}</span>&gt;</span>{user.github}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        QQ:{user.auth.qq}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n        {#each tags as tag (tag)}\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>{tag}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n        {/each}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">{onChangeGithub}</span>&gt;</span>改变Github地址<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">{onChangeQQ}</span>&gt;</span>改变QQ<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">{onChangeTag}</span>&gt;</span>改变Tag<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p><code>{#each} ... {/each}</code>这是循环渲染的语法，下篇文章会介绍，这里先不用管。</p>\n</blockquote>\n<p>在<code>Svelte</code>中如果需要根据某个值来动态计算得到某个结果，并且值每次改变后，都会重新计算，那就需要用到<code>$:</code>(reactive declarations(响应式声明))，如果语句是给未声明的变量赋值组成，则会自动用<code>let</code>声明那个未声明的变量，如：<code>通过姓和名得到全名</code>。</p>\n<p><a href=\"https://svelte.dev/repl/bf2cee963da74aac99dc01bcca5ece3b?version=3.35.0\">在线 REPL</a></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> firstname = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n    <span class=\"hljs-keyword\">let</span> lastname = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n    <span class=\"hljs-comment\">// 未声明fullname，则自动声明</span>\n    $: fullname = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${firstname}</span><span class=\"hljs-subst\">${lastname}</span>`</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\n    姓氏：\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请输入姓氏&quot;</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{firstname}</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\n    名称：\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请输入名称&quot;</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{lastname}</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>您的全名是：{fullname}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>上述例子只是一个简单的使用，如果需要一些判断或处理得到结果的话，可以使用<code>$:{}</code>。将上述例子完善一下，做一些校验。</p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> firstname = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n    <span class=\"hljs-keyword\">let</span> lastname = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n    <span class=\"hljs-keyword\">let</span> fullname = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n    <span class=\"hljs-keyword\">let</span> error = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n\n    $: {\n        <span class=\"hljs-keyword\">if</span> (!firstname) {\n            error = <span class=\"hljs-string\">&#x27;请输入姓氏&#x27;</span>;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!lastname) {\n            error = <span class=\"hljs-string\">&#x27;请输入名称&#x27;</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            error = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n            fullname = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${firstname}</span><span class=\"hljs-subst\">${lastname}</span>`</span>;\n        }\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;error&quot;</span>&gt;</span>\n    {error}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\n    姓氏：\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请输入姓氏&quot;</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{firstname}</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\n    名称：\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请输入名称&quot;</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{lastname}</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n{#if fullname}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>您的全名是：{fullname}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n{/if}\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-class\">.error</span> {\n        <span class=\"hljs-attribute\">color</span>: red;\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></pre>\n<h2 id=\"props组件属性\">Props(组件属性)</h2>\n<p>一般封装组件，都需要对外提供一些属性来支持自定义组件，在<code>Svelte</code>中组件可通过<code>export</code>来对外暴露属性。</p>\n<ul>\n<li>若需要指定<code>prop</code>的默认值，直接在定义时设置默认值即可。</li>\n<li>如果有一个属性对象，可以通过<code>对象解构</code>的方式直接赋值给组件。</li>\n<li>在组件内可以通过<code>$$props</code>来访问所有属性(包括未通过<code>export</code>导出的)，可通过<code>$$restProps</code>仅访问未使用<code>export</code>导出的属性。</li>\n</ul>\n<p><a href=\"https://svelte.dev/repl/6ea67f77b8444cf4b11bcabf674d7863?version=3.35.0\">在线 REPL</a></p>\n<p><code>Hello.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> msg = <span class=\"hljs-string\">&#x27;world&#x27;</span>;\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> desc;\n\n    <span class=\"hljs-built_in\">console</span>.log($$props);\n    <span class=\"hljs-built_in\">console</span>.log($$restProps);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Hello </span><span class=\"hljs-template-variable\">{msg}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</span><span class=\"hljs-template-tag\">{#<span class=\"hljs-name\">if</span> desc}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{desc}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</span><span class=\"hljs-template-tag\">{/<span class=\"hljs-name\">if</span>}</span>\n</code></pre>\n<p><code>App.svelte</code></p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> Hello <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Hello.svelte&#x27;</span>;\n    <span class=\"hljs-keyword\">const</span> obj = {\n        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;CodeBook&#x27;</span>,\n        <span class=\"hljs-attr\">desc</span>: <span class=\"hljs-string\">&#x27;有质感的编程&#x27;</span>\n    };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Hello</span> <span class=\"hljs-attr\">c</span>=<span class=\"hljs-string\">&quot;ccc&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Hello</span> <span class=\"hljs-attr\">msg</span>=<span class=\"hljs-string\">&quot;svelte&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Hello</span> {<span class=\"hljs-attr\">...obj</span>} /&gt;</span>\n</code></pre>\n<blockquote>\n<p><code>{#if} ... {/if}</code>这是条件渲染的语法，下篇文章会介绍，这里先不用管。</p>\n</blockquote>\n<p>最后提一句，如果想让组件外部设置组件的 class 属性，需要<code>export</code>，但是<code>class</code>是关键字，不能<code>export</code>，所以需要转换一下思路，通过一下方式实现。</p>\n<pre><code class=\"language-svelte\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> className;\n    <span class=\"hljs-keyword\">export</span> { className <span class=\"hljs-keyword\">as</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> }</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n"}