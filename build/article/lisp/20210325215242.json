{"title":"第三章：简单的数据库实现(源码)","slug":"Lisp","time":"2021-03-25T21:52:53.000Z","author":"renzp94","status":"done","html":"<p>第二章是一个简单的数据库例子，通过编写一个 cd 信息的操作，来讲述知识点。</p>\n<p>主要设置的知识点：</p>\n<ul>\n<li>全局变量</li>\n<li>格式化输出</li>\n<li>列表的使用</li>\n<li>文件的读写</li>\n<li>宏</li>\n</ul>\n<p>源代码：</p>\n<pre><code class=\"language-commonlisp\"><span class=\"hljs-comment\">;;定义一个全局变量，用于存放数据</span>\n(<span class=\"hljs-name\">defvar</span> *db* <span class=\"hljs-literal\">nil</span>)\n\n<span class=\"hljs-comment\">;;制作一个CD需要的信息</span>\n(<span class=\"hljs-name\">defun</span> make-cd (<span class=\"hljs-name\">title</span> artist rating ripped)\n  (<span class=\"hljs-name\">list</span> <span class=\"hljs-symbol\">:title</span> title <span class=\"hljs-symbol\">:artist</span> artist <span class=\"hljs-symbol\">:rating</span> rating <span class=\"hljs-symbol\">:ripped</span> ripped))\n\n<span class=\"hljs-comment\">;;将一条CD信息记录到全局变量中</span>\n(<span class=\"hljs-name\">defun</span> add-record (<span class=\"hljs-name\">cd</span>) (<span class=\"hljs-name\">push</span> cd *db*))\n\n<span class=\"hljs-comment\">;;格式化输出数据</span>\n(<span class=\"hljs-name\">defun</span> dump-db ()\n  (<span class=\"hljs-name\">format</span> <span class=\"hljs-literal\">t</span> <span class=\"hljs-string\">&quot;~{~{~A: ~10t~A~%~}~%~}&quot;</span> *db*))\n\n<span class=\"hljs-comment\">;;交互信息</span>\n(<span class=\"hljs-name\">defun</span> prompt-read (<span class=\"hljs-name\">prompt</span>)\n  (<span class=\"hljs-name\">format</span> *query-io* <span class=\"hljs-string\">&quot;~A: &quot;</span> prompt)\n  (<span class=\"hljs-name\">force-output</span> *query-io*)\n  (<span class=\"hljs-name\">read-line</span> *query-io*))\n\n<span class=\"hljs-comment\">;;交互获取CD信息</span>\n(<span class=\"hljs-name\">defun</span> prompt-for-cd ()\n  (<span class=\"hljs-name\">make-cd</span>\n   (<span class=\"hljs-name\">prompt-read</span> <span class=\"hljs-string\">&quot;Title&quot;</span>)\n   (<span class=\"hljs-name\">prompt-read</span> <span class=\"hljs-string\">&quot;Artist&quot;</span>)\n   (<span class=\"hljs-name\">or</span> (<span class=\"hljs-name\">parse-integer</span> (<span class=\"hljs-name\">prompt-read</span> <span class=\"hljs-string\">&quot;Rating&quot;</span>) <span class=\"hljs-symbol\">:junk-allowed</span> <span class=\"hljs-literal\">t</span>) <span class=\"hljs-number\">0</span>)\n   (<span class=\"hljs-name\">y-or-n-p</span> <span class=\"hljs-string\">&quot;Ripped [y/n]: &quot;</span>)))\n\n<span class=\"hljs-comment\">;;添加任意个CD信息</span>\n(<span class=\"hljs-name\">defun</span> add-cds ()\n  (<span class=\"hljs-name\">loop</span> (<span class=\"hljs-name\">add-record</span> (<span class=\"hljs-name\">prompt-for-cd</span>))\n     (<span class=\"hljs-name\">if</span> (<span class=\"hljs-name\">not</span> (<span class=\"hljs-name\">y-or-n-p</span> <span class=\"hljs-string\">&quot;Another? [y/n]: &quot;</span>)) (<span class=\"hljs-name\">return</span>))))\n\n<span class=\"hljs-comment\">;;将所有CD信息保存到文件中</span>\n(<span class=\"hljs-name\">defun</span> save-db (<span class=\"hljs-name\">filename</span>)\n  (<span class=\"hljs-name\">with-open-file</span> (<span class=\"hljs-name\">out</span> filename\n               <span class=\"hljs-symbol\">:direction</span> <span class=\"hljs-symbol\">:output</span>\n               <span class=\"hljs-symbol\">:if-exists</span> <span class=\"hljs-symbol\">:supersede</span>)\n    (<span class=\"hljs-name\">with-standard-io-syntax</span>\n      (<span class=\"hljs-name\">print</span> *db* out))))\n\n<span class=\"hljs-comment\">;;加载文件中的CD信息</span>\n(<span class=\"hljs-name\">defun</span> load-db (<span class=\"hljs-name\">filename</span>)\n  (<span class=\"hljs-name\">with-open-file</span> (<span class=\"hljs-name\">in</span> filename)\n    (<span class=\"hljs-name\">with-standard-io-syntax</span>\n      (<span class=\"hljs-name\">setf</span> *db* (<span class=\"hljs-name\">read</span> in)))))\n<span class=\"hljs-comment\">;;通用查询</span>\n(<span class=\"hljs-name\">defun</span> select (<span class=\"hljs-name\">selector-fn</span>)\n  (<span class=\"hljs-name\">remove-if-not</span> selector-fn *db*))\n\n<span class=\"hljs-comment\">;;根据artist查询</span>\n(<span class=\"hljs-name\">defun</span> artist-selector (<span class=\"hljs-name\">artist</span>)\n  #&#x27;(lambda (cd) (equal (getf cd :artist) artist)))\n<span class=\"hljs-comment\">;;比较根据键比较值</span>\n(<span class=\"hljs-name\">defun</span> make-comparison-expr (<span class=\"hljs-name\">field</span> value)\n  `(equal (getf cd ,field) ,value))\n<span class=\"hljs-comment\">;;循环比较</span>\n(<span class=\"hljs-name\">defun</span> make-comparisons-list (<span class=\"hljs-name\">fields</span>)\n  (<span class=\"hljs-name\">loop</span> while fields\n     collecting (<span class=\"hljs-name\">make-comparison-expr</span> (<span class=\"hljs-name\">pop</span> fields) (<span class=\"hljs-name\">pop</span> fields))))\n<span class=\"hljs-comment\">;;定义一个where宏</span>\n(<span class=\"hljs-name\">defmacro</span> where (<span class=\"hljs-name\">&amp;rest</span> clauses)\n  `#&#x27;(lambda (cd) (and ,@(make-comparisons-list clauses))))\n<span class=\"hljs-comment\">;;删除函数</span>\n(<span class=\"hljs-name\">defun</span> delete-rows (<span class=\"hljs-name\">selector-fn</span>)\n  (<span class=\"hljs-name\">setf</span> *db* (<span class=\"hljs-name\">remove-if</span> selector-fn *db*)))\n</code></pre>\n<p>在 eamcs 中使用 C-x C-f 新建一个文件，输入文件名之后回车。</p>\n<p>将上述源代码粘贴复制到此文件中，使用 C-x C-s 保存文件。</p>\n<p>保存完成之后，在 emacs 中使用 M-x 输入 slime 回车，启动 REPL(lisp 环境)。</p>\n<p>在 REPL 中输入：(load &quot;CD.lisp&quot;)回车，加载保存的文件。</p>\n<p>到这一步，则可使用上述源码中的所有函数，接下来进行测试。</p>\n<p>测试代码如下：</p>\n<pre><code class=\"language-commonlisp\">CL-USER&gt; *db*\nNIL\nCL-USER&gt; (add-cds)\n<span class=\"hljs-symbol\">Title:</span> BangBom\n<span class=\"hljs-symbol\">Artist:</span> Are\n<span class=\"hljs-symbol\">Rating:</span> <span class=\"hljs-number\">5</span>\n\n\nRipped [y/n]:  (y <span class=\"hljs-keyword\">or</span> n) y\n\n\nAnother? [y/n]:  (y <span class=\"hljs-keyword\">or</span> n) y\n<span class=\"hljs-symbol\">Title:</span> So happy\n<span class=\"hljs-symbol\">Artist:</span> Bre\n<span class=\"hljs-symbol\">Rating:</span> <span class=\"hljs-number\">8</span>\n\n\nRipped [y/n]:  (y <span class=\"hljs-keyword\">or</span> n) n\n\n\nAnother? [y/n]:  (y <span class=\"hljs-keyword\">or</span> n) n\n\n\nNIL\nCL-USER&gt; (dump-db)\n<span class=\"hljs-symbol\">TITLE:</span>    So happy\n<span class=\"hljs-symbol\">ARTIST:</span>   Bre\n<span class=\"hljs-symbol\">RATING:</span>   <span class=\"hljs-number\">8</span>\n<span class=\"hljs-symbol\">RIPPED:</span>   NIL\n\n\n<span class=\"hljs-symbol\">TITLE:</span>    BangBom\n<span class=\"hljs-symbol\">ARTIST:</span>   Are\n<span class=\"hljs-symbol\">RATING:</span>   <span class=\"hljs-number\">5</span>\n<span class=\"hljs-symbol\">RIPPED:</span>   T\n\n\nNIL\nCL-USER&gt; (save-db <span class=\"hljs-string\">&quot;CD.db&quot;</span>)\n((<span class=\"hljs-symbol\">:TITLE</span> <span class=\"hljs-string\">&quot;So happy&quot;</span> <span class=\"hljs-symbol\">:ARTIST</span> <span class=\"hljs-string\">&quot;Bre&quot;</span> <span class=\"hljs-symbol\">:RATING</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-symbol\">:RIPPED</span> NIL)\n (<span class=\"hljs-symbol\">:TITLE</span> <span class=\"hljs-string\">&quot;BangBom&quot;</span> <span class=\"hljs-symbol\">:ARTIST</span> <span class=\"hljs-string\">&quot;Are&quot;</span> <span class=\"hljs-symbol\">:RATING</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-symbol\">:RIPPED</span> T))\nCL-USER&gt; (select (where <span class=\"hljs-symbol\">:title</span> <span class=\"hljs-string\">&quot;BangBom&quot;</span>))\n((<span class=\"hljs-symbol\">:TITLE</span> <span class=\"hljs-string\">&quot;BangBom&quot;</span> <span class=\"hljs-symbol\">:ARTIST</span> <span class=\"hljs-string\">&quot;Are&quot;</span> <span class=\"hljs-symbol\">:RATING</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-symbol\">:RIPPED</span> T))\nCL-USER&gt; (select (where <span class=\"hljs-symbol\">:artist</span> <span class=\"hljs-string\">&quot;Bre&quot;</span>))\n((<span class=\"hljs-symbol\">:TITLE</span> <span class=\"hljs-string\">&quot;So happy&quot;</span> <span class=\"hljs-symbol\">:ARTIST</span> <span class=\"hljs-string\">&quot;Bre&quot;</span> <span class=\"hljs-symbol\">:RATING</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-symbol\">:RIPPED</span> NIL))\nCL-USER&gt; \n</code></pre>\n"}