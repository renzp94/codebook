{"title":"第五章：函数","slug":"Lisp","time":"2021-03-25T21:54:08.000Z","author":"renzp94","status":"done","html":"<p>所有的 lisp 程序的最基本的组成：函数、变量、宏。\n函数用宏<code>defun</code>定义\n格式：<code>(defun 函数名 (形参列表) 函数体)</code>\n如：(defun say (str) (format t &quot;~A&quot; str))\n约定：</p>\n<ul>\n<li>一般类型转换的函数会在名字中使用 →</li>\n<li>将一个字符串转为微件(widget)的函数会叫做 string-&gt;widget</li>\n<li>函数名中的连接符不是下划线，而是横线。</li>\n</ul>\n<p>在函数中紧跟这个形参列表之后的字符串可作为描述函数用途的文档字符串。\n可通过函数<code>documentation</code>获取。\n函数将最后一个表达式的值作为整个函数的返回值。也可用 return-from 在函数任何位置立即返回。\n函数形参列表\n必要参数：不用关键字修饰的形参，一般为必要参数。当函数调用时，必须为其提供一个实参，每个形参绑定对应的实参。若实参个数过多或过少，则会报错。\n可选参数：形参前用关键字<code>&amp;optional</code>修饰。在所有必要形参都被赋值之后，若还有剩余实参，则被赋给可选形参。若未被赋值的可选形参会自动绑定值 nil。可设置默认值，用列表表示。如：(b 10)。若可选形参未传值，则使用默认值。若检测是否使用默认值，可用形参名加-supplied-p 后缀来判断。如：(b 10 b-supplied-p)。当使用默认值为 nil，不使用默认值为 T</p>\n<h1 id=\"函数形参列表\">函数形参列表</h1>\n<ul>\n<li><p>必要参数：不用关键字修饰的形参，一般为必要参数。当函数调用时，必须为其提供一个实参，每个形参绑定对应的实参。若实参个数过多或过少，则会报错。</p>\n</li>\n<li><p>可选参数：形参前用关键字&amp;optional 修饰。在所有必要形参都被赋值之后，若还有剩余实参，则被赋给可选形参。若未被赋值的可选形参会自动绑定值 nil。可设置默认值，用列表表示。如：(b 10)。若可选形参未传值，则使用默认值。若检测是否使用默认值，可用形参名加-supplied-p 后缀来判断。如：(b 10 b-supplied-p)。当使用默认值为 nil，不使用默认值为 T\n例子:</p>\n<pre><code class=\"language-commonlisp\"><span class=\"hljs-comment\">(defun test (a &amp;optional (b 10 b-supplied-p)</span>)\n  <span class=\"hljs-comment\">(format t &quot;a: ~A b: ~A flag: ~A&quot; a b b-supplied-p)</span>)\n</code></pre>\n<p>测试代码：</p>\n<pre><code><span class=\"hljs-attribute\">CL</span>-USER&gt; (test <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-attribute\">a</span>: <span class=\"hljs-number\">2</span> b: <span class=\"hljs-number\">10</span> flag: NIL\n<span class=\"hljs-attribute\">NIL</span>\n<span class=\"hljs-attribute\">CL</span>-USER&gt; (test <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">4</span>)\n<span class=\"hljs-attribute\">a</span>: <span class=\"hljs-number\">2</span> b: <span class=\"hljs-number\">4</span> flag: T\n<span class=\"hljs-attribute\">NIL</span>\n</code></pre>\n<ul>\n<li>剩余参数：形参前用关键字&amp;rest 修饰。若当实参个数满足必要形参和可选形参时，剩余实参会被放进一个列表作为剩余形参的值。</li>\n</ul>\n<p>例子：</p>\n<pre><code class=\"language-commonlisp\"><span class=\"hljs-comment\">(defun test (a &amp;optional b &amp;rest values)</span>\n  <span class=\"hljs-comment\">(format t &quot;a: ~A b: ~A values: ~A&quot; a b values)</span>)\n</code></pre>\n<p>测试代码：</p>\n<pre><code><span class=\"hljs-attribute\">CL</span>-USER&gt; (test <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span>)\n<span class=\"hljs-attribute\">a</span>: <span class=\"hljs-number\">1</span> b: <span class=\"hljs-number\">2</span> values: (<span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span>)\n<span class=\"hljs-attribute\">NIL</span>\n</code></pre>\n<ul>\n<li>关键字参数：形参前用关键字&amp;key 修饰。在函数调用时可用:形参名(即关键字)来给特定的形参赋值。此形参也可设置默认值及判断是否使用默认值。用法和可选参数相同。还可以通过列表设置关键字别名，在函数调用时，只能通过别名来赋值。如：((:app a))</li>\n</ul>\n<p>例子：</p>\n<pre><code class=\"language-commonlisp\">(<span class=\"hljs-name\">defun</span> test (<span class=\"hljs-name\">a</span> <span class=\"hljs-symbol\">&amp;key</span> ((<span class=\"hljs-symbol\">:bp</span> b)) ((<span class=\"hljs-symbol\">:cp</span> c) <span class=\"hljs-number\">3</span> c-supplied-p) )\n  (<span class=\"hljs-name\">format</span> <span class=\"hljs-literal\">t</span> <span class=\"hljs-string\">&quot;a: ~A b: ~A c: ~A c-flag: ~A&quot;</span> a b c c-supplied-p))\n</code></pre>\n<p>测试代码：</p>\n<pre><code><span class=\"hljs-attribute\">CL</span>-USER&gt; (test <span class=\"hljs-number\">1</span> :bp <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-attribute\">a</span>: <span class=\"hljs-number\">1</span> b: <span class=\"hljs-number\">2</span> c: <span class=\"hljs-number\">3</span> c-flag: NIL\n<span class=\"hljs-attribute\">NIL</span>\n<span class=\"hljs-attribute\">CL</span>-USER&gt; (test <span class=\"hljs-number\">1</span> :cp <span class=\"hljs-number\">4</span>)\n<span class=\"hljs-attribute\">a</span>: <span class=\"hljs-number\">1</span> b: NIL c: <span class=\"hljs-number\">4</span> c-flag: T\n<span class=\"hljs-attribute\">NIL</span>\n<span class=\"hljs-attribute\">CL</span>-USER&gt; (test <span class=\"hljs-number\">1</span> :cp <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-attribute\">a</span>: <span class=\"hljs-number\">1</span> b: NIL c: <span class=\"hljs-number\">3</span> c-flag: T\n<span class=\"hljs-attribute\">NIL</span>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"混合使用不同形参类型\">混合使用不同形参类型</h3>\n<p>混合使用不同形参类型时的声明顺序：必要参数、可选参数、剩余参数、关键字参数。\n一般组合使用的情况：必要参数和其他的一种类型组合使用。</p>\n<p><strong>关键字参数和剩余参数、可选参数组合使用时会出现奇怪的行为，应避免一起使用。</strong>(若未给可选参数提供值，则会将关键字参数的关键字和值作为可选参数。)</p>\n<p>也有可以组合使用的例子，但暂时先不考虑。</p>\n<p>可选参数仅适用于一些较为分散且不确定调用者会提供值的形参。\n剩余参数适用于接收可变数量的实参。\n关键字参数适用于给指定参数赋值。</p>\n<h3 id=\"函数返回值\">函数返回值</h3>\n<p>函数默认会将最后一个表达式的值作为整个函数的返回值。</p>\n<p>可使用<code>return-from</code>使函数在特定位置返回。第一个参数为在返回函数中的函数名，第二个参数为返回值。</p>\n<h3 id=\"作为数据的函数--高阶函数\">作为数据的函数--高阶函数</h3>\n<p>一般使用函数名来调用函数，若将函数看成数据则可将函数作为参数传给另一个函数。</p>\n<p>在 lisp 中，函数是另一种类型的对象。\n用 defun 定义一个函数时，创建一个新的函数对象及赋予其一个名字。\n使用特殊操作符 function 可获取一个函数的函数对象。接收一个参数并返回参数同名的函数对象。\nfunctiong 的语法糖为：<code>#&#39;</code></p>\n<p>通过函数对象调用函数的两个函数：<code>funcall</code>和<code>apply</code>\nfuncall：用于知道传递给函数的实参个数。第一个参数为：被调用的函数对象，其余的参数为传入函数的参数。\napply：第一个参数是被调用的函数对象。第二个参数是一个列表，将传入被调函数的参数放到一个列表中。\nfuncall 和 apply 的区别：funcall 应用到被调函数上的参数为单一参数，而 apply 则将一个列表作为应用参数。</p>\n<p>例子：</p>\n<pre><code class=\"language-commonlisp\">(<span class=\"hljs-name\">defun</span> test-fun (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">fn</span></span>)\n  (<span class=\"hljs-name\">funcall</span> fn <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>))\n(<span class=\"hljs-name\">defun</span> test-app (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">fn</span></span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">apply</span></span> fn &#x27;(<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>)))\n</code></pre>\n<p>测试代码：</p>\n<pre><code><span class=\"hljs-keyword\">CL</span>-USER&gt; (<span class=\"hljs-keyword\">test</span>-fun #&#x27;+)\n\n6\n<span class=\"hljs-keyword\">CL</span>-USER&gt; (<span class=\"hljs-keyword\">test</span>-<span class=\"hljs-keyword\">app</span> #&#x27;+)\n6\n</code></pre>\n<h3 id=\"匿名函数\">匿名函数</h3>\n<p>使用 lambda 表达式可创建一个匿名函数。第一个参数是形参列表，第二个参数是函数体\n格式：<code>(lambda (形参列表) 函数体)</code>\nlambda 表达式重要用途是制作闭包，即捕捉了其创建时环境信息的函数。</p>\n<p>例子：</p>\n<pre><code class=\"language-commonlisp\">(<span class=\"hljs-name\">defun</span> test (<span class=\"hljs-name\">x</span> y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x y)) x y)\n</code></pre>\n<p>测试代码：</p>\n<pre><code><span class=\"hljs-attribute\">CL</span>-USER&gt; (test <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>)\n\n<span class=\"hljs-attribute\">2</span>\n</code></pre>\n"}