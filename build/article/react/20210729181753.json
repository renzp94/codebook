{"title":"React Hooks","slug":"react hooks","time":"2021-07-29T18:18:19.000Z","author":"renzp94","status":"done","html":"<p><code>Hooks</code>是<code>React16.8</code>新增的特性，可以在不编写<code>class</code>的情况下使用<code>state</code>以及其他特性，<code>Hooks</code>的出现主要是解决组件之间的复用状态逻辑困难，复杂组件难理解等问题</p>\n<h2 id=\"hook-规则\">Hook 规则</h2>\n<ul>\n<li>只在最顶层使用<code>Hook</code>，即：不要在循环，条件判断或嵌套函数中调用<code>Hook</code></li>\n<li>只在<code>React</code>函数中调用<code>Hook</code></li>\n</ul>\n<h2 id=\"state-hook：usestate\">State Hook：useState</h2>\n<blockquote>\n<p>使用<code>useState</code>创建一个响应式的状态，接收一个初始值<code>(可以是函数且函数只在初始渲染时调用)</code>，返回一个数组，数组第一个元素是<code>state</code>,第二个元素是更新<code>state</code>的函数。如果需要依据当前的<code>state</code>或<code>props</code>更新<code>state</code>，则更新<code>state</code>的函数可以接收一个函数，函数的参数是当前的<code>state</code>，返回一个需要更新的值。需要多个状态时则使用<code>useState</code>创建多个<code>state</code>即可</p>\n</blockquote>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">const</span> onDec = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count + <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">const</span> onReset = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onDec}</span>&gt;</span>-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onAdd}</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onReset}</span>&gt;</span>reset<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"effect-hook：useeffect\">Effect Hook：useEffect</h2>\n<blockquote>\n<p><code>useEffect</code>代替了生命周期<code>componentDidMount</code>、<code>componentDidUpdate</code>、<code>componentWillUnmount</code>。其接收两个参数：第一个参数是一个函数，此函数就相当于<code>componentDidMount</code>和<code>componentDidUpdate</code>，此函数可返回一个函数，返回的函数相当于<code>componentWillUnmount</code>。第二个参数是一个数组(非必传)，是<code>Effect Hook</code>的依赖项，如果不传，则组件首次挂载后以及<code>state</code>发生变化后会触发，如果传空数组，则只在组件首次挂载后触发，如果数组中传入依赖项，则组件首次挂载后和依赖项发生变化时会触发。可使用多个<code>useEffect</code>，执行顺序是声明的顺序</p>\n</blockquote>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">const</span> onDec = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count + <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">const</span> onReset = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">const</span> [message, setMessage] = useState(<span class=\"hljs-string\">&#x27;React&#x27;</span>);\n    <span class=\"hljs-keyword\">const</span> onChangeMessage = <span class=\"hljs-function\">() =&gt;</span> setMessage(<span class=\"hljs-string\">&#x27;Vue&#x27;</span>);\n\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;只会在组件挂载后触发&#x27;</span>), []);\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;组件挂载后及状态发生变化后触发&#x27;</span>));\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;组件挂载后及count变化后触发&#x27;</span>), [count]);\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> timer = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;定时器运行中...&#x27;</span>);\n        }, <span class=\"hljs-number\">1000</span>);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;组件卸载前触发&#x27;</span>);\n            <span class=\"hljs-built_in\">clearInterval</span>(timer);\n        };\n    });\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onDec}</span>&gt;</span>-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onAdd}</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onReset}</span>&gt;</span>reset<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onChangeMessage}</span>&gt;</span>{message}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"usecontext\">useContext</h2>\n<blockquote>\n<p>接收一个<code>Context</code>对象(<code>React.createContext</code>的返回值)并返回当前<code>context</code>的值，当前的<code>context</code>的值取决于上层组件中距离最近的<code>Context.Provider</code>的<code>value</code>属性决定</p>\n</blockquote>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { createContext, useContext, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">interface</span> IProvider {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">number</span>;\n    onDec: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n    onAdd: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n}\n<span class=\"hljs-keyword\">const</span> context = createContext&lt;IProvider | <span class=\"hljs-literal\">null</span>&gt;(<span class=\"hljs-literal\">null</span>);\n\n<span class=\"hljs-keyword\">const</span> { Provider } = context;\n\n<span class=\"hljs-keyword\">const</span> Counter = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { count } = useContext(context) <span class=\"hljs-keyword\">as</span> IProvider;\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">const</span> CountButton = <span class=\"hljs-function\">(<span class=\"hljs-params\">props: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { onDec, onAdd } = useContext(context) <span class=\"hljs-keyword\">as</span> IProvider;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{props.type</span> === <span class=\"hljs-string\">&#x27;dec&#x27;</span> ? <span class=\"hljs-attr\">onDec</span> <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">onAdd</span>}&gt;</span>{props.children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">const</span> provider = {\n        count,\n        <span class=\"hljs-attr\">onDec</span>: <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count - <span class=\"hljs-number\">1</span>),\n        <span class=\"hljs-attr\">onAdd</span>: <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count + <span class=\"hljs-number\">1</span>)\n    };\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{provider}</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CountButton</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;dec&quot;</span>&gt;</span>-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CountButton</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Counter</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CountButton</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;add&quot;</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CountButton</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Provider</span>&gt;</span></span>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"usereducer\">useReducer</h2>\n<blockquote>\n<p><code>useState</code>的替代方案，第一个参数接收像<code>(state,action) =&gt; newState</code>的<code>reducer</code>，第二个参数接收一个初始值，返回当前的<code>state</code>和<code>dispatch</code>方法</p>\n</blockquote>\n<pre><code class=\"language-tsx\">import React, { useReducer } <span class=\"hljs-keyword\">from</span> &#x27;react&#x27;;\n\n<span class=\"hljs-keyword\">const</span> reducer = (<span class=\"hljs-keyword\">state</span>: <span class=\"hljs-literal\">any</span>, action: { type: string }) =&gt; {\n    switch (action.type) {\n        case &#x27;dec&#x27;:\n            return { count: <span class=\"hljs-keyword\">state</span>.count - <span class=\"hljs-number\">1</span> };\n        case &#x27;add&#x27;:\n            return { count: <span class=\"hljs-keyword\">state</span>.count + <span class=\"hljs-number\">1</span> };\n    }\n};\n\n<span class=\"hljs-keyword\">const</span> App = () =&gt; {\n    <span class=\"hljs-keyword\">const</span> [<span class=\"hljs-keyword\">state</span>, dispatch] = useReducer(reducer, { count: <span class=\"hljs-number\">0</span> });\n    return (\n        <span class=\"hljs-variable\">&lt;&gt;</span>\n            <span class=\"hljs-variable\">&lt;button onClick={() =&gt;</span> dispatch({ type: &#x27;dec&#x27; })}&gt;-&lt;/button&gt;\n            <span class=\"hljs-variable\">&lt;span&gt;</span>{<span class=\"hljs-keyword\">state</span>?.count}&lt;/span&gt;\n            <span class=\"hljs-variable\">&lt;button onClick={() =&gt;</span> dispatch({ type: &#x27;add&#x27; })}&gt;+&lt;/button&gt;\n        &lt;/&gt;\n    );\n};\n\nexport <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"usecallback\">useCallback</h2>\n<blockquote>\n<p>把内联回调函数及依赖项数组作为参数传入<code>useCallback</code>，返回该回调函数的<code>memoized</code>版本的回调函数。用于性能优化(<code>可缓存函数</code>)，一般是在父组件中通过<code>useCallback</code>缓存函数，当父组件内的数据发生变化重新渲染时，只要不是<code>useCallback</code>的依赖项发生变化，子组件就不会重新渲染，子组件需要通过<code>React.memo</code>处理一下。</p>\n</blockquote>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { memo, useCallback, useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> Message = memo(<span class=\"hljs-function\">(<span class=\"hljs-params\">props: { msg: <span class=\"hljs-built_in\">string</span>; onChange: () =&gt; <span class=\"hljs-built_in\">void</span> }</span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Message渲染&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{props.onChange}</span>&gt;</span>Message组件：{props.msg}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>;\n});\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">const</span> onDec = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count + <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">const</span> [msg, setMsg] = useState(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);\n    <span class=\"hljs-comment\">// const onChangeMsg = () =&gt;  setMsg(&#x27;world&#x27;)</span>\n    <span class=\"hljs-keyword\">const</span> onChangeMsg = useCallback(<span class=\"hljs-function\">() =&gt;</span> setMsg(<span class=\"hljs-string\">&#x27;world&#x27;</span>), [msg]);\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onDec}</span>&gt;</span>-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onAdd}</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Message</span> <span class=\"hljs-attr\">msg</span>=<span class=\"hljs-string\">{msg}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{onChangeMsg}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<blockquote>\n<p>如果不使用<code>useCallback</code>，则当改变<code>count</code>是也会触发<code>Message</code>组件的渲染，当使用<code>useCallback</code>之后，只有当<code>msg</code>发生变化时，<code>Message</code>组件才会重新渲染</p>\n</blockquote>\n<h2 id=\"usememo\">useMemo</h2>\n<blockquote>\n<p>把函数和依赖项数组作为参数传入<code>useMemo</code>，返回该回调函数的<code>memoized</code>版本的回调函数，它仅在某个依赖项改变时才会重新计算<code>memoized</code>值。用于性能优化(<code>可缓存数据</code>)，如果一个组件内存在多个可变数据，当一个数据发生变化则所有数据的处理函数都会被调用，使用<code>useMemo</code>可将某些操作绑定到指定数据，即：指定依赖，当依赖发生变化时才会重新执行操作。</p>\n</blockquote>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { useMemo, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">const</span> onDec = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count + <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">const</span> [msg, setMsg] = useState(<span class=\"hljs-string\">&#x27;Hello&#x27;</span>);\n    <span class=\"hljs-keyword\">const</span> onChangeMsg = <span class=\"hljs-function\">() =&gt;</span> setMsg(<span class=\"hljs-string\">&#x27;Hi&#x27;</span>);\n    <span class=\"hljs-comment\">// const getFullMsg = () =&gt; {</span>\n    <span class=\"hljs-comment\">//   console.log(&#x27;getFullMsg调用&#x27;)</span>\n    <span class=\"hljs-comment\">//   return `${msg} World`</span>\n    <span class=\"hljs-comment\">// }</span>\n\n    <span class=\"hljs-keyword\">const</span> getFullMsg = useMemo(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;getFullMsg调用&#x27;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${msg}</span> World`</span>;\n    }, [msg]);\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onDec}</span>&gt;</span>-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onAdd}</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{msg}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onChangeMsg}</span>&gt;</span>改变msg：{getFullMsg}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<p>上述例子如果不使用<code>useMemo</code>,则更新<code>count</code>也会触发<code>getFullMsg</code>函数</p>\n<blockquote>\n<p>特别需要注意的是:<code>useMemo</code>返回的是一个值,不是一个函数</p>\n</blockquote>\n<h2 id=\"useref\">useRef</h2>\n<blockquote>\n<p>返回一个可变的<code>ref</code>对象,其<code>.current</code>属性被初始化为传入的数据.一般用于获取<code>DOM</code>元素</p>\n</blockquote>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { useEffect, useRef } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\nconst App = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    const inputRef = useRef&lt;HTMLInputElement&gt;(<span class=\"hljs-literal\">null</span>);\n\n    useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        inputRef.current!.focus();\n    });\n    <span class=\"hljs-keyword\">return</span> &lt;input type=<span class=\"hljs-string\">&quot;text&quot;</span> ref={inputRef} /&gt;;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"useimperativehandle\">useImperativeHandle</h2>\n<blockquote>\n<p>可以在使用<code>ref</code>时自定义暴露给父组件的实例值,需要和<code>forwardRef</code>配合使用.在子组件暴露指定的内容,父组件通过<code>ref.current</code>获取当前暴露的内容</p>\n</blockquote>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { forwardRef, useEffect, useImperativeHandle, useRef } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\nconst Input = forwardRef(<span class=\"hljs-function\"><span class=\"hljs-params\">(_, ref)</span> =&gt;</span> {\n    const inputRef = useRef&lt;HTMLInputElement&gt;(<span class=\"hljs-literal\">null</span>);\n\n    useImperativeHandle(ref, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n        autoFocus: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> inputRef.current?.focus()\n    }));\n\n    <span class=\"hljs-keyword\">return</span> &lt;input type=<span class=\"hljs-string\">&quot;text&quot;</span> ref={inputRef} /&gt;;\n});\n\nconst App = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    const inputRef = useRef&lt;any&gt;(<span class=\"hljs-literal\">null</span>);\n\n    useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> inputRef.current?.autoFocus());\n    <span class=\"hljs-keyword\">return</span> &lt;Input ref={inputRef} /&gt;;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"uselayouteffect\">useLayoutEffect</h2>\n<blockquote>\n<p>同<code>useEffect</code>一样,不过<code>useLayoutEffect</code>是等所有的<code>DOM</code>更新之后同步调用<code>effect</code>.</p>\n</blockquote>\n<h2 id=\"usedebugvalue\">useDebugValue</h2>\n<blockquote>\n<p>用于 React 开发者工具中显示自定义<code>hook</code>的标签</p>\n</blockquote>\n"}