{"title":"React的核心概念","slug":"react","time":"2021-04-07T19:46:33.000Z","author":"renzp94","status":"done","html":"<p><code>React</code>是<code>Facebook</code>开发的一个声明式，高效且灵活的用于构建用户界面的<code>Javascript</code>库。主要有以下特点：</p>\n<ul>\n<li><code>声明式</code>：以声明式编写 UI</li>\n<li><code>组件化</code>：以组件的方式组织 UI</li>\n<li><code>单向数据流</code>：数据只能从上到下传递。</li>\n<li><code>JSX</code>：<code>JSX</code>是对<code>Javascript</code>语法的一种扩展，官方推荐使用此方式编写<code>React</code>应用，但不是必须的。</li>\n<li><code>Virtual DOM</code>：采用<code>Virtual DOM</code>来更新真实的<code>DOM</code>。</li>\n</ul>\n<h2 id=\"hello-world\">Hello World</h2>\n<p><code>main.jsx</code></p>\n<pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App&#x27;</span>;\n\nReactDOM.render(\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">React.StrictMode</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">React.StrictMode</span>&gt;</span></span>,\n    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;root&#x27;</span>)\n);\n</code></pre>\n<p><code>App.jsx</code>（函数）</p>\n<pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;App&quot;</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<p><code>App.jsx</code>（类）</p>\n<pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span>, { <span class=\"hljs-type\">Component</span> } from <span class=\"hljs-symbol\">&#x27;reac</span>t&#x27;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    render() {\n        <span class=\"hljs-keyword\">return</span> &lt;div&gt;<span class=\"hljs-type\">Hello</span> <span class=\"hljs-type\">World</span>&lt;/div&gt;;\n    }\n}\n\nexport <span class=\"hljs-keyword\">default</span> <span class=\"hljs-type\">App</span>;\n</code></pre>\n<p>在<code>React</code>中，一般推荐使用<code>JSX</code>来编写代码，其文件后缀为<code>.jsx</code>或<code>.tsx</code>,在文件中可以写<code>HTML</code>元素。在<code>JSX</code>文件中必须引入<code>React</code>，即<code>import React from &#39;react&#39;</code>。</p>\n<p>通过<code>React</code>编写的组件最终需要通过<code>react-dom</code>提供的<code>ReactDom.render</code>来渲染。</p>\n<h2 id=\"jsx\">JSX</h2>\n<p><code>JSX</code>是<code>Javascript</code>的语法扩展，可以在<code>Javascript</code>中写<code>HTML</code>。在<code>JSX</code>中通过<code>{}</code>可以插入<code>Javascript</code>变量或任何有效的<code>Javascript</code>表达式，也可以将<code>JSX</code>赋值给<code>Javascript</code>变量，还可以在<code>HTML</code>元素属性使用<code>{}</code>来设置属性值。</p>\n<pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> React, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">const</span> onClick = <span class=\"hljs-function\">() =&gt;</span> setCount(count + <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n                <span class=\"hljs-attr\">backgroundColor:</span> &#x27;#<span class=\"hljs-attr\">fff</span>&#x27;,\n                <span class=\"hljs-attr\">border:</span> &#x27;<span class=\"hljs-attr\">1px</span> <span class=\"hljs-attr\">solid</span> #<span class=\"hljs-attr\">f2f2f2</span>&#x27;,\n                <span class=\"hljs-attr\">outline:</span> &#x27;<span class=\"hljs-attr\">none</span>&#x27;\n            }}\n            <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>\n        &gt;</span>\n            点击{count}次\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<blockquote>\n<p>注意：在<code>JSX</code>中需要元素的属性写成<code>cameCase(小驼峰命名)</code>，如：元素的<code>class</code>属性写成<code>className</code>,<code>tabindex</code>写成<code>tabIndex</code>。</p>\n</blockquote>\n<h2 id=\"事件处理\">事件处理</h2>\n<p><code>React</code>元素的事件处理和<code>DOM</code>元素相似，但有几点不同：</p>\n<ul>\n<li><code>React</code>事件的命名采用<code>小驼峰式（camelCase）</code>，而不是纯小写。</li>\n<li>使用<code>JSX</code>语法时需要传入一个函数作为事件处理函数，而不是一个字符串。</li>\n<li>不能通过返回<code>false</code>的阻止默认行为，必须通过<code>e.preventDefault()</code>来阻止默认行为。</li>\n<li>当使用<code>class</code>方式编写组件时，<code>this</code>需要手动绑定，否则<code>this</code>指向会出问题，可通过内联函数，在内联函数中调用，也可以使用箭头函数规避此问题。</li>\n<li>给事件函数传递参数时，如果需要合成事件<code>e</code>，则需要使用内联函数获取，然后再传递给事件函数。</li>\n</ul>\n<pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">super</span>();\n        <span class=\"hljs-built_in\">this</span>.onClick1 = <span class=\"hljs-built_in\">this</span>.onClick1.bind(<span class=\"hljs-built_in\">this</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">onClick1</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;onClick1：&#x27;</span>, <span class=\"hljs-built_in\">this</span>);\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-title\">onClick2</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;onClick2：&#x27;</span>, <span class=\"hljs-built_in\">this</span>);\n    }\n    onClick3 = <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;onClick3：&#x27;</span>, <span class=\"hljs-built_in\">this</span>);\n    };\n    onClick4 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e, test</span>) =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;onClick4：&#x27;</span>, e, test);\n    };\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.onClick1}</span>&gt;</span>onClick1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> this.onClick2()}&gt;onClick2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.onClick3}</span>&gt;</span>onClick3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.onClick4}</span>&gt;</span>onClick4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> this.onClick4(e, 111)}&gt;onClick5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n        );\n    }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"条件渲染\">条件渲染</h2>\n<p><code>React</code>中条件渲染非常简单，通过<code>Javascript</code>中的<code>if</code>或<code>三元运算</code>来实现，如果不准备渲染任何内容可以设置为<code>null</code>。</p>\n<pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> React, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [visible, setVisible] = useState(<span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-keyword\">const</span> onClick = <span class=\"hljs-function\">() =&gt;</span> setVisible(!visible);\n\n    <span class=\"hljs-keyword\">let</span> content = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">if</span> (visible) {\n        content = <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>显示的内容1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        content = <span class=\"hljs-literal\">null</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>&gt;</span>改变状态<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            {content}\n            {visible ? <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>显示的内容2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> : null}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"列表渲染\">列表渲染</h2>\n<p>在<code>React</code>中通过将数据列表转为元素列表来实现列表渲染，一般可以通过<code>Array.map</code>来实现，在进行列表渲染时需要指定每一项的 key,且 key 应该是唯一的，以便数据发生更改时可以正确的渲染。</p>\n<pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> React, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [list, setList] = useState([]);\n\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n        setList([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\n    }, <span class=\"hljs-number\">2000</span>);\n\n    <span class=\"hljs-keyword\">const</span> elList = list.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{</span>`${<span class=\"hljs-attr\">item</span>}<span class=\"hljs-attr\">_el</span>`}&gt;</span>{item}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>);\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n            {list.length === 0 ? &#x27;loading...&#x27; : list.map((item) =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{item}</span>&gt;</span>{item}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>)}\n            {elList}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"受控组件\">受控组件</h2>\n<p>将<code>React</code>中的<code>state</code>作为唯一的数据源，渲染表单的组件控制着用户输入时表单发生的操作，以此种方式控制取值的表单输入元素叫做受控组件。而表单的数据由<code>DOM</code>节点处理的组件叫做非受控组件。</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { ChangeEvent, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [value, setValue] = useState(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n    <span class=\"hljs-keyword\">const</span> onChange = <span class=\"hljs-function\">(<span class=\"hljs-params\">e: ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> {\n        setValue(e.target.value);\n    };\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{onChange}</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>输入的值为：{value}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"组件\">组件</h2>\n<p>组件是将 UI 拆分为独立可复用的代码片段。<code>React</code>组件可以定义为<code>class</code>和<code>函数</code>的形式</p>\n<ul>\n<li><code>class</code>：类需要继承于<code>React.Component</code>，且必须实现<code>render</code>函数，在<code>render</code>函数中返回要渲染的<code>HTML</code>。</li>\n<li><code>函数</code>：只需函数中返回要渲染的<code>HTML</code>即可。</li>\n</ul>\n<h3 id=\"state-和-props\">State 和 Props</h3>\n<p>组件和函数类似，接受任意的<code>属性(props)</code>，然后在组件中就可以使用了，有时组件内需要有自己的数据，称为<code>状态(State)</code>。在组件中，<code>props</code>是不可变的，只能通过父组件修改，如果需要在组件内修改<code>prop</code>则可通过传入一个修改函数，来修改父组件中的<code>state</code>。<code>state</code>不能直接修改，直接修改的话视图不会更新渲染，需要通过<code>this.setState</code>来修改，函数式组件需要通过<code>Hooks</code>来修改。如果<code>state</code>需要根据其他的<code>state</code>来更新的话，可以向<code>setState</code>传入一个函数，函数的第一个参数是<code>state</code>，第二个参数是<code>prop</code>。</p>\n<p><code>User.jsx</code></p>\n<pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">User</span>(<span class=\"hljs-params\">props</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> onClick = <span class=\"hljs-function\">() =&gt;</span> {\n        props.changeName(<span class=\"hljs-string\">&#x27;codebook&#x27;</span>);\n    };\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{props.avatar}</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{props.nickname}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> User;\n</code></pre>\n<p><code>App.jsx</code></p>\n<pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> React, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> User <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/User&#x27;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [name, setName] = useState(<span class=\"hljs-string\">&#x27;React&#x27;</span>);\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">User</span>\n                <span class=\"hljs-attr\">avatar</span>=<span class=\"hljs-string\">&quot;https://codebook.vercel.app/assets/images/logo.png&quot;</span>\n                <span class=\"hljs-attr\">nickname</span>=<span class=\"hljs-string\">{name}</span>\n                <span class=\"hljs-attr\">changeName</span>=<span class=\"hljs-string\">{setName}</span>\n            /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h3 id=\"组件的生命周期\">组件的生命周期</h3>\n<p>组件从创建到销毁的过程叫做生命周期。</p>\n<p><img src=\"/assets/images/lifecycle.png\" alt=\"生命周期图\"></p>\n<p>每个组件都有以下生命周期(按照调用顺序排序)：</p>\n<p>组件创建时：</p>\n<ul>\n<li><code>constructor()</code>：构造函数,组件挂载之前调用。</li>\n<li><code>static getDerivedStateFromProps()</code>：在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。</li>\n<li><code>render()</code>：渲染函数</li>\n<li><code>componentDidMount()</code>：渲染完成函数。在组件挂载后（插入 DOM 树中）立即调用。</li>\n</ul>\n<p>组件更新时：</p>\n<ul>\n<li><code>static getDerivedStateFromProps()</code></li>\n<li><code>shouldComponentUpdate()</code>：当<code>props</code>或<code>state</code>发生变化时，在渲染执行之前被调用，首次渲染或使用<code>forceUpdate()</code>时不会调用该方法。默认返回<code>true</code>，如果返回<code>false</code>，则不会调用<code>render()</code>更新视图。</li>\n<li><code>render()</code></li>\n<li><code>getSnapshotBeforeUpdate()</code>：在最近一次渲染输出（提交到 DOM 节点）之前调用，任何返回值将作为参数传递给<code>componentDidUpdate()</code>。</li>\n<li><code>componentDidUpdate()</code>：在更新后会被立即调用，首次渲染不会执行此方法。</li>\n</ul>\n<p>组件卸载时</p>\n<ul>\n<li><code>componentWillUnmount()</code>：当组件从 DOM 中移除时会调用此方法。</li>\n</ul>\n<p>组件发生错误时</p>\n<ul>\n<li><code>static getDerivedStateFromError()</code>：在后代组件抛出错误后被调用。 它将抛出的错误作为参数，并返回一个值以更新<code>state</code>。</li>\n<li><code>componentDidCatch()</code>：生命周期在后代组件抛出错误后（在“提交”阶段被调用，因此允许执行副作用）被调用。 它接收两个参数：<ul>\n<li><code>error</code>：抛出的错误。</li>\n<li><code>info</code>：带有<code>componentStack key</code>的对象</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> User <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/User&#x27;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;constructor&#x27;</span>);\n        <span class=\"hljs-built_in\">super</span>();\n\n        <span class=\"hljs-built_in\">this</span>.state = {\n            <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\n        };\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;componentDidMount&#x27;</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">shouldComponentUpdate</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;shouldComponentUpdate&#x27;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">getSnapshotBeforeUpdate</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;getSnapshotBeforeUpdate&#x27;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidUpdate</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;componentDidUpdate&#x27;</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;componentWillUnmount&#x27;</span>);\n    }\n\n    onClick = <span class=\"hljs-function\">() =&gt;</span>\n        <span class=\"hljs-built_in\">this</span>.setState({\n            <span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">this</span>.state.count + <span class=\"hljs-number\">1</span>\n        });\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;render&#x27;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.onClick}</span>&gt;</span>点击了{this.state.count}次<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n    }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h3 id=\"组件属性默认及验证\">组件属性默认及验证</h3>\n<blockquote>\n<p>如果封装组件时需要指定组件默认，可通过<code>defaultProps</code>来指定，需要对组件属性做验证可通过<code>propTypes</code>并搭配<code>prop-types</code>库来验证</p>\n</blockquote>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> PropTypes <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;prop-types&#x27;</span>;\n\n<span class=\"hljs-keyword\">interface</span> ButtonProps {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">string</span>;\n    children: <span class=\"hljs-built_in\">any</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> Button = <span class=\"hljs-function\">(<span class=\"hljs-params\">props: ButtonProps</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">button--</span>${<span class=\"hljs-attr\">props.type</span>}`}&gt;</span>{props.children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n};\n\nButton.defaultProps = {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;default&#x27;</span>\n};\n\nButton.propTypes = {\n    <span class=\"hljs-attr\">type</span>: PropTypes.string\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>默认按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;primay&quot;</span>&gt;</span>主要按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;waring&quot;</span>&gt;</span>错误按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">{1}</span>&gt;</span>此按钮会在控制台报错，因为type类型不对<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"组合组件\">组合组件</h2>\n<p><code>React</code>不建议组件继承，如果需要多个组件结合，可以尝试组合组件，将 UI 拆分成多个组件，通过组合形成不同的 UI。</p>\n"}