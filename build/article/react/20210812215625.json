{"title":"React状态管理：Recoil指南","slug":"react store","time":"2021-08-12T21:57:20.000Z","author":"renzp94","status":"done","html":"<h2 id=\"recoilroot\">RecoilRoot</h2>\n<p>提供上下文。此组件必须是所有使用<code>Recoil hook</code>组件的根组件</p>\n<ul>\n<li><code>initializeState</code>：可使用<code>MutableSnapshot</code>初始化<code>atom</code>状态，可选函数(<code>({set,setUnvalidatedAtomValues}) =&gt; void</code>)</li>\n<li><code>override</code>：是否重新创建新的<code>Recoil</code>作用域，默认为<code>true</code>。一般用于多个<code>&lt;RecoilRoot&gt;</code>嵌套，当为<code>true</code>时会重新创建一个<code>Recoil</code>作用域，新的作用域会覆盖上级<code>&lt;RecoilRoot&gt;</code>中同名。为<code>false</code>则只渲染子组件，没有其他作用</li>\n</ul>\n<p>通常情况下,<code>atom</code>或<code>selector</code>需要配合以下<code>hook</code>使用: <code>useRecoilState(读写)</code>,<code>useRecoilValue(只读)</code>,<code>useSetRecoilState(只写)</code>,<code>useResetRecoilState(重置)</code>,现在只需要了解,这些<code>hook</code>后续会讲解</p>\n<h2 id=\"atom\">atom()</h2>\n<p>一个<code>atom</code>表示<code>Recoil</code>的<code>state</code>,接收一个对象,返回一个可写的<code>RecoilState</code>对象.接收对象属性如下:</p>\n<ul>\n<li><code>key</code>：标识当前<code>atom</code>的唯一<code>key</code>值，请记住：<code>key</code>需要保持全局唯一</li>\n<li><code>default</code>：默认值,可是任意类型的值,也可以是<code>RecoilState(atom或selector)</code>,也可以是一个异步函数</li>\n<li><code>dangerouslyAllowMutability</code>：设置允许<code>atom</code>中的对象可变，对象变化不代表<code>status</code>的变化</li>\n</ul>\n<p><code>Recoil</code>管理<code>atom</code>的<code>state</code>的变化,并通知订阅该<code>atom</code>的组件何时渲染</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { atom, RecoilRoot, useRecoilState, useRecoilValue } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> countState = atom({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;countState&#x27;</span>,\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>\n});\n\n<span class=\"hljs-keyword\">const</span> Count = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> count = useRecoilValue(countState);\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">const</span> CountButton = <span class=\"hljs-function\">(<span class=\"hljs-params\">props: { <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-built_in\">string</span> }</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [count, setCount] = useRecoilState(countState);\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount(count + (props.type === &#x27;add&#x27; ? 1 : -1))}&gt;\n            {props.type === &#x27;add&#x27; ? &#x27;+&#x27; : &#x27;-&#x27;}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CountButton</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;dec&quot;</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Count</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CountButton</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;add&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<p>如果需要在不订阅组件的情况下读取<code>atom</code>的值,可使用<code>useRecoilCallback</code>.如果需要基于上一个值更新的话,可以向<code>set</code>函数传入一个函数,函数的参数就是最新的值,返回一个需要设置的值.\n<br />\n当<code>default</code>传入是一个函数时，则在使用<code>hook</code>返回的值也是一个函数.</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { atom, RecoilRoot, useRecoilValue } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> msgState = atom({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;msg&#x27;</span>,\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-string\">&#x27;Hello&#x27;</span>\n});\n\n<span class=\"hljs-keyword\">const</span> Msg = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> msg = useRecoilValue(msgState);\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{msg()}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Msg</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<br />\n\n<p>切记<code>default</code>不能传入一个异步函数，如果需要异步获取数据，可以使用<code>selector</code>包装一下，但一般如果需要异步请求的话，建议放在<code>selector</code>中</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { Suspense } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { atom, RecoilRoot, selector, useRecoilValue } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> msgState = atom({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;msg&#x27;</span>,\n    <span class=\"hljs-attr\">default</span>: selector({\n        <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;msgSelector&#x27;</span>,\n        <span class=\"hljs-attr\">get</span>: <span class=\"hljs-keyword\">async</span> () =&gt; {\n            <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> {\n                <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> resolve(<span class=\"hljs-string\">&#x27;Hello&#x27;</span>), <span class=\"hljs-number\">2000</span>);\n            });\n\n            <span class=\"hljs-keyword\">return</span> data;\n        }\n    })\n});\n\n<span class=\"hljs-keyword\">const</span> Msg = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> msg = useRecoilValue(msgState);\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{msg}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">div</span>&gt;</span>loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>}&gt;\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Msg</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Suspense</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"selector\">selector()</h2>\n<p><code>selector</code>是一个纯函数，是派生状态，可基于<code>atom</code>或<code>selector</code>返回处理过的状态，类似<code>Vue</code>中的<code>compoted</code>。接收一个对象,对象属性如下：</p>\n<ul>\n<li><code>get</code>：一个处理<code>state</code>的函数，返回处理过的值，也可返回一个异步的<code>Promise</code>或相同类型的<code>atom</code>或<code>selector</code>。函数的参数是一个对象：<ul>\n<li><code>get</code>：用来获取其他的<code>atom</code>或<code>selector</code>值的函数，所有传入此函数的<code>atom</code>或<code>selector</code>会被隐式的添加到此<code>selector</code>的依赖列表中，当依赖发生改变时，则会重新计算</li>\n<li><code>getCallback</code>：用于创建<code>Recoil-aware</code>回调的函数</li>\n</ul>\n</li>\n<li><code>set</code>：若设置了该属性，则<code>selector</code>会返回一个可写的<code>state</code>，当改变<code>selector</code>则会调用此函数。此函数接收两个参数,第一个参数是一个对象，第二个参数是一个新值，第一个参数对象属性如下：<ul>\n<li><code>get</code>：用来获取其他的<code>atom</code>或<code>selector</code>值的函数</li>\n<li><code>set</code>：用来设置<code>Recoil</code>状态的函数，第一个参数是<code>Recoil</code>的<code>state</code>，第二个参数是新的值，新值可以是一个更新函数或一个<code>DefaultVaue</code>类型的对象</li>\n</ul>\n</li>\n<li><code>dangerouslyAllowMutability</code>：设置允许<code>atom</code>中的对象可变，对象变化不代表<code>status</code>的变化</li>\n</ul>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { atom, RecoilRoot, selector, useRecoilState, useRecoilValue } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> firstNameState = atom({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;firstName&#x27;</span>,\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">&#x27;Code&#x27;</span>\n});\n\n<span class=\"hljs-keyword\">const</span> lastNameState = atom({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;lastName&#x27;</span>,\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">&#x27;Book&#x27;</span>\n});\n\n<span class=\"hljs-keyword\">const</span> fullNameSelector = selector&lt;<span class=\"hljs-built_in\">string</span>&gt;({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;fullName&#x27;</span>,\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">{ get }</span>) =&gt;</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${get(firstNameState)}</span>-<span class=\"hljs-subst\">${get(lastNameState) ?? <span class=\"hljs-string\">&#x27;&#x27;</span>}</span>`</span>,\n    <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">{ set }, value</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> [firstName, lastName] = value.split(<span class=\"hljs-string\">&#x27;-&#x27;</span>);\n        set(firstNameState, firstName);\n        set(lastNameState, lastName);\n    }\n});\n\n<span class=\"hljs-keyword\">const</span> UpperFullNameSelector = selector&lt;<span class=\"hljs-built_in\">string</span>&gt;({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;upperFullName&#x27;</span>,\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">{ get }</span>) =&gt;</span> get(fullNameSelector).toUpperCase()\n});\n\n<span class=\"hljs-keyword\">const</span> Name = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [firstName, setFirstName] = useRecoilState(firstNameState);\n    <span class=\"hljs-keyword\">const</span> [lastName, setLastName] = useRecoilState(lastNameState);\n    <span class=\"hljs-keyword\">const</span> [fullName, setFullName] = useRecoilState(fullNameSelector);\n    <span class=\"hljs-keyword\">const</span> upperFullName = useRecoilValue(UpperFullNameSelector);\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>firstName：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{firstName}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> setFirstName(e.target.value)} /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>lastName：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{lastName}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> setLastName(e.target.value)} /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>fullName：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{fullName}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> setFullName(e.target.value)} /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{upperFullName}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Name</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<p><code>selector</code>还支持异步,由于<code>React</code>的渲染函数是同步的，所以需要<code>Suspense</code>边界包裹组件，需要捕获错误，可用<code>ErrorBoundary</code>包裹,如果需要查询时传入参数，可使用<code>selectorFamily</code></p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { Suspense } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { atom, RecoilRoot, selector, selectorFamily, useRecoilValue } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-comment\">// const userIdState = atom({</span>\n<span class=\"hljs-comment\">//     key:&#x27;userId&#x27;,</span>\n<span class=\"hljs-comment\">//     default: 1</span>\n<span class=\"hljs-comment\">// })</span>\n\n<span class=\"hljs-comment\">// const userInfoSelector = selector({</span>\n<span class=\"hljs-comment\">//     key:&#x27;userInfo&#x27;,</span>\n<span class=\"hljs-comment\">//     get: async ({get}) =&gt; {</span>\n<span class=\"hljs-comment\">//         const data = await new Promise(resolve =&gt; {</span>\n<span class=\"hljs-comment\">//             setTimeout(()=&gt; resolve({id:get(userIdState),name:&#x27;用户001&#x27;}),2000)</span>\n<span class=\"hljs-comment\">//         })</span>\n\n<span class=\"hljs-comment\">//         return data</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">// })</span>\n\n<span class=\"hljs-keyword\">const</span> userInfoSelector = selectorFamily({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;userInfo&#x27;</span>,\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">id</span>) =&gt;</span> <span class=\"hljs-keyword\">async</span> () =&gt; {\n        <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> {\n            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> resolve({ id, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;用户001&#x27;</span> }), <span class=\"hljs-number\">2000</span>);\n        });\n\n        <span class=\"hljs-keyword\">return</span> data;\n    }\n});\n\n<span class=\"hljs-keyword\">const</span> AsyncSelector = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> userInfo = useRecoilValue(userInfoSelector(<span class=\"hljs-number\">1</span>));\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>用户id:{userInfo.id}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>用户名:{userInfo.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">div</span>&gt;</span>loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>}&gt;\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AsyncSelector</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Suspense</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<p>如果需要并行请求数据可以使用<code>waitForAll</code>一次并行请求多条接口，也可以通过<code>waiForOne</code>实现增量请求更新。\n一般数据会在渲染之前请求获取，在<code>Recoil</code>中可以使用<code>useRecoilCallback</code></p>\n<h2 id=\"userecoilstate\">useRecoilState()</h2>\n<blockquote>\n<p>对<code>Recoil state</code>读写，返回一个数组，数组第一个元素是<code>state</code>当前值，第二个元素是设置<code>state</code>值的函数。</p>\n</blockquote>\n<h2 id=\"userecoilvalue\">useRecoilValue()</h2>\n<blockquote>\n<p>读取<code>Recoil state</code>的值，返回<code>state</code>的当前值。</p>\n</blockquote>\n<h2 id=\"usesetrecoilstate\">useSetRecoilState()</h2>\n<blockquote>\n<p>设置<code>Recoil state</code></p>\n</blockquote>\n<h2 id=\"useresetrecoilstate\">useResetRecoilState()</h2>\n<blockquote>\n<p>重置<code>Recoil state</code></p>\n</blockquote>\n<h2 id=\"userecoilstateloadable\">useRecoilStateLoadable()</h2>\n<blockquote>\n<p>读写异步<code>selector</code>的值。返回一个数组，数组第一个元素是<code>Loadable</code>，第二个元素是设置的函数。使用此<code>hooks</code>可以不使用<code>Suspense</code>来使用异步<code>selector</code></p>\n</blockquote>\n<p><code>Loadable</code>属性：</p>\n<ul>\n<li><code>state</code>：<code>selector</code>所处状态</li>\n<li><code>hasValue</code>：成功</li>\n<li><code>loading</code>：请求中</li>\n<li><code>hasError</code>：失败</li>\n<li><code>contents</code>：当前表示的值，<code>hasValue</code>状态时表示实际值，<code>loading</code>时表示<code>Promise</code>，<code>hasError</code>时表示<code>Error</code>对象</li>\n</ul>\n<h2 id=\"userecoilvalueloadable\">useRecoilValueLoadable()</h2>\n<blockquote>\n<p>仅获取异步<code>selector</code>的值。返回的是一个<code>Loadable</code>，同<code>useRecoilStateLoadable</code></p>\n</blockquote>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { Suspense } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { RecoilRoot, selectorFamily, useRecoilValue, useRecoilValueLoadable } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> userInfoSelector = selectorFamily({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;userInfo&#x27;</span>,\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">id</span>) =&gt;</span> <span class=\"hljs-keyword\">async</span> () =&gt; {\n        <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> {\n            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> resolve({ id, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;用户001&#x27;</span> }), <span class=\"hljs-number\">2000</span>);\n        });\n\n        <span class=\"hljs-keyword\">return</span> data;\n    }\n});\n\n<span class=\"hljs-keyword\">const</span> AsyncSelector = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> userInfo = useRecoilValueLoadable(userInfoSelector(<span class=\"hljs-number\">1</span>));\n\n    <span class=\"hljs-keyword\">switch</span> (userInfo.state) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;hasValue&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> (\n                <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>用户id:{userInfo.contents.id}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>用户名:{userInfo.contents.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n            );\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;loading&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;hasError&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>error<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n    }\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AsyncSelector</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"isrecoilvalue\">isRecoilValue()</h2>\n<blockquote>\n<p>是否为<code>atom</code>或<code>selector</code></p>\n</blockquote>\n<h2 id=\"atomfamily\">atomFamily()</h2>\n<p>返回一个返回可写的<code>RecoilState atom</code>函数，用于表示一个<code>atom</code>的集合。当你需要给<code>atom</code>传参数时，可以使用此函数。</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { atomFamily, RecoilRoot, useRecoilValue } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> msgState = atomFamily({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;msg&#x27;</span>,\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">msg: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> msg.toUpperCase()\n});\n\n<span class=\"hljs-keyword\">const</span> Msg = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> msg = useRecoilValue(msgState(<span class=\"hljs-string\">&#x27;hello&#x27;</span>));\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{msg}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Msg</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"selectorfamily\">selectorFamily()</h2>\n<p>返回一个函数，该函数返回一个只读的<code>RecoilValueReadOnly</code>或者可写的<code>RecoilState selector</code>。当你需要给<code>selector</code>传参数时，可以使用此函数</p>\n<h2 id=\"constselector\">constSelector()</h2>\n<p>一个永远提供常量值的<code>selector</code>。(不太清楚有什么用)</p>\n<h2 id=\"errorselector\">errorSelector()</h2>\n<p>一个总是抛出已有错误的<code>selector</code>。(不太清楚有什么用)</p>\n<h2 id=\"nowait\">noWait()</h2>\n<p><code>select helper</code>方法，返回值代表所提供的<code>atom</code> 或<code>selector</code>当前状态的<code>Loadable</code>，与<code>useRecoilValueLoadable()</code>类似，但<code>noWait</code>是一个<code>selector</code>不是钩子函数</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { noWait, RecoilRoot, selector, useRecoilValue } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> msgSelector = selector({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;msgSelector&#x27;</span>,\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-keyword\">async</span> () =&gt; {\n        <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> {\n            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> resolve(<span class=\"hljs-string\">&#x27;Hello&#x27;</span>), <span class=\"hljs-number\">2000</span>);\n        });\n\n        <span class=\"hljs-keyword\">return</span> data;\n    }\n});\n\n<span class=\"hljs-keyword\">const</span> Msg = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> msgLoadable = useRecoilValue(noWait(msgSelector));\n\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">hasValue</span>: <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{msgLoadable.contents}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>,\n        loading: <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>,\n        hasError: <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>erro:{msgLoadable.contents}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    }[msgLoadable.state];\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Msg</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"waitfroall\">waitFroAll()</h2>\n<p>并发计算多个异步依赖项的并发<code>helper</code>方法，即：可用于并发请求数据。接收一个数组或者对象。</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { RecoilRoot, selector, useRecoilValueLoadable, waitForAll } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> userSelector = selector({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;userSelector&#x27;</span>,\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-keyword\">async</span> () =&gt; {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;user start&#x27;</span>);\n        <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span>\n            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> resolve({ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;codebook&#x27;</span> }), <span class=\"hljs-number\">2000</span>)\n        );\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;user end&#x27;</span>);\n        <span class=\"hljs-keyword\">return</span> data;\n    }\n});\n\n<span class=\"hljs-keyword\">const</span> listSelector = selector({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;listSelector&#x27;</span>,\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-keyword\">async</span> () =&gt; {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;list start&#x27;</span>);\n        <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> resolve([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]), <span class=\"hljs-number\">2500</span>));\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;list end&#x27;</span>);\n        <span class=\"hljs-keyword\">return</span> data;\n    }\n});\n\n<span class=\"hljs-keyword\">const</span> Msg = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { state, contents } = useRecoilValueLoadable(waitForAll([userSelector, listSelector]));\n\n    <span class=\"hljs-keyword\">switch</span> (state) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;hasValue&#x27;</span>:\n            <span class=\"hljs-keyword\">const</span> [user, list] = contents;\n            <span class=\"hljs-keyword\">return</span> (\n                <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>用户名：{user.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>列表数据：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                    {list.map((item) =&gt; (\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{item}</span>&gt;</span>{item}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                    ))}\n                <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n            );\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;loading&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;hasError&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>error: {contents}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n    }\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Msg</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"waitforallsettled\">waitForAllSettled</h2>\n<p>并发计算多个异步依赖项的并发<code>helper</code>方法，即：可用于并发请求数据。接收一个数组或者对象。一直等待，直到有一个成功返回。</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { RecoilRoot, selector, useRecoilValueLoadable, waitForAllSettled } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> userSelector = selector({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;userSelector&#x27;</span>,\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-keyword\">async</span> () =&gt; {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;user start&#x27;</span>);\n        <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span>\n            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> resolve({ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;codebook&#x27;</span> }), <span class=\"hljs-number\">2000</span>)\n        );\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;user end&#x27;</span>);\n        <span class=\"hljs-keyword\">return</span> data;\n    }\n});\n\n<span class=\"hljs-keyword\">const</span> listSelector = selector({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;listSelector&#x27;</span>,\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-keyword\">async</span> () =&gt; {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;list start&#x27;</span>);\n            <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> <span class=\"hljs-built_in\">setTimeout</span>(reject, <span class=\"hljs-number\">3000</span>));\n            <span class=\"hljs-keyword\">return</span> data;\n        } <span class=\"hljs-keyword\">finally</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;list end&#x27;</span>);\n        }\n    }\n});\n\n<span class=\"hljs-keyword\">const</span> Msg = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { state, contents } = useRecoilValueLoadable(\n        waitForAllSettled([userSelector, listSelector])\n    );\n\n    <span class=\"hljs-keyword\">switch</span> (state) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;hasValue&#x27;</span>:\n            <span class=\"hljs-keyword\">const</span> [{ <span class=\"hljs-attr\">contents</span>: user }, { <span class=\"hljs-attr\">contents</span>: list }] = contents; <span class=\"hljs-comment\">// =&gt; user: {id:1,name:&#x27;codebook} list: undefined</span>\n            <span class=\"hljs-keyword\">return</span> (\n                <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>用户名：{user.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>列表数据：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                    {list?.map((item) =&gt; (\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{item}</span>&gt;</span>{item}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                    ))}\n                <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n            );\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;loading&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;hasError&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>error: {contents}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n    }\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Msg</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"waitfornone\">waitForNone()</h2>\n<p>并发计算多个异步依赖项的并发<code>helper</code>方法，即：可用于并发请求数据。接收一个数组或者对象。与<code>waitForAll</code>类似，区别在于<code>waitForNone</code>会立即为每个依赖返回一个<code>Loadable</code>，而不是直接返回值</p>\n<h2 id=\"waitforany\">waitForAny()</h2>\n<p>并发计算多个异步依赖项的并发<code>helper</code>方法，即：可用于并发请求数据。接收一个数组或者对象。一直等待，直到有一个成功返回</p>\n<h2 id=\"userecoilcallback\">useRecoilCallback</h2>\n<p>类似<code>useCallback</code>,这个回调可以访问<code>Recoil</code>状态的只读<code>Snapshot</code>，并且能够异步更新当前的<code>Recoil</code>状态。使用场景：</p>\n<ul>\n<li>异步读取<code>Recoil</code>状态，而无需订阅<code>React</code>组件在<code>atom</code>或<code>selector</code>更新时重新渲染</li>\n<li>把昂贵的查询延迟到一个你不想在渲染时执行的异步操作</li>\n<li>在你想读取 或写入<code>Recoil</code>状态的地方执行副作用</li>\n<li>动态更新一个<code>atom</code>或<code>selector</code>，可能并不知道在渲染时要更新哪个<code>atom</code>或<code>selector</code>，所以不能使用<code>useRecoilState()</code></li>\n<li><code>Pre-fetching</code>渲染前的数据</li>\n</ul>\n<p>接收参数和<code>useCallback</code>一样，包括传入空数组只在初始化后执行一次，传入依赖项，当依赖项发生变化，重新执行。\n<br /></p>\n<p>回调函数的参数：</p>\n<ul>\n<li><code>snapshot</code>：<code>Snapshot</code>提供一个只读的<code>Recoil atom</code>状态</li>\n<li><code>gotoSnapshot</code>：更新全局状态以匹配提供的<code>Snapshot</code></li>\n<li><code>set</code>：设置<code>atom</code>或<code>selector</code>的值</li>\n<li><code>reset</code>：重置<code>atom</code>或<code>selector</code>的值</li>\n</ul>\n"}