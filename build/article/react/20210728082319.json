{"title":"React的高级指引","slug":"react","time":"2021-07-28T08:24:03.000Z","author":"renzp94","status":"done","html":"<h2 id=\"context\">Context</h2>\n<p><code>Context</code>用于多层次组件共享数据</p>\n<ul>\n<li><code>React.createContext</code>：创建一个<code>Context</code>对象，可接受一个参数作为默认值，当组件所处的树没有<code>Provider</code>时，<code>defaultValue</code>才会生效</li>\n<li><code>Context.Provider</code>：每个<code>Context</code>对象都会返回一个<code>Provider</code>组件，它允许消费组件订阅<code>context</code>的变化，<code>Provider</code>组件接受一个<code>value</code>属性，用于传递给消费组件。多个<code>Porvider</code>嵌套使用，里层的会覆盖外层的数据</li>\n<li><code>Context.Consumer</code>：订阅<code>context</code>的变更</li>\n</ul>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { createContext, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">interface</span> IProvider {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">number</span>;\n    onDec: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n    onAdd: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n}\n<span class=\"hljs-keyword\">const</span> { Provider, Consumer } = createContext&lt;IProvider | <span class=\"hljs-literal\">null</span>&gt;(<span class=\"hljs-literal\">null</span>);\n\n<span class=\"hljs-keyword\">const</span> Counter = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Consumer</span>&gt;</span>{(provider) =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{provider?.count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Consumer</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">const</span> CountButton = <span class=\"hljs-function\">(<span class=\"hljs-params\">props: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Consumer</span>&gt;</span>\n            {(provider) =&gt; (\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{props.type</span> === <span class=\"hljs-string\">&#x27;dec&#x27;</span> ? <span class=\"hljs-attr\">provider</span>?<span class=\"hljs-attr\">.onDec</span> <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">provider</span>?<span class=\"hljs-attr\">.onAdd</span>}&gt;</span>\n                    {props.children}\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            )}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Consumer</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">const</span> provider = {\n        count,\n        <span class=\"hljs-attr\">onDec</span>: <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count - <span class=\"hljs-number\">1</span>),\n        <span class=\"hljs-attr\">onAdd</span>: <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count + <span class=\"hljs-number\">1</span>)\n    };\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{provider}</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CountButton</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;dec&quot;</span>&gt;</span>-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CountButton</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Counter</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CountButton</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;add&quot;</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CountButton</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Provider</span>&gt;</span></span>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<blockquote>\n<p>简单理解：通过<code>createContext</code>创建一个<code>Context</code>对象，<code>Context</code>对象包含两个组件：<code>Porvider</code>和<code>Consumer</code>。<code>Provider</code>接收一个<code>value</code>属性用于设置共享的数据，将<code>Provider</code>包裹需要共享的组件。<code>Consumer</code>组件是用来获取共享数据的，通过<code>Consumer</code>包裹一个函数，函数第一个参数就是共享的数据，函数返回一个渲染内容。</p>\n</blockquote>\n<h3 id=\"contextcontexttype\">Context.contextType</h3>\n<blockquote>\n<p>当需要使用共享数据时需要使用<code>Consumer</code>组件包裹，也可通过<code>Context.contextType</code>直接使用共享数据，这样就可以不使用<code>Consumer</code>组件了。<code>Context.contextType</code>只适用<code>class</code>形式的组件且只适用单一<code>Context</code></p>\n</blockquote>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span>, { <span class=\"hljs-type\">Component</span>, createContext } from <span class=\"hljs-symbol\">&#x27;reac</span>t&#x27;;\n\ninterface <span class=\"hljs-type\">IProvider</span> {\n    count: number;\n    onDec: () =&gt; void;\n    onAdd: () =&gt; void;\n}\nconst context = createContext&lt;<span class=\"hljs-type\">IProvider</span> | <span class=\"hljs-literal\">null</span>&gt;(<span class=\"hljs-literal\">null</span>);\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Counter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-comment\">// static contextType = context</span>\n\n    render() {\n        <span class=\"hljs-keyword\">return</span> &lt;span&gt;{<span class=\"hljs-keyword\">this</span>.context.count}&lt;/span&gt;;\n    }\n}\n\n<span class=\"hljs-type\">Counter</span>.contextType = context;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CounterButton</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-comment\">// static contextType = context</span>\n\n    render() {\n        <span class=\"hljs-keyword\">return</span> (\n            &lt;button onClick={<span class=\"hljs-keyword\">this</span>.props.<span class=\"hljs-keyword\">type</span> === <span class=\"hljs-symbol\">&#x27;de</span>c&#x27; ? <span class=\"hljs-keyword\">this</span>.context.onDec : <span class=\"hljs-keyword\">this</span>.context.onAdd}&gt;\n                {<span class=\"hljs-keyword\">this</span>.props.children}\n            &lt;/button&gt;\n        );\n    }\n}\n\n<span class=\"hljs-type\">CounterButton</span>.contextType = context;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    constructor(props: any) {\n        <span class=\"hljs-keyword\">super</span>(props);\n        <span class=\"hljs-keyword\">this</span>.state = { count: <span class=\"hljs-number\">0</span> };\n    }\n\n    onDec = () =&gt; <span class=\"hljs-keyword\">this</span>.setState((state) =&gt; ({ count: state.count - <span class=\"hljs-number\">1</span> }));\n    onAdd = () =&gt; <span class=\"hljs-keyword\">this</span>.setState((state) =&gt; ({ count: state.count + <span class=\"hljs-number\">1</span> }));\n\n    render() {\n        const provider: <span class=\"hljs-type\">IProvider</span> = {\n            count: <span class=\"hljs-keyword\">this</span>.state.count,\n            onDec: <span class=\"hljs-keyword\">this</span>.onDec,\n            onAdd: <span class=\"hljs-keyword\">this</span>.onAdd\n        };\n\n        <span class=\"hljs-keyword\">return</span> (\n            &lt;context.<span class=\"hljs-type\">Provider</span> value={provider}&gt;\n                &lt;<span class=\"hljs-type\">CounterButton</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span></span>=<span class=\"hljs-string\">&quot;dec&quot;</span>&gt;-&lt;/<span class=\"hljs-type\">CounterButton</span>&gt;\n                &lt;<span class=\"hljs-type\">Counter</span> /&gt;\n                &lt;<span class=\"hljs-type\">CounterButton</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span></span>=<span class=\"hljs-string\">&quot;add&quot;</span>&gt;+&lt;/<span class=\"hljs-type\">CounterButton</span>&gt;\n            &lt;/context.<span class=\"hljs-type\">Provider</span>&gt;\n        );\n    }\n}\n\nexport <span class=\"hljs-keyword\">default</span> <span class=\"hljs-type\">App</span>;\n</code></pre>\n<blockquote>\n<p>通过<code>class.contextType</code>指定<code>Context</code>对象，或者使用<code>static contextType</code>指定，注意：<code>static contextType</code>是实验性的<code>public class fields 语法</code></p>\n</blockquote>\n<h3 id=\"contextdisplayname\">Context.displayName</h3>\n<blockquote>\n<p>此属性是用于指定<code>React DevTools</code>显示的内容</p>\n</blockquote>\n<h3 id=\"refs-转发\">Refs 转发</h3>\n<blockquote>\n<p>通过<code>ref</code>可以访问<code>DOM</code>元素，但对于组件来说，组件指定的<code>ref</code>参数不能指定到某个内部元素，如果需要通过<code>ref</code>转发，即：通过<code>React.forwardRef</code>包装一下</p>\n</blockquote>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { forwardRef, useEffect, useRef, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> Counter = forwardRef(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, ref</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount((count) =&gt; count - 1)}&gt;-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{ref}</span>&gt;</span>{count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount((count) =&gt; count + 1)}&gt;+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n});\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> ref = useRef(<span class=\"hljs-literal\">null</span>);\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(ref), []);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Counter</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{ref}</span> /&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<blockquote>\n<p>当用在高阶组件时，可将<code>ref</code>通过一个属性，如：<code>forwardedRef</code>来传递到高阶组件内，然后通过<code>forwardedRef</code>再指定到实际的组件上</p>\n</blockquote>\n<h2 id=\"fragments\">Fragments</h2>\n<blockquote>\n<p>在<code>React</code>中组件比如由一个根元素包裹，有时并不需要根元素包裹，想返回多个元素时，可以通过<code>React.Fragments</code>包裹，在渲染时不会渲染，短语法为<code>&lt;&gt;&lt;/&gt;</code></p>\n</blockquote>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { Fragment } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// return (</span>\n    <span class=\"hljs-comment\">//   &lt;Fragment&gt;</span>\n    <span class=\"hljs-comment\">//     &lt;div&gt;1&lt;/div&gt;</span>\n    <span class=\"hljs-comment\">//     &lt;div&gt;2&lt;/div&gt;</span>\n    <span class=\"hljs-comment\">//   &lt;/Fragment&gt;</span>\n    <span class=\"hljs-comment\">// )</span>\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"高阶组件\">高阶组件</h2>\n<p>接受一个组件，返回一个新的组件便称这个组件是<code>高阶组件</code>。</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> Counter = <span class=\"hljs-function\">(<span class=\"hljs-params\">Component: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">const</span> onDec = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count + <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onDec}</span>&gt;</span>-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Component</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">{count}</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onAdd}</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">const</span> CounterInfo = <span class=\"hljs-function\">(<span class=\"hljs-params\">props: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{props.count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> Counter(CounterInfo);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n"}