{"title":"React状态管理：Recoil","slug":"react store","time":"2021-08-10T22:55:16.000Z","author":"renzp94","status":"done","html":"<p>在<code>React</code>中有时需要不同层级的组件状态共享，虽然<code>context</code>可以实现，但在比较复杂的场景中有点乏力，所以慢慢的变出现了状态管理，比较常用的状态管理库有：<code>Redux</code>、<code>mobx</code>。但这些库其实都是第三方维护，在<code>React Europe 2020 Conference</code>上，<code>Facebook</code>开源了一款状态管理<code>Recoil</code>。</p>\n<h2 id=\"特点\">特点</h2>\n<ul>\n<li><code>极简的React设计风格</code>：拥有与<code>React</code>一样的工作方式与原理。将其添加到应用中可获取快速、灵活的状态共享</li>\n<li><code>数据流图</code>：针对派生数据(Derived data)和异步查询采用纯函数以及高效订阅的方式进行处理</li>\n<li><code>应用程序全局监听</code>：通过监听应用程序中所有状态的变化来实现持久化存储，路由，时间旅行调试或撤销，并且不会影响代码分割</li>\n</ul>\n<h2 id=\"安装\">安装</h2>\n<pre><code class=\"language-bash\">npm install recoil <span class=\"hljs-regexp\">//</span> or yarn add recoil\n</code></pre>\n<h2 id=\"核心概念\">核心概念</h2>\n<p><code>Recoil</code>创建一个数据流有向图，状态的变化从该图的顶点(<code>atom(共享状态)</code>)开始，流经<code>selector(纯函数)</code>，再流向<code>React</code>组件。<code>Atom</code>是组件可以订阅的<code>state</code>，<code>selector</code>可以同步或异步改变此<code>state</code>。可以大概想象一下，数据流形成的向图：一个<code>atom</code>被多个组件订阅，则此<code>atom</code>指向每个组件，第二个也被多个组件订阅，则第二个<code>atom</code>也指向多个组件，这两个<code>atom</code>的被订阅组件可能是同一个，也可能不是同一个，则便形成了<code>atom</code>指向多个组件的交叉向图。</p>\n<p><code>Recoil</code>的概念很少，只有<code>Atom</code>和<code>Selector</code>，下面依次了解一下</p>\n<h2 id=\"atom\">Atom</h2>\n<p><code>Atom</code>是状态的单位，可以更新也可订阅，当<code>atom</code>被更新，每个被订阅的组件都会用新值重新渲染。可用<code>atom</code>来代替组件内部状态，当多个组件使用相同的<code>atom</code>，则这些组件共享<code>atom</code>的状态。</p>\n<h3 id=\"创建\">创建</h3>\n<p><code>Atom</code>由<code>Recoil.atom</code>函数创建，接收一个对象：</p>\n<ul>\n<li><code>key</code>：标识当前<code>atom</code>的唯一<code>key</code>值，请记住：<code>key</code>需要保持全局唯一</li>\n<li><code>default</code>：默认值</li>\n<li><code>dangerouslyAllowMutability</code>：设置允许<code>atom</code>中的对象可变，对象变化不代表<code>status</code>的变化</li>\n</ul>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { atom } from <span class=\"hljs-symbol\">&#x27;recoil</span>\nconst countState = atom({\n    key:<span class=\"hljs-symbol\">&#x27;coun</span>t&#x27;,\n    <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-number\">0</span>\n})\n</code></pre>\n<h3 id=\"使用\">使用</h3>\n<p>创建的<code>atom</code>不能直接使用，需要通过<code>Recoil</code>提供的<code>hook</code>来使用，比如：需要读写<code>atom</code>的状态值，则可以使用<code>Recoil.useRecoilState</code>函数</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { atom, RecoilRoot, useRecoilState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> countState = atom({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;count&#x27;</span>,\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>\n});\n\n<span class=\"hljs-keyword\">const</span> Counter = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [count, setCount] = useRecoilState(countState);\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount((count) =&gt; count - 1)}&gt;-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount((count) =&gt; count + 1)}&gt;+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Counter</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<blockquote>\n<p>注意：所有使用<code>Recoil</code>的组件需要使用<code>RecoilRoot</code>包裹</p>\n</blockquote>\n<p>上述例子和使用<code>useState</code>比起来似乎没有什么变化只是新创建了一个<code>countState</code>并通过<code>useRecoilState</code>使用，但是<code>countState</code>是可以多组件共享的，为了实现多组件共享，将上述代码改造一下。</p>\n<p><code>store/count.ts</code></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { atom } from <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\nexport <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-title\">atom</span><span class=\"hljs-params\">({\n    key: <span class=\"hljs-string\">&#x27;count&#x27;</span>,\n    <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-number\">0</span>\n})</span></span>;\n</code></pre>\n<p><code>components/Count/index.tsx</code></p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { useRecoilValue } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> coutnState <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../store/count&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> Count = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> count = useRecoilValue(coutnState);\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Count;\n</code></pre>\n<p><code>components/Count/CountButton.tsx</code></p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { useSetRecoilState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> coutnState <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../store/count&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> CountButton = <span class=\"hljs-function\">(<span class=\"hljs-params\">props: { <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-built_in\">string</span> }</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> setCount = useSetRecoilState(coutnState);\n    <span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count + <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">const</span> onDec = <span class=\"hljs-function\">() =&gt;</span> setCount(<span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> count - <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">const</span> text = props.type === <span class=\"hljs-string\">&#x27;add&#x27;</span> ? <span class=\"hljs-string\">&#x27;+&#x27;</span> : <span class=\"hljs-string\">&#x27;-&#x27;</span>;\n    <span class=\"hljs-keyword\">const</span> onClick = props.type === <span class=\"hljs-string\">&#x27;add&#x27;</span> ? onAdd : onDec;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>&gt;</span>{text}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> CountButton;\n</code></pre>\n<p><code>App.tsx</code></p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { RecoilRoot } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> Count <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Count&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> CountButton <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Count/CountButton&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CountButton</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;dec&quot;</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Count</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CountButton</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;add&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<p>通过改造的代码之后，可以看出只要使用<code>Recoil</code>用于状态管理是多么简单</p>\n<h2 id=\"selector\">Selector</h2>\n<p><code>Selector</code>是一个纯函数，入参是<code>atom</code>或<code>selector</code>。当传入的<code>atom</code>或<code>selector</code>更新时，将会重新执行<code>selector</code>函数重新渲染组件，类似<code>Vue</code>中的<code>compoted</code>。一般被用于计算基于<code>state</code>的派生数据，可避免冗余的<code>state</code>。</p>\n<h3 id=\"创建-1\">创建</h3>\n<p><code>Selector</code>由<code>Recoil.selector</code>创建，接收一个对象：</p>\n<ul>\n<li><code>key</code>：同<code>atom</code>的<code>key</code></li>\n<li><code>get</code>：用于计算的函数，接收一个对象，对象中有一个<code>get</code>函数用于获取其他的<code>atom</code>或<code>selector</code>的值</li>\n</ul>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { atom, RecoilRoot, selector, useRecoilState, useRecoilValue } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> countState = atom({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;count&#x27;</span>,\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>\n});\n\n<span class=\"hljs-keyword\">const</span> doubleCountSelector = selector({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;doubleCount&#x27;</span>,\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">{ get }</span>) =&gt;</span> get(countState) * <span class=\"hljs-number\">2</span>\n});\n\n<span class=\"hljs-keyword\">const</span> Count = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [count, setCount] = useRecoilState(countState);\n    <span class=\"hljs-keyword\">const</span> doubleCount = useRecoilValue(doubleCountSelector);\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount((count) =&gt; count - 1)}&gt;-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>count: {count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount((count) =&gt; count + 1)}&gt;+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>double count: {doubleCount}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Count</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<p>上述只是<code>Selector</code>的基础用法，还有更多的<code>Selector</code>用法，比如<code>set</code>，异步<code>Selector</code>，此文章只是先简单了解一下<code>Recoil</code>。</p>\n"}