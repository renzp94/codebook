{"title":"React Native常见问题","slug":"react","time":"2021-07-03T18:31:24.000Z","author":"renzp94","status":"done","html":"<h2 id=\"连接真机或模拟器调试\">连接真机或模拟器调试</h2>\n<h3 id=\"输入命令查看可用设备adb-devices，出现xxx-device即可\">输入命令查看可用设备<code>adb devices</code>，出现<code>xxx device</code>即可</h3>\n<pre><code class=\"language-bash\">&gt; adb devices\n\nadb server <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">out of</span> <span class=\"hljs-built_in\">date</span>.  killing...\n* daemon started successfully *\nList <span class=\"hljs-keyword\">of</span> devices attached\nfed54da device\n</code></pre>\n<h2 id=\"-what-went-wrong-could-not-determine-the-dependencies-of-task-appinstalldebug--failed-to-find-build-tools-revision-2902\">* What went wrong: Could not determine the dependencies of task &#39;:app:installDebug&#39;. &gt; Failed to find Build Tools revision 29.0.2</h2>\n<p>此问题是因为打包使用的<code>Android SDK</code>和当前电脑上的不一致，当前电脑的版本可通过<code>Android Studio</code>查看或者有<code>Flutter</code>环境可直接在命令行输入<code>Flutter doctor</code>查看。</p>\n<h3 id=\"得到android-sdk版本号之后，修改androidbuildgradle文件，修改如下\">得到<code>Android SDK</code>版本号之后，修改<code>android/build.gradle</code>文件，修改如下</h3>\n<pre><code class=\"language-diff\"><span class=\"hljs-comment\">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span>\n\n<span class=\"hljs-variable\">buildscript</span> {\n    <span class=\"hljs-variable\">ext</span> {\n-        <span class=\"hljs-variable\">buildToolsVersion</span> = <span class=\"hljs-string\">&quot;29.0.3&quot;</span>\n+        <span class=\"hljs-variable\">buildToolsVersion</span> = <span class=\"hljs-string\">&quot;30.0.3&quot;</span>\n        <span class=\"hljs-variable\">minSdkVersion</span> = <span class=\"hljs-number\">21</span>\n-        <span class=\"hljs-variable\">compileSdkVersion</span> = <span class=\"hljs-number\">29</span>\n-        <span class=\"hljs-variable\">targetSdkVersion</span> = <span class=\"hljs-number\">29</span>\n+        <span class=\"hljs-variable\">compileSdkVersion</span> = <span class=\"hljs-number\">30</span>\n+        <span class=\"hljs-variable\">targetSdkVersion</span> = <span class=\"hljs-number\">30</span>\n        <span class=\"hljs-variable\">ndkVersion</span> = <span class=\"hljs-string\">&quot;20.1.5948944&quot;</span>\n    }\n    <span class=\"hljs-variable\">repositories</span> {\n        <span class=\"hljs-function\"><span class=\"hljs-title\">google</span>()</span>\n        <span class=\"hljs-function\"><span class=\"hljs-title\">jcenter</span>()</span>\n    }\n    <span class=\"hljs-variable\">dependencies</span> {\n        <span class=\"hljs-function\"><span class=\"hljs-title\">classpath</span>(<span class=\"hljs-string\">&quot;com.android.tools.build:gradle:4.1.0&quot;</span>)</span>\n        <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE</span>: Do not place your application dependencies here; they belong</span>\n        <span class=\"hljs-comment\">// in the individual module build.gradle files</span>\n    }\n}\n\n<span class=\"hljs-variable\">allprojects</span> {\n    <span class=\"hljs-variable\">repositories</span> {\n        <span class=\"hljs-function\"><span class=\"hljs-title\">mavenLocal</span>()</span>\n        <span class=\"hljs-variable\">maven</span> {\n            <span class=\"hljs-comment\">// All of React Native (JS, Obj-C sources, Android binaries) is installed from npm</span>\n            <span class=\"hljs-function\"><span class=\"hljs-title\">url</span>(<span class=\"hljs-string\">&quot;$rootDir/../node_modules/react-native/android&quot;</span>)</span>\n        }\n        <span class=\"hljs-variable\">maven</span> {\n            <span class=\"hljs-comment\">// Android JSC is installed from npm</span>\n            <span class=\"hljs-function\"><span class=\"hljs-title\">url</span>(<span class=\"hljs-string\">&quot;$rootDir/../node_modules/jsc-android/dist&quot;</span>)</span>\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-title\">google</span>()</span>\n        <span class=\"hljs-function\"><span class=\"hljs-title\">jcenter</span>()</span>\n        <span class=\"hljs-variable\">maven</span> { <span class=\"hljs-variable\">url</span> <span class=\"hljs-string\">&#x27;https://www.jitpack.io&#x27;</span> }\n    }\n}\n</code></pre>\n<h3 id=\"然后再修改androidappbuildgradle，修改如下：\">然后再修改<code>android/app/build.gradle</code>，修改如下：</h3>\n<pre><code class=\"language-diff\">apply plugin: <span class=\"hljs-string\">&quot;com.android.application&quot;</span>\n\n<span class=\"hljs-keyword\">import</span> com.android.build.OutputFile\n\n<span class=\"hljs-comment\">/**\n * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets\n * and bundleReleaseJsAndAssets).\n * These basically call `react-native bundle` with the correct arguments during the Android build\n * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the\n * bundle directly from the development server. Below you can see all the possible configurations\n * and their defaults. If you decide to add a configuration block, make sure to add it before the\n * `apply from: &quot;../../node_modules/react-native/react.gradle&quot;` line.\n *\n * project.ext.react = [\n *   // the name of the generated asset file containing your JS bundle\n *   bundleAssetName: &quot;index.android.bundle&quot;,\n *\n *   // the entry file for bundle generation. If none specified and\n *   // &quot;index.android.js&quot; exists, it will be used. Otherwise &quot;index.js&quot; is\n *   // default. Can be overridden with ENTRY_FILE environment variable.\n *   entryFile: &quot;index.android.js&quot;,\n *\n *   // https://reactnative.dev/docs/performance#enable-the-ram-format\n *   bundleCommand: &quot;ram-bundle&quot;,\n *\n *   // whether to bundle JS and assets in debug mode\n *   bundleInDe<span class=\"hljs-doctag\">bug:</span> false,\n *\n *   // whether to bundle JS and assets in release mode\n *   bundleInRelease: true,\n *\n *   // whether to bundle JS and assets in another build variant (if configured).\n *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants\n *   // The configuration property can be in the following formats\n *   //         &#x27;bundleIn${productFlavor}${buildType}&#x27;\n *   //         &#x27;bundleIn${buildType}&#x27;\n *   // bundleInFreeDe<span class=\"hljs-doctag\">bug:</span> true,\n *   // bundleInPaidRelease: true,\n *   // bundleInBeta: true,\n *\n *   // whether to disable dev mode in custom build variants (by default only disabled in release)\n *   // for example: to disable dev mode in the staging build type (if configured)\n *   devDisabledInStaging: true,\n *   // The configuration property can be in the following formats\n *   //         &#x27;devDisabledIn${productFlavor}${buildType}&#x27;\n *   //         &#x27;devDisabledIn${buildType}&#x27;\n *\n *   // the root of your project, i.e. where &quot;package.json&quot; lives\n *   root: &quot;../../&quot;,\n *\n *   // where to put the JS bundle asset in debug mode\n *   jsBundleDirDe<span class=\"hljs-doctag\">bug:</span> &quot;$buildDir/intermediates/assets/debug&quot;,\n *\n *   // where to put the JS bundle asset in release mode\n *   jsBundleDirRelease: &quot;$buildDir/intermediates/assets/release&quot;,\n *\n *   // where to put drawable resources / React Native assets, e.g. the ones you use via\n *   // require(&#x27;./image.png&#x27;)), in debug mode\n *   resourcesDirDe<span class=\"hljs-doctag\">bug:</span> &quot;$buildDir/intermediates/res/merged/debug&quot;,\n *\n *   // where to put drawable resources / React Native assets, e.g. the ones you use via\n *   // require(&#x27;./image.png&#x27;)), in release mode\n *   resourcesDirRelease: &quot;$buildDir/intermediates/res/merged/release&quot;,\n *\n *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means\n *   // that we don&#x27;t look at files in android/ or ios/ to determine whether the tasks are up to\n *   // date; if you have any other folders that you want to ignore for performance reasons (gradle\n *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/\n *   // for example, you might want to remove it from here.\n *   inputExcludes: [&quot;android/**&quot;, &quot;ios/**&quot;],\n *\n *   // override which node gets called and with what additional arguments\n *   nodeExecutableAndArgs: [&quot;node&quot;],\n *\n *   // supply additional arguments to the packager\n *   extraPackagerArgs: []\n * ]\n */</span>\n\n<span class=\"hljs-keyword\">project</span>.ext.react = [\n    enableHermes: <span class=\"hljs-keyword\">false</span>,  <span class=\"hljs-comment\">// clean and rebuild if changing</span>\n]\n\napply <span class=\"hljs-keyword\">from</span>: <span class=\"hljs-string\">&quot;../../node_modules/react-native/react.gradle&quot;</span>\n\n<span class=\"hljs-comment\">/**\n * Set this to true to create two separate APKs instead of one:\n *   - An APK that only works on ARM devices\n *   - An APK that only works on x86 devices\n * The advantage is the size of the APK is reduced by about 4MB.\n * Upload all the APKs to the Play Store and people will download\n * the correct one based on the CPU architecture of their device.\n */</span>\n<span class=\"hljs-keyword\">def</span> enableSeparateBuildPerCPUArchitecture = <span class=\"hljs-keyword\">false</span>\n\n<span class=\"hljs-comment\">/**\n * Run Proguard to shrink the Java bytecode in release builds.\n */</span>\n<span class=\"hljs-keyword\">def</span> enableProguardInReleaseBuilds = <span class=\"hljs-keyword\">false</span>\n\n<span class=\"hljs-comment\">/**\n * The preferred build flavor of JavaScriptCore.\n *\n * For example, to use the international variant, you can use:\n * `def jscFlavor = &#x27;org.webkit:android-jsc-intl:+&#x27;`\n *\n * The international variant includes ICU i18n library and necessary data\n * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that\n * give correct results when using with locales other than en-US.  Note that\n * this variant is about 6MiB larger per architecture than default.\n */</span>\n<span class=\"hljs-keyword\">def</span> jscFlavor = <span class=\"hljs-string\">&#x27;org.webkit:android-jsc:+&#x27;</span>\n\n<span class=\"hljs-comment\">/**\n * Whether to enable the Hermes VM.\n *\n * This should be set on project.ext.react and mirrored here.  If it is not set\n * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode\n * and the benefits of using Hermes will therefore be sharply reduced.\n */</span>\n<span class=\"hljs-keyword\">def</span> enableHermes = <span class=\"hljs-keyword\">project</span>.ext.react.get(<span class=\"hljs-string\">&quot;enableHermes&quot;</span>, <span class=\"hljs-keyword\">false</span>);\n\nandroid {\n    ndkVersion rootProject.ext.ndkVersion\n\n    compileSdkVersion rootProject.ext.compileSdkVersion\n+    buildToolsVersion rootProject.ext.buildToolsVersion\n\n    compileOptions {\n        <span class=\"hljs-keyword\">sourceCompatibility</span> JavaVersion.VERSION_1_8\n        <span class=\"hljs-keyword\">targetCompatibility</span> JavaVersion.VERSION_1_8\n    }\n\n    defaultConfig {\n        applicationId <span class=\"hljs-string\">&quot;com.rn_demo&quot;</span>\n        minSdkVersion rootProject.ext.minSdkVersion\n        targetSdkVersion rootProject.ext.targetSdkVersion\n        versionCode <span class=\"hljs-number\">1</span>\n        versionName <span class=\"hljs-string\">&quot;1.0&quot;</span>\n    }\n    splits {\n        abi {\n            reset()\n            enable enableSeparateBuildPerCPUArchitecture\n            universalApk <span class=\"hljs-keyword\">false</span>  <span class=\"hljs-comment\">// If true, also generate a universal APK</span>\n            <span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;armeabi-v7a&quot;</span>, <span class=\"hljs-string\">&quot;x86&quot;</span>, <span class=\"hljs-string\">&quot;arm64-v8a&quot;</span>, <span class=\"hljs-string\">&quot;x86_64&quot;</span>\n        }\n    }\n    signingConfigs {\n        debug {\n            storeFile <span class=\"hljs-keyword\">file</span>(<span class=\"hljs-string\">&#x27;debug.keystore&#x27;</span>)\n            storePassword <span class=\"hljs-string\">&#x27;android&#x27;</span>\n            keyAlias <span class=\"hljs-string\">&#x27;androiddebugkey&#x27;</span>\n            keyPassword <span class=\"hljs-string\">&#x27;android&#x27;</span>\n        }\n    }\n    buildTypes {\n        debug {\n            signingConfig signingConfigs.debug\n        }\n        release {\n            <span class=\"hljs-comment\">// Caution! In production, you need to generate your own keystore file.</span>\n            <span class=\"hljs-comment\">// see https://reactnative.dev/docs/signed-apk-android.</span>\n            signingConfig signingConfigs.debug\n            minifyEnabled enableProguardInReleaseBuilds\n            proguardFiles getDefaultProguardFile(<span class=\"hljs-string\">&quot;proguard-android.txt&quot;</span>), <span class=\"hljs-string\">&quot;proguard-rules.pro&quot;</span>\n        }\n    }\n\n    <span class=\"hljs-comment\">// applicationVariants are e.g. debug, release</span>\n    applicationVariants.all { variant -&gt;\n        variant.outputs.<span class=\"hljs-keyword\">each</span> { output -&gt;\n            <span class=\"hljs-comment\">// For each separate APK per architecture, set a unique version code as described here:</span>\n            <span class=\"hljs-comment\">// https://developer.android.com/studio/build/configure-apk-splits.html</span>\n            <span class=\"hljs-comment\">// Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.</span>\n            <span class=\"hljs-keyword\">def</span> versionCodes = [<span class=\"hljs-string\">&quot;armeabi-v7a&quot;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;x86&quot;</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;arm64-v8a&quot;</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;x86_64&quot;</span>: <span class=\"hljs-number\">4</span>]\n            <span class=\"hljs-keyword\">def</span> abi = output.getFilter(OutputFile.ABI)\n            <span class=\"hljs-keyword\">if</span> (abi != <span class=\"hljs-keyword\">null</span>) {  <span class=\"hljs-comment\">// null for the universal-debug, universal-release variants</span>\n                output.versionCodeOverride =\n                        defaultConfig.versionCode * <span class=\"hljs-number\">1000</span> + versionCodes.get(abi)\n            }\n\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">dependencies</span> {\n    implementation <span class=\"hljs-keyword\">fileTree</span>(dir: <span class=\"hljs-string\">&quot;libs&quot;</span>, <span class=\"hljs-keyword\">include</span>: [<span class=\"hljs-string\">&quot;*.jar&quot;</span>])\n    <span class=\"hljs-comment\">//noinspection GradleDynamicVersion</span>\n    implementation <span class=\"hljs-string\">&quot;com.facebook.react:react-native:+&quot;</span>  <span class=\"hljs-comment\">// From node_modules</span>\n\n    implementation <span class=\"hljs-string\">&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.0.0&quot;</span>\n\n    debugImplementation(<span class=\"hljs-string\">&quot;com.facebook.flipper:flipper:${FLIPPER_VERSION}&quot;</span>) {\n      <span class=\"hljs-keyword\">exclude</span> <span class=\"hljs-keyword\">group</span>:<span class=\"hljs-string\">&#x27;com.facebook.fbjni&#x27;</span>\n    }\n\n    debugImplementation(<span class=\"hljs-string\">&quot;com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}&quot;</span>) {\n        <span class=\"hljs-keyword\">exclude</span> <span class=\"hljs-keyword\">group</span>:<span class=\"hljs-string\">&#x27;com.facebook.flipper&#x27;</span>\n        <span class=\"hljs-keyword\">exclude</span> <span class=\"hljs-keyword\">group</span>:<span class=\"hljs-string\">&#x27;com.squareup.okhttp3&#x27;</span>, module:<span class=\"hljs-string\">&#x27;okhttp&#x27;</span>\n    }\n\n    debugImplementation(<span class=\"hljs-string\">&quot;com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}&quot;</span>) {\n        <span class=\"hljs-keyword\">exclude</span> <span class=\"hljs-keyword\">group</span>:<span class=\"hljs-string\">&#x27;com.facebook.flipper&#x27;</span>\n    }\n\n    <span class=\"hljs-keyword\">if</span> (enableHermes) {\n        <span class=\"hljs-keyword\">def</span> hermesPath = <span class=\"hljs-string\">&quot;../../node_modules/hermes-engine/android/&quot;</span>;\n        debugImplementation files(hermesPath + <span class=\"hljs-string\">&quot;hermes-debug.aar&quot;</span>)\n        releaseImplementation files(hermesPath + <span class=\"hljs-string\">&quot;hermes-release.aar&quot;</span>)\n    } <span class=\"hljs-keyword\">else</span> {\n        implementation jscFlavor\n    }\n}\n\n<span class=\"hljs-comment\">// Run this once to be able to run the application with BUCK</span>\n<span class=\"hljs-comment\">// puts all compile dependencies into folder libs for BUCK to use</span>\n<span class=\"hljs-keyword\">task</span> copyDownloadableDepsToLibs(type: <span class=\"hljs-keyword\">Copy</span>) {\n    <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">configurations</span>.<span class=\"hljs-keyword\">compile</span>\n    <span class=\"hljs-keyword\">into</span> <span class=\"hljs-string\">&#x27;libs&#x27;</span>\n}\n\napply <span class=\"hljs-keyword\">from</span>: <span class=\"hljs-keyword\">file</span>(<span class=\"hljs-string\">&quot;../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle&quot;</span>); applyNativeModulesAppBuildGradle(<span class=\"hljs-keyword\">project</span>)\n</code></pre>\n<p>然后再次运行：<code>npm run android</code>即可成功。</p>\n"}