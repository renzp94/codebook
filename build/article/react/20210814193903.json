{"title":"React最佳实践","slug":"react","time":"2021-08-14T19:40:13.000Z","author":"renzp94","status":"done","html":"<p>尝试着使用<code>React</code>技术栈做一个后台管理系统，主要是为了探索<code>React</code>的最佳实践。用到的技术栈如下：</p>\n<ul>\n<li><code>vitejs</code>：下一代前端开发与构建工具，用于替代<code>create-react-app</code>脚手架</li>\n<li><code>React</code>：全部使用<code>hooks</code>开发</li>\n<li><code>react-router-dom</code>：路由</li>\n<li><code>react-router-config</code>：路由辅助库，用于集中配置路由</li>\n<li><code>recoil</code>：<code>Facebook</code>官方出品的状态管理，不是<code>React</code>团队出的，是<code>Facebook</code>官方</li>\n<li><code>antd</code>：阿里出的组件库，一般<code>React</code>技术栈做<code>pc</code>网站开发首选都是这个组件库</li>\n</ul>\n<h2 id=\"创建项目\">创建项目</h2>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-keyword\">create</span> @vitejs/app react-<span class=\"hljs-keyword\">admin</span> <span class=\"hljs-comment\">--template react-ts</span>\n</code></pre>\n<h2 id=\"配置eslint、prettier、stylelint\">配置<code>ESlint</code>、<code>Prettier</code>、<code>Stylelint</code></h2>\n<h3 id=\"配置eslint、prettier\">配置<code>ESlint</code>、<code>Prettier</code></h3>\n<h4 id=\"安装依赖\">安装依赖</h4>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-keyword\">add</span> -D eslint prettier eslint-config-prettier eslint-plugin-prettier <span class=\"hljs-title\">@typescript-eslint</span>/eslint-plugin <span class=\"hljs-title\">@typescript-eslint</span>/parser\n</code></pre>\n<h4 id=\"配置eslint\">配置<code>ESlint</code></h4>\n<p>在项目根目录下创建<code>.eslintrc.js</code>文件，内容如下：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-string\">module.exports</span> <span class=\"hljs-string\">=</span> {\n    <span class=\"hljs-attr\">parser:</span> <span class=\"hljs-string\">&#x27;@typescript-eslint/parser&#x27;</span>,\n    <span class=\"hljs-attr\">parserOptions:</span> {\n        <span class=\"hljs-attr\">parser:</span> <span class=\"hljs-string\">&#x27;@typescript-eslint/parser&#x27;</span>,\n        <span class=\"hljs-attr\">ecmaVersion:</span> <span class=\"hljs-number\">2020</span>,\n        <span class=\"hljs-attr\">sourceType:</span> <span class=\"hljs-string\">&#x27;module&#x27;</span>,\n        <span class=\"hljs-attr\">ecmaFeatures:</span> {\n            <span class=\"hljs-attr\">jsx:</span> <span class=\"hljs-literal\">true</span>\n        }\n    },\n    <span class=\"hljs-attr\">env:</span> {\n        <span class=\"hljs-attr\">node:</span> <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">es6:</span> <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">browser:</span> <span class=\"hljs-literal\">true</span>\n    },\n    <span class=\"hljs-attr\">extends:</span> [\n        <span class=\"hljs-string\">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,\n        <span class=\"hljs-string\">&#x27;plugin:prettier/recommended&#x27;</span>,\n        <span class=\"hljs-string\">&#x27;eslint:recommended&#x27;</span>\n    ]\n}<span class=\"hljs-string\">;</span>\n</code></pre>\n<h4 id=\"配置prettier\">配置<code>Prettier</code></h4>\n<p>在项目根目录下创建<code>.prettierrc</code>文件，内容如下：</p>\n<pre><code class=\"language-json\">{\n    <span class=\"hljs-attr\">&quot;semi&quot;</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">&quot;singleQuote&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">&quot;printWidth&quot;</span>: <span class=\"hljs-number\">100</span>,\n    <span class=\"hljs-attr\">&quot;tabWidth&quot;</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">&quot;endOfLine&quot;</span>: <span class=\"hljs-string\">&quot;auto&quot;</span>\n}\n</code></pre>\n<p>可根据自己的喜好自行配置规则</p>\n<h4 id=\"配置vscode\">配置<code>VSCODE</code></h4>\n<p>需要安装插件<code>ESlint</code>和<code>Prettier</code>并在设置中设置<code>Prettier</code>或在用户设置文件<code>settings.json</code>添加以下代码：</p>\n<pre><code class=\"language-json\">{\n    <span class=\"hljs-attr\">&quot;prettier.jsxSingleQuote&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">&quot;prettier.requireConfig&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">&quot;prettier.semi&quot;</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">&quot;prettier.singleQuote&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">&quot;prettier.arrowParens&quot;</span>: <span class=\"hljs-string\">&quot;avoid&quot;</span>,\n    <span class=\"hljs-attr\">&quot;prettier.endOfLine&quot;</span>: <span class=\"hljs-string\">&quot;auto&quot;</span>,\n    <span class=\"hljs-attr\">&quot;editor.formatOnSave&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">&quot;editor.codeActionsOnSave&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;source.fixAll.eslint&quot;</span>: <span class=\"hljs-literal\">true</span>\n    }\n}\n</code></pre>\n<p>其中，<code>editor.formatOnSave</code>表示是否在保存时执行格式化操作，<code>editor.codeActionsOnSave</code>表示在保存时执行的操作，其中<code>&quot;source.fixAll.eslint&quot;: true</code>表示自动修复，即：保存时自动修复错误格式</p>\n<h3 id=\"配置stylelint\">配置<code>Stylelint</code></h3>\n<h4 id=\"安装依赖-1\">安装依赖</h4>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-keyword\">add </span>-D stylelint stylelint-<span class=\"hljs-built_in\">config</span>-standard stylelint-<span class=\"hljs-keyword\">order </span>stylelint-<span class=\"hljs-built_in\">config</span>-property-sort-<span class=\"hljs-keyword\">order-smacss</span>\n</code></pre>\n<ul>\n<li><code>stylelint</code>：<code>stylelint</code>基础依赖</li>\n<li><code>stylelint-config-standard</code>：<code>stylelint</code>标准配置</li>\n<li><code>stylelint-order</code>：属性排序配置</li>\n<li><code>stylelint-config-property-sort-order-smacss</code>：基于<a href=\"http://smacss.com\">SMACSS</a>方法的属性排序的<code>Stylelint</code>配置。</li>\n</ul>\n<h4 id=\"配置stylelint-1\">配置<code>Stylelint</code></h4>\n<p>在项目根目录下创建<code>.stylelintrc</code>文件</p>\n<pre><code class=\"language-json\">{\n    <span class=\"hljs-attr\">&quot;extends&quot;</span>: [<span class=\"hljs-string\">&quot;stylelint-config-standard&quot;</span>, <span class=\"hljs-string\">&quot;stylelint-config-property-sort-order-smacss&quot;</span>],\n    <span class=\"hljs-attr\">&quot;plugins&quot;</span>: [<span class=\"hljs-string\">&quot;stylelint-order&quot;</span>]\n}\n</code></pre>\n<h4 id=\"配置vscode-1\">配置<code>VSCODE</code></h4>\n<p>安装插件<code>stylelint</code></p>\n<h4 id=\"常用忽略注释\">常用忽略注释</h4>\n<ul>\n<li><code>/* stylelint-disable */</code>：全文件关闭规则校验</li>\n<li><code>/* stylelint-disable-line */</code>：当前行关闭规则校验</li>\n<li><code>/* stylelint-disable-next-line */</code>：下一行关闭规则校验</li>\n</ul>\n<p>空格加规则可只关闭某个规则，规则列表用<code>,</code>隔开，如：<code>/* stylelint-disable selector-no-id, declaration-no-important */</code>。<code>.stylelintignore</code>文件可指定忽略的文件</p>\n<h2 id=\"配置husky和lint-staged\">配置<code>husky</code>和<code>lint-staged</code></h2>\n<p><code>husky</code>是一个增强<code>githook</code>的工具，可以添加<code>commit</code>钩子函数，帮助在提交时做一些验证，<code>lint-staged</code>过滤出暂存区文件</p>\n<h3 id=\"安装依赖-2\">安装依赖</h3>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-builtin-name\">add</span> -D husky lint-staged\n</code></pre>\n<blockquote>\n<p>注意：<code>husky@4.x</code>和<code>husky@7.x</code>配置有区别</p>\n</blockquote>\n<h3 id=\"配置husky\">配置<code>husky</code></h3>\n<p>在<code>package.json</code>的<code>scripts</code>中添加<code>&quot;prepare&quot;: &quot;husky install&quot;</code>，然后执行<code>npm run prepare</code>，会在根目录下生成<code>.husky</code>目录，然后执行<code>npx husky add .husky/pre-commit &quot;npx lint-staged&quot;</code>，则在<code>.husky</code>目录下会生成<code>pre-commit</code>。当执行<code>git commit</code>操作时会触发<code>npx lint-staged</code>命令</p>\n<h3 id=\"配置lint-staged\">配置<code>lint-staged</code></h3>\n<p>在项目根目录下创建<code>.lintstagedrc.js</code>文件，文件内容如下：</p>\n<pre><code class=\"language-js\">module.exports = {\n    <span class=\"hljs-symbol\">&#x27;src</span>/**/*.{js,jsx,ts,tsx,json,html}<span class=\"hljs-string\">&#x27;: [&#x27;</span>eslint&#x27;, <span class=\"hljs-symbol\">&#x27;prettier</span> --write&#x27;, <span class=\"hljs-symbol\">&#x27;git</span> add&#x27;],\n    <span class=\"hljs-symbol\">&#x27;src</span>/**/*.{css,less}<span class=\"hljs-string\">&#x27;: [&#x27;</span>stylelint --fix&#x27;, <span class=\"hljs-symbol\">&#x27;git</span> add&#x27;]\n};\n</code></pre>\n<h2 id=\"目录设计\">目录设计</h2>\n<ul>\n<li><code>@types</code>：与数据模型无关的<code>TS</code>的类型定义</li>\n<li><code>antd</code>：组件库<code>Antd</code>相关</li>\n<li><code>api</code>：后端接口的封装</li>\n<li><code>assets</code>：静态资源(样式、图片、字体)</li>\n<li><code>components</code>：通用的组件</li>\n<li><code>layouts</code>：布局相关的组件</li>\n<li><code>mocks</code>：<code>mock</code>数据</li>\n<li><code>models</code>：与数据模型相关的<code>TS</code>的类型定义</li>\n<li><code>pages</code>：页面相关的组件</li>\n<li><code>router</code>：路由相关</li>\n<li><code>store</code>：状态管理相关</li>\n<li><code>utils</code>：通用方法相关</li>\n</ul>\n<h3 id=\"设置目录别名\">设置目录别名</h3>\n<p>需要修改<code>tsconfig.json</code>和<code>vite.config.ts</code></p>\n<p><code>tsconfig.json</code></p>\n<pre><code class=\"language-diff\">{\n  <span class=\"hljs-string\">&quot;compilerOptions&quot;</span>: {\n    <span class=\"hljs-string\">&quot;target&quot;</span>: <span class=\"hljs-string\">&quot;ESNext&quot;</span>,\n    <span class=\"hljs-string\">&quot;lib&quot;</span>: [<span class=\"hljs-string\">&quot;DOM&quot;</span>, <span class=\"hljs-string\">&quot;DOM.Iterable&quot;</span>, <span class=\"hljs-string\">&quot;ESNext&quot;</span>],\n    <span class=\"hljs-string\">&quot;allowJs&quot;</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-string\">&quot;skipLibCheck&quot;</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-string\">&quot;esModuleInterop&quot;</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-string\">&quot;allowSyntheticDefaultImports&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">&quot;strict&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">&quot;module&quot;</span>: <span class=\"hljs-string\">&quot;ESNext&quot;</span>,\n    <span class=\"hljs-string\">&quot;moduleResolution&quot;</span>: <span class=\"hljs-string\">&quot;Node&quot;</span>,\n    <span class=\"hljs-string\">&quot;resolveJsonModule&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">&quot;isolatedModules&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">&quot;noEmit&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">&quot;jsx&quot;</span>: <span class=\"hljs-string\">&quot;react&quot;</span>,\n+    <span class=\"hljs-string\">&quot;baseUrl&quot;</span>: <span class=\"hljs-string\">&quot;.&quot;</span>,\n+    <span class=\"hljs-string\">&quot;paths&quot;</span>: {\n+      <span class=\"hljs-string\">&quot;@/*&quot;</span>:[<span class=\"hljs-string\">&quot;./src/*&quot;</span>]\n+    }\n  },\n-  <span class=\"hljs-string\">&quot;include&quot;</span>: [<span class=\"hljs-string\">&quot;./src&quot;</span>]\n+  <span class=\"hljs-string\">&quot;include&quot;</span>: [<span class=\"hljs-string\">&quot;src/**/*.ts&quot;</span>, <span class=\"hljs-string\">&quot;src/**/*.d.ts&quot;</span>, <span class=\"hljs-string\">&quot;src/**/*.tsx&quot;</span>]\n}\n</code></pre>\n<p><code>vite.config.ts</code></p>\n<pre><code class=\"language-diff\"><span class=\"hljs-keyword\">import</span> { defineConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite&#x27;</span>\n<span class=\"hljs-keyword\">import</span> reactRefresh <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vitejs/plugin-react-refresh&#x27;</span>\n\n<span class=\"hljs-regexp\">// https://</span>vitejs.dev<span class=\"hljs-regexp\">/config/</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineConfig({\n  plugins: [reactRefresh()],\n+  resolve: {\n+    alias: [{ find: <span class=\"hljs-string\">&#x27;@&#x27;</span>, replacement: <span class=\"hljs-string\">&#x27;/src&#x27;</span> }],\n+  },\n})\n</code></pre>\n<h2 id=\"路由\">路由</h2>\n<h3 id=\"安装\">安装</h3>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-keyword\">add </span>react-router-dom react-router-<span class=\"hljs-built_in\">config</span>\n</code></pre>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-keyword\">add</span> -D <span class=\"hljs-title\">@types</span>/react-router-dom <span class=\"hljs-title\">@types</span>/react-router-config\n</code></pre>\n<h3 id=\"目录介绍\">目录介绍</h3>\n<p><code>router/index.ts</code>：所有的路由相关内容导出文件\n<code>router/routes.ts</code>：所有路由配置文件</p>\n<p>创建<code>router/index.ts</code>文件</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-builtin-name\">export</span> { BrowserRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\n<span class=\"hljs-builtin-name\">export</span> {<span class=\"hljs-built_in\"> default </span>as routes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./routes&#x27;</span>;\n</code></pre>\n<p>创建<code>router/routes.ts</code>文件并添加路由配置</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { lazy } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> type { RouteConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-config&#x27;</span>;\n\nconst routes: <span class=\"hljs-built_in\">Array</span>&lt;RouteConfig&gt; = [\n    {\n        path: <span class=\"hljs-string\">&#x27;/&#x27;</span>,\n        exact: <span class=\"hljs-literal\">true</span>,\n        component: lazy(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@/pages/home&#x27;</span>))\n    },\n    {\n        path: <span class=\"hljs-string\">&#x27;/login&#x27;</span>,\n        component: lazy(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@/pages/user/login&#x27;</span>))\n    }\n];\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> routes;\n</code></pre>\n<p>创建页面路由<code>pages/user/login.tsx</code>和<code>pages/home/index.tsx</code></p>\n<p><code>pages/user/login.tsx</code></p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">type</span> { ReactElement } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> Login = (): <span class=\"hljs-function\"><span class=\"hljs-params\">ReactElement</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Login;\n</code></pre>\n<p><code>pages/home/index.tsx</code></p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">type</span> { ReactElement } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> Home = (): <span class=\"hljs-function\"><span class=\"hljs-params\">ReactElement</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Home;\n</code></pre>\n<h3 id=\"使用\">使用</h3>\n<p>在<code>main.tsx</code>文件中添加<code>BrowserRouter</code>组件</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/App&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { BrowserRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/router&#x27;</span>;\n\nReactDOM.render(\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">React.StrictMode</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BrowserRouter</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">BrowserRouter</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">React.StrictMode</span>&gt;</span></span>,\n    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;root&#x27;</span>)\n);\n</code></pre>\n<p>在<code>App</code>中渲染所有路由，因为用到懒加载，所以使用了<code>Suspense</code></p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { Suspense } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">type</span> { ReactElement } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { renderRoutes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-config&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { routes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/router&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> App = (): <span class=\"hljs-function\"><span class=\"hljs-params\">ReactElement</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">div</span>&gt;</span>loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>}&gt;{renderRoutes(routes)}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Suspense</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<p>运行<code>yarn dev</code>看看是否运行正常</p>\n<h3 id=\"路由鉴权\">路由鉴权</h3>\n<p>添加<code>router/AuthRoute.tsx</code>用于路由鉴权</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { withRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Redirect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> storage, { TOKEN } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/utils/storage&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> AuthRoute = withRouter(<span class=\"hljs-function\">(<span class=\"hljs-params\">props: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { children, history } = props;\n\n    <span class=\"hljs-keyword\">const</span> token = storage.get(TOKEN);\n\n    <span class=\"hljs-keyword\">if</span> (history.location.pathname !== <span class=\"hljs-string\">&#x27;/login&#x27;</span> &amp;&amp; !token) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Redirect</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/login&quot;</span> /&gt;</span></span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> children;\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> AuthRoute;\n</code></pre>\n<p>其中使用了<code>storage</code>封装，所以添加一下<code>utils/storage.ts</code></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { isUndef } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./tools&#x27;</span>;\n\n<span class=\"hljs-comment\">// token</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> TOKEN = <span class=\"hljs-string\">&#x27;ADMIN_TOKEN&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">get</span>: (key: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">any</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> data: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span> = <span class=\"hljs-built_in\">window</span>.localStorage.getItem(key);\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">return</span> data === <span class=\"hljs-literal\">null</span> ? data : <span class=\"hljs-built_in\">JSON</span>.parse(data);\n        } <span class=\"hljs-keyword\">catch</span> {\n            <span class=\"hljs-keyword\">return</span> data;\n        }\n    },\n    <span class=\"hljs-attr\">set</span>: (key: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">data</span>: unknown): <span class=\"hljs-function\"><span class=\"hljs-params\">void</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (!isUndef(key) &amp;&amp; !isUndef(data)) {\n            <span class=\"hljs-keyword\">let</span> payload = &lt;<span class=\"hljs-built_in\">string</span>&gt;data;\n\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> data !== <span class=\"hljs-string\">&#x27;string&#x27;</span>) {\n                payload = <span class=\"hljs-built_in\">JSON</span>.stringify(data);\n            }\n\n            <span class=\"hljs-built_in\">window</span>.localStorage.setItem(key, payload);\n        }\n    },\n    <span class=\"hljs-attr\">remove</span>: (key: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">void</span> =&gt;</span> <span class=\"hljs-built_in\">window</span>.localStorage.removeItem(key)\n};\n</code></pre>\n<p>其中使用了<code>utils/tools.ts</code>，所有创建<code>utils/tools.ts</code>文件</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-comment\">// 判断是否未定义</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> isUndef = (v: unknown): <span class=\"hljs-function\"><span class=\"hljs-params\">boolean</span> =&gt;</span> v === <span class=\"hljs-literal\">undefined</span> || v === <span class=\"hljs-literal\">null</span>;\n</code></pre>\n<p>然后将<code>AuthRoute</code>组件通过<code>router/index.ts</code>导出</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-builtin-name\">export</span> { BrowserRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\n<span class=\"hljs-builtin-name\">export</span> {<span class=\"hljs-built_in\"> default </span>as routes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./routes&#x27;</span>;\n<span class=\"hljs-builtin-name\">export</span> {<span class=\"hljs-built_in\"> default </span>as AuthRoute } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./AuthRoute&#x27;</span>;\n</code></pre>\n<p>然后在<code>App.tsx</code>中使用</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { Suspense } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">type</span> { ReactElement } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { renderRoutes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-config&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { routes, AuthRoute } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/router&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> App = (): <span class=\"hljs-function\"><span class=\"hljs-params\">ReactElement</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">div</span>&gt;</span>loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>}&gt;\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AuthRoute</span>&gt;</span>{renderRoutes(routes)}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">AuthRoute</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Suspense</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<h2 id=\"组件库-antd\">组件库 Antd</h2>\n<h3 id=\"安装-1\">安装</h3>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-builtin-name\">add</span> antd\n</code></pre>\n<p>在定制<code>Antd</code>主题时准备使用<code>less</code>变量定制，所以还需要安装<code>less</code></p>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-builtin-name\">add</span> -D less\n</code></pre>\n<h3 id=\"使用-1\">使用</h3>\n<p>创建<code>antd/index.ts</code>文件，用于引入项目所需的组件，其实可以在需要的地方引入，但是统一地方引入为了方便管理</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-builtin-name\">export</span> { Spin } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;antd&#x27;</span>;\n</code></pre>\n<p>创建<code>antd/theme.less</code>文件，用于主题定制</p>\n<pre><code class=\"language-less\"><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&#x27;~antd/lib/style/themes/default.less&#x27;</span>;\n<span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&#x27;~antd/dist/antd.less&#x27;</span>;\n\n<span class=\"hljs-comment\">// 通过less变量定制主题色</span>\n<span class=\"hljs-comment\">// @primary-color: #1890ff; // 全局主色</span>\n</code></pre>\n<p>为了使用<code>~</code>引入<code>Antd</code>样式需要添加别名,以及解决引入<code>Antd</code>样式报错，还需要添加<code>less</code>配置</p>\n<pre><code class=\"language-ts\">import { defineConfig } from <span class=\"hljs-string\">&#x27;vite&#x27;</span>;\nimport reactRefresh from <span class=\"hljs-string\">&#x27;@vitejs/plugin-react-refresh&#x27;</span>;\n\n<span class=\"hljs-regexp\">//</span> https:<span class=\"hljs-regexp\">//</span>vitejs.dev<span class=\"hljs-regexp\">/config/</span>\nexport default defineConfig({\n    plugins: [reactRefresh()],\n    resolve: {\n        alias: [\n            <span class=\"hljs-regexp\">//</span> 处理通过<span class=\"hljs-string\">&quot;~&quot;</span>引入Antd问题\n            { find: <span class=\"hljs-regexp\">/^~/</span>, replacement: <span class=\"hljs-string\">&#x27;&#x27;</span> },\n            { find: <span class=\"hljs-string\">&#x27;@&#x27;</span>, replacement: <span class=\"hljs-string\">&#x27;/src&#x27;</span> }\n        ]\n    },\n    <span class=\"hljs-regexp\">//</span> 处理引入Antd样式报错问题\n    css: {\n        preprocessorOptions: {\n            less: {\n                javascriptEnabled: true\n            }\n        }\n    }\n});\n</code></pre>\n<p>然后创建<code>assets/styles/app.less</code>文件,用于引入全局的样式</p>\n<pre><code class=\"language-less\"><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&#x27;../../antd/theme&#x27;</span>;\n\n<span class=\"hljs-selector-class\">.page-loading</span> {\n    <span class=\"hljs-attribute\">display</span>: flex;\n    <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">9999</span>;\n    <span class=\"hljs-attribute\">align-items</span>: center;\n    <span class=\"hljs-attribute\">justify-content</span>: center;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>;\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>);\n}\n</code></pre>\n<p>在<code>App.tsx</code>引入样式</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { Suspense } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">type</span> { ReactElement } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { renderRoutes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-config&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { routes, AuthRoute } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/router&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;@/assets/styles/app.less&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Spin } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/antd&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> App = (): <span class=\"hljs-function\"><span class=\"hljs-params\">ReactElement</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> Loading = <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;page-loading&quot;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Spin</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n        );\n    };\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">Loading</span> /&gt;</span>}&gt;\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AuthRoute</span>&gt;</span>{renderRoutes(routes)}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">AuthRoute</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Suspense</span>&gt;</span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n<p>创建文件<code>src/antd/index.ts</code></p>\n<p>国际化默认是英文，在<code>main.tsx</code>中引入中文并配置</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/App&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { BrowserRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/router&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> zhCN <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;antd/lib/locale/zh_CN&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { ConfigProvider } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/antd&#x27;</span>;\n\nReactDOM.render(\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ConfigProvider</span> <span class=\"hljs-attr\">locale</span>=<span class=\"hljs-string\">{zhCN}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BrowserRouter</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">BrowserRouter</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ConfigProvider</span>&gt;</span></span>,\n    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;root&#x27;</span>)\n);\n</code></pre>\n<h2 id=\"添加-axios\">添加 Axios</h2>\n<h3 id=\"安装-2\">安装</h3>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-builtin-name\">add</span> axios\n</code></pre>\n<p>请求数据时需要加上进度条，所以需要安装<code>nprogress</code></p>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-builtin-name\">add</span> nprogress\n</code></pre>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-keyword\">add</span> -D <span class=\"hljs-title\">@types</span>/nprogress\n</code></pre>\n<h3 id=\"封装\">封装</h3>\n<p><code>api/axios.ts</code></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-built_in\">type</span> { AxiosRequestConfig, AxiosResponse, AxiosInstance } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> storage, { TOKEN, USER_INFO } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/utils/storage&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { message } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/antd&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { isUndef } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/utils/tools&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> NProgress <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;nprogress&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;nprogress/nprogress.css&#x27;</span>;\n\nNProgress.configure({ <span class=\"hljs-name\">showSpinner</span>: <span class=\"hljs-literal\">false</span> });\n\nconst <span class=\"hljs-name\">instance</span>: AxiosInstance = axios.create({\n    <span class=\"hljs-name\">baseURL</span>: <span class=\"hljs-keyword\">import</span>.meta.env.VITE_BASE_URL as <span class=\"hljs-built_in\">string</span>\n});\n\ninstance.interceptors.request.use(\n    <span class=\"hljs-function\"><span class=\"hljs-params\">(config: AxiosRequestConfig)</span> =&gt;</span> {\n        NProgress.start();\n        const token = storage.get(TOKEN);\n        !isUndef(token) &amp;&amp; (config.headers[<span class=\"hljs-string\">&#x27;token&#x27;</span>] = token);\n\n        <span class=\"hljs-keyword\">return</span> config;\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-params\">(<span class=\"hljs-built_in\">error</span>)</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">return</span> Promise.reject(<span class=\"hljs-built_in\">error</span>);\n    }\n);\n\ninstance.interceptors.response.use(\n    <span class=\"hljs-function\"><span class=\"hljs-params\">(response: AxiosResponse)</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (response?.data?.code === <span class=\"hljs-number\">0</span>) {\n            message.<span class=\"hljs-built_in\">error</span>(response.data.msg);\n            <span class=\"hljs-keyword\">return</span> Promise.reject(response.data.msg);\n        }\n\n        <span class=\"hljs-keyword\">if</span> (response?.data?.code === <span class=\"hljs-number\">401</span> || response?.data?.code === <span class=\"hljs-string\">&#x27;401&#x27;</span>) {\n            storage.remove(TOKEN);\n            storage.remove(USER_INFO);\n            <span class=\"hljs-keyword\">return</span> Promise.reject(response.data);\n        }\n        NProgress.done();\n\n        <span class=\"hljs-keyword\">return</span> response.data;\n    },\n    async (<span class=\"hljs-built_in\">error</span>) =&gt; {\n        NProgress.done();\n\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">error</span>.response) {\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">error</span>.response.status === <span class=\"hljs-number\">401</span> || <span class=\"hljs-built_in\">error</span>?.data?.code === <span class=\"hljs-string\">&#x27;401&#x27;</span>) {\n                storage.remove(TOKEN);\n                storage.remove(USER_INFO);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">error</span>.response.status === <span class=\"hljs-number\">404</span>) {\n                message.<span class=\"hljs-built_in\">error</span>(`未找到接口：${<span class=\"hljs-built_in\">error</span>.response.config.url}`);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">error</span>.response.status === <span class=\"hljs-number\">500</span>) {\n                message.<span class=\"hljs-built_in\">error</span>(`接口：${<span class=\"hljs-built_in\">error</span>.response.config.url}在服务端发生未知错误`);\n            }\n\n            <span class=\"hljs-keyword\">return</span> Promise.reject(<span class=\"hljs-built_in\">error</span>.response.data);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> Promise.reject(<span class=\"hljs-built_in\">error</span>);\n        }\n    }\n);\n\n<span class=\"hljs-keyword\">export</span> default instance;\n</code></pre>\n<h2 id=\"添加mock\">添加<code>Mock</code></h2>\n<h3 id=\"安装-3\">安装</h3>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-keyword\">add</span> -D mockjs <span class=\"hljs-title\">@types</span>/mockjs\n</code></pre>\n<p>创建文件<code>src/mocks/index.ts</code></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> Mock <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;mockjs&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> user <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./modules/user&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> mockStart = (): <span class=\"hljs-literal\">void</span> =&gt; {\n    Mock.setup({\n        timeout: <span class=\"hljs-string\">&#x27;200-3000&#x27;</span>\n    });\n\n    user();\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> mockStart;\n</code></pre>\n<p>在<code>mocks</code>目录下添加<code>modules</code>目录作为每个模块的请求</p>\n<p><code>mocks/modules/user.ts</code></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> Mock <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;mockjs&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (): <span class=\"hljs-function\"><span class=\"hljs-params\">void</span> =&gt;</span> {\n    Mock.mock(<span class=\"hljs-string\">&#x27;/api/login&#x27;</span>, <span class=\"hljs-string\">&#x27;post&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">{ body }: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> { username, password } = <span class=\"hljs-built_in\">JSON</span>.parse(body);\n\n        <span class=\"hljs-keyword\">if</span> (username === <span class=\"hljs-string\">&#x27;admin&#x27;</span> &amp;&amp; password === <span class=\"hljs-string\">&#x27;123456&#x27;</span>) {\n            <span class=\"hljs-keyword\">return</span> {\n                <span class=\"hljs-attr\">code</span>: <span class=\"hljs-number\">1</span>,\n                <span class=\"hljs-attr\">data</span>: {\n                    <span class=\"hljs-attr\">id</span>: Mock.Random.id(),\n                    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;admin&#x27;</span>,\n                    <span class=\"hljs-attr\">avatar</span>: Mock.Random.image(<span class=\"hljs-string\">&#x27;600x600&#x27;</span>, <span class=\"hljs-string\">&#x27;#50B347&#x27;</span>, <span class=\"hljs-string\">&#x27;A&#x27;</span>),\n                    <span class=\"hljs-attr\">token</span>: Mock.Random.guid()\n                }\n            };\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> {\n                <span class=\"hljs-attr\">code</span>: <span class=\"hljs-number\">0</span>,\n                <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;账号或密码错误&#x27;</span>\n            };\n        }\n    });\n};\n</code></pre>\n<p>在<code>main.tsx</code>下添加代码，仅当开发环境才会启动<code>mock</code></p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/App&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { BrowserRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/router&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> mockStart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/mocks&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> zhCN <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;antd/lib/locale/zh_CN&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { ConfigProvider } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/antd&#x27;</span>;\n\n<span class=\"hljs-comment\">// 开发环境才启动mock</span>\n<span class=\"hljs-keyword\">import</span>.meta.env.DEV &amp;&amp; mockStart();\n\nReactDOM.render(\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ConfigProvider</span> <span class=\"hljs-attr\">locale</span>=<span class=\"hljs-string\">{zhCN}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BrowserRouter</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">BrowserRouter</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ConfigProvider</span>&gt;</span></span>,\n    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;root&#x27;</span>)\n);\n</code></pre>\n<h2 id=\"状态管理\">状态管理</h2>\n<h3 id=\"安装-4\">安装</h3>\n<pre><code class=\"language-bash\">yarn <span class=\"hljs-builtin-name\">add</span> recoil\n</code></pre>\n<p>在<code>main.tsx</code>引入<code>RecoilRoot</code></p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/App&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { BrowserRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/router&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> mockStart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/mocks&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { RecoilRoot } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> zhCN <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;antd/lib/locale/zh_CN&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { ConfigProvider } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/antd&#x27;</span>;\n\n<span class=\"hljs-comment\">// 开发环境才启动mock</span>\n<span class=\"hljs-keyword\">import</span>.meta.env.DEV &amp;&amp; mockStart();\n\nReactDOM.render(\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ConfigProvider</span> <span class=\"hljs-attr\">locale</span>=<span class=\"hljs-string\">{zhCN}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BrowserRouter</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">BrowserRouter</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RecoilRoot</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ConfigProvider</span>&gt;</span></span>,\n    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;root&#x27;</span>)\n);\n</code></pre>\n<p>创建文件<code>src/store/app.ts</code>，用于放置应用全局状态，如果需要划分模块，在<code>src/store/modules</code>下创建相应模块既可</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { atom, atomFamily } from <span class=\"hljs-string\">&#x27;recoil&#x27;</span>;\n\n<span class=\"hljs-comment\">// 菜单是否折叠</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> collapsedAtom = atom({\n    key: <span class=\"hljs-string\">&#x27;collapsedAtom&#x27;</span>,\n    <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-keyword\">false</span>\n});\n<span class=\"hljs-comment\">// 当前路径</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> activePathAtom = atomFamily({\n    key: <span class=\"hljs-string\">&#x27;activePathAtom&#x27;</span>,\n    <span class=\"hljs-keyword\">default</span>: (path: string) =&gt; path\n});\n<span class=\"hljs-comment\">// 是否为深色模式</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> isDarkModeAtom = atom({\n    key: <span class=\"hljs-string\">&#x27;isDarkModeAtom&#x27;</span>,\n    <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-keyword\">false</span>\n});\n</code></pre>\n<h2 id=\"其他\">其他</h2>\n<ul>\n<li>所有目录及文件使用短横线命名法</li>\n<li>所有的<code>CSS</code>样式集<code>class</code>使用<code>BEM命名法</code></li>\n<li>私有自定义组件，应在当前目录下的<code>_components</code>下创建，超过 3 个以上用到的应提取到通用组件目录下<code>components</code></li>\n<li>所有的<code>js</code>导出函数应使用<code>JSDoc</code>注释</li>\n</ul>\n"}