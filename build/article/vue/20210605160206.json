{"title":"从Vue2迁移Vue3的全攻略","slug":"svelte kit","time":"2021-06-05T16:03:16.000Z","author":"renzp94","status":"done","html":"<p>从<code>Vue3 alpha</code>(2019.12.21)发布开始，开始关注<code>Vue3</code>，并通过<code>@vue/composition-api</code>包在 Vue2 的练习项目使用，到后来的<code>Vue3 beta</code>(2020.4.17)发布，直接使用<code>Vue3 beta</code>版本再次尝试，再到后来的<code>Vue3 rc</code>(2020.7.18)，以及最后终于在<code>2020.9.18</code>发布了正式版，这一路学着不断变更的 api，经常过一段时间发现之前的 api 变了，直到<code>Vue3</code>的生态稳定之后又开始尝试，发现真香。\n<br />\n其实，最好的学习文章应该是<a href=\"https://v3.cn.vuejs.org/\">官方文档</a>，不得不说<code>VUE</code>的文档是真的不错，在 Vue3 官网上也有<a href=\"https://v3.cn.vuejs.org/guide/migration/introduction.html\">Vue3 迁移指南</a>。所以，如果需要认真的了解全部的 Vue3 内容建议去官网学习，此文章只会针对性的说明一些我在实际开发中遇到的变更。</p>\n<h2 id=\"组合式-api\">组合式 API</h2>\n<p>Vue3 重大更新就是<code>组合式API(Composition Api)</code>了，接下来就一一说明一下。</p>\n<h3 id=\"生命周期\">生命周期</h3>\n<table>\n<thead>\n<tr>\n<th>选项式</th>\n<th>Hook inside setup</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>beforeCreate</td>\n<td>setup</td>\n</tr>\n<tr>\n<td>created</td>\n<td>setup</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>onBeforeMount</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>onMounted</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>onBeforeUpdate</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>onUpdated</td>\n</tr>\n<tr>\n<td>beforeUnmount</td>\n<td>onBeforeUnmount</td>\n</tr>\n<tr>\n<td>unmounted</td>\n<td>onUnmounted</td>\n</tr>\n<tr>\n<td>errorCaptured</td>\n<td>onErrorCaptured</td>\n</tr>\n<tr>\n<td>renderTracked</td>\n<td>onRenderTracked</td>\n</tr>\n<tr>\n<td>renderTriggered</td>\n<td>onRenderTriggered</td>\n</tr>\n<tr>\n<td>activated</td>\n<td>onActivated</td>\n</tr>\n<tr>\n<td>deactivated</td>\n<td>onDeactivated</td>\n</tr>\n</tbody></table>\n<h3 id=\"setup\">setup</h3>\n<p>一个组件选项，在创建组件之前执行，一旦 props 被解析，并作为组合式 API 的入口点</p>\n<p><code>setup</code>函数有两个参数: <code>props</code>和<code>ctx</code>,其中 ctx 是一个对象(<code>{attrs,slots,emit}</code>).</p>\n<ul>\n<li>attrs: 绑定在组件中的所有<code>显示指定</code>的<code>props</code>,这里需要特别注意的是在<code>Vue3</code>中如果需要将属性绑定到组件根节点需要声明<code>props</code>,对应<code>Vue2</code>的<code>this.$attrs</code></li>\n<li>slots: 插槽列表,对应<code>Vue2</code>中的<code>this.$slots</code></li>\n<li>emit: 触发事件,对应<code>Vue2</code>中的<code>this.$emit</code>,若组件内需要触发事件，需要在<code>emtis</code>选项中配置或者在使用<code>defineEmit</code>时指定。</li>\n</ul>\n<p>在<code>setup</code>函数中定义的变量或函数，如果需要在<code>template</code>中使用的话需要在<code>setup</code>函数中返回，不返回的无法在<code>template</code>中使用。这样写会有一些繁琐，所以<code>Vue3</code>提出了一个新想法: <code>script setup</code>。在<code>script</code>标签上标注为<code>setup</code>则不需要返回定义的变量和函数就可以在<code>template</code>中使用。</p>\n<p><code>Count.vue</code></p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">count</span> }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;$emit(&#x27;sub&#x27;)&quot;</span>&gt;</span>-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;$emit(&#x27;add&#x27;)&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { defineComponent } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineComponent({\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Count&#x27;</span>,\n    <span class=\"hljs-attr\">props</span>: {\n        <span class=\"hljs-attr\">count</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>\n        }\n    },\n    <span class=\"hljs-attr\">emits</span>: [<span class=\"hljs-string\">&#x27;sub&#x27;</span>, <span class=\"hljs-string\">&#x27;add&#x27;</span>]\n});\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p><code>App.vue</code></p>\n<pre><code class=\"language-vue\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">count</span> <span class=\"hljs-attr\">:count</span>=<span class=\"hljs-string\">&quot;count&quot;</span> @<span class=\"hljs-attr\">add</span>=<span class=\"hljs-string\">&quot;onAdd&quot;</span> @<span class=\"hljs-attr\">sub</span>=<span class=\"hljs-string\">&quot;onSub&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { defineComponent, ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> Count <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Count.vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineComponent({\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;App&#x27;</span>,\n    <span class=\"hljs-attr\">components</span>: { Count },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> count.value++;\n        <span class=\"hljs-keyword\">const</span> onSub = <span class=\"hljs-function\">() =&gt;</span> count.value--;\n\n        <span class=\"hljs-keyword\">return</span> {\n            count,\n            onAdd,\n            onSub\n        };\n    }\n});\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>如果使用<code>script setup</code>，则是下面的代码</p>\n<p><code>Count.vue</code></p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ count }</span><span class=\"xml\">}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;$emit(&#x27;sub&#x27;)&quot;</span>&gt;</span>-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;$emit(&#x27;add&#x27;)&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> </span></span><span class=\"hljs-template-variable\">{ defineComponent, defineEmit, defineProps }</span><span class=\"xml\"><span class=\"javascript\"> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\ndefineComponent(</span></span><span class=\"hljs-template-variable\">{\n    name: &#x27;Count&#x27;\n}</span><span class=\"xml\">);\ndefineProps(</span><span class=\"hljs-template-variable\">{\n    count: {\n        type: Number,\n        <span class=\"hljs-keyword\">default</span>: 0\n    }</span><span class=\"xml\"><span class=\"javascript\">\n});\ndefineEmit([<span class=\"hljs-string\">&#x27;sub&#x27;</span>, <span class=\"hljs-string\">&#x27;add&#x27;</span>]);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p><code>App.vue</code></p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">count</span> <span class=\"hljs-attr\">:count</span>=<span class=\"hljs-string\">&quot;count&quot;</span> @<span class=\"hljs-attr\">add</span>=<span class=\"hljs-string\">&quot;onAdd&quot;</span> @<span class=\"hljs-attr\">sub</span>=<span class=\"hljs-string\">&quot;onSub&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> </span></span><span class=\"hljs-template-variable\">{ ref }</span><span class=\"xml\"><span class=\"javascript\"> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> Count <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Count.vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> count.value++;\n<span class=\"hljs-keyword\">const</span> onSub = <span class=\"hljs-function\">() =&gt;</span> count.value--;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<blockquote>\n<p>注意：<code>script setup</code>目前<code>(Vue: ^3.0.5)</code>是<code>RFC</code>状态</p>\n</blockquote>\n<h3 id=\"ref\">ref</h3>\n<p>将一个基本类型的数据转换成响应式且可变的 ref 对象, 通过<code>.value</code>属性修改和获取值.</p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">count</span> }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onAdd&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> count.value++;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>在<code>script</code>中,需要使用<code>.value</code>,但是在<code>template</code>中不再需要,Vue 会自动解开,如果觉得<code>script</code>中的<code>.value</code>不顺眼,其实还有一个语法糖<code>ref:</code>,通过此语法糖可以不使用<code>.value</code>直接设置和获取值.</p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">count</span> }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onAdd&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-attr\">ref</span>: count = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> count++;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<blockquote>\n<p>注意：<code>ref: </code>目前<code>(Vue: ^3.0.5)</code>是<code>RFC</code>状态,且只能在<code>SFC(单文件)</code>中使用</p>\n</blockquote>\n<h4 id=\"ref-的配套方法\">ref 的配套方法</h4>\n<h5 id=\"unref\">unref</h5>\n<p>如果参数是一个<code>ref</code>则返回内部值,如果不是则返回参数本身.即: <code>isRef(val) ? val.value : val</code>的语法糖</p>\n<h5 id=\"toref\">toRef</h5>\n<p>将一个响应式的对象属性转为响应式的.</p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ count }</span><span class=\"xml\">}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onAdd&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> </span></span><span class=\"hljs-template-variable\">{ reactive, toRef }</span><span class=\"xml\"><span class=\"javascript\"> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> state = reactive(</span></span><span class=\"hljs-template-variable\">{\n    count: 0\n}</span><span class=\"xml\"><span class=\"javascript\">);\n\n<span class=\"hljs-keyword\">const</span> count = toRef(state, <span class=\"hljs-string\">&#x27;count&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> count.value++;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<h5 id=\"torefs\">toRefs</h5>\n<p>将一个响应式的对象,转换成一个普通对象,并且将对象中的属性转换为<code>ref</code>对象.一般的,当想对一个<code>reactive</code>包装的响应式对象进行解构时,解构之后的变量将会失去响应式,此时可通过<code>toRefs</code>将对象转换然后再解构</p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ count }</span><span class=\"xml\">}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onAdd&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> </span></span><span class=\"hljs-template-variable\">{ reactive, toRefs }</span><span class=\"xml\"><span class=\"javascript\"> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> state = reactive(</span></span><span class=\"hljs-template-variable\">{\n    count: 0,\n    text: &#x27;hello&#x27;\n}</span><span class=\"xml\"><span class=\"javascript\">);\n\n<span class=\"hljs-keyword\">const</span> </span></span><span class=\"hljs-template-variable\">{ count }</span><span class=\"xml\"><span class=\"javascript\"> = toRefs(state);\n<span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> count.value++;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<h5 id=\"isref\">isRef</h5>\n<p>检查值是否为一个<code>ref</code>对象.</p>\n<h5 id=\"customref\">customRef</h5>\n<p>创建一个自定义的 <code>ref</code>，并对其依赖项跟踪和更新触发进行显式控制。它需要一个工厂函数，该函数接收 <code>track</code> 和 <code>trigger</code> 函数作为参数，并且应该返回一个带有 <code>get</code> 和 <code>set</code> 的对象</p>\n<h5 id=\"shallowref\">shallowRef</h5>\n<p>创建一个跟踪自身 .value 变化的 ref，但不会使其值也变成响应式的。即：改变<code>.value</code>是响应式的，但是<code>.value</code>本身不是响应式的</p>\n<h5 id=\"triggerref\">triggerRef</h5>\n<p>手动执行与 <code>shallowRef</code> 关联的任何副作用。</p>\n<h5 id=\"reactive\">reactive</h5>\n<p>返回对象的响应式副本。</p>\n<pre><code class=\"language-vue\"><span class=\"hljs-variable\">&lt;template&gt;</span>\n    <span class=\"hljs-variable\">&lt;div&gt;</span>{{ <span class=\"hljs-keyword\">state</span>.count }}&lt;/div&gt;\n    <span class=\"hljs-variable\">&lt;button @click=&quot;onAdd&quot;&gt;</span>+<span class=\"hljs-number\">1</span>&lt;/button&gt;\n&lt;/template&gt;\n\n<span class=\"hljs-variable\">&lt;script setup lang=&quot;ts&quot;&gt;</span>\nimport { reactive } <span class=\"hljs-keyword\">from</span> &#x27;vue&#x27;;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">state</span> = reactive({\n    count: <span class=\"hljs-number\">0</span>,\n    text: &#x27;hello&#x27;,\n    <span class=\"hljs-keyword\">user</span>: {\n        nickname: &#x27;codebook&#x27;\n    }\n});\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">on</span>Add = () =&gt; <span class=\"hljs-keyword\">state</span>.count++;\n&lt;/script&gt;\n</code></pre>\n<blockquote>\n<p>注意：<code>reactive</code>包装的是深度响应式，即：<code>state.user.nickname</code>改变之后也会触发渲染。如果不想深度响应式可使用<code>shallowReactive</code></p>\n</blockquote>\n<h5 id=\"readonly\">readonly</h5>\n<p>接受一个对象 (响应式或纯对象) 或 <code>ref</code> 并返回原始对象的只读代理。只读代理是深层的：任何被访问的嵌套属性也是只读的。</p>\n<pre><code class=\"language-vue\"><span class=\"hljs-variable\">&lt;template&gt;</span>\n    <span class=\"hljs-variable\">&lt;div&gt;</span>{{ <span class=\"hljs-keyword\">state</span>.count }}&lt;/div&gt;\n    <span class=\"hljs-variable\">&lt;button @click=&quot;onAdd&quot;&gt;</span>+<span class=\"hljs-number\">1</span>&lt;/button&gt;\n&lt;/template&gt;\n\n<span class=\"hljs-variable\">&lt;script setup lang=&quot;ts&quot;&gt;</span>\nimport { reactive, readonly, watchEffect } <span class=\"hljs-keyword\">from</span> &#x27;vue&#x27;;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">state</span> = reactive({\n    count: <span class=\"hljs-number\">0</span>,\n    text: &#x27;hello&#x27;\n});\n\n<span class=\"hljs-keyword\">const</span> readonlyState = readonly(<span class=\"hljs-keyword\">state</span>);\n\nwatchEffect(() =&gt; {\n    console.<span class=\"hljs-keyword\">log</span>(readonlyState.count);\n});\n\n// 触发watchEffect\n<span class=\"hljs-keyword\">state</span>.count++;\n\n// 点击不会触发watchEffect，且会出现警告\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">on</span>Add = () =&gt; readonlyState.count++;\n&lt;/script&gt;\n</code></pre>\n<h5 id=\"isproxy\">isProxy</h5>\n<p>检查对象是否是由 <code>reactive</code> 或 <code>readonly</code> 创建的 <code>proxy</code>。</p>\n<h5 id=\"isreactive\">isReactive</h5>\n<p>检查对象是否是由 <code>reactive</code> 创建的响应式代理。</p>\n<h5 id=\"isreadonly\">isReadonly</h5>\n<p>检查对象是否是由 <code>readonly</code> 创建的只读代理。</p>\n<h5 id=\"toraw\">toRaw</h5>\n<p>返回 <code>reactive</code> 或 <code>readonly</code> 代理的原始对象。</p>\n<h5 id=\"markraw\">markRaw</h5>\n<p>标记一个对象，使其永远不会转换为 <code>proxy</code>。返回对象本身。</p>\n<h5 id=\"shallowreactive\">shallowReactive</h5>\n<p>创建一个响应式代理，它跟踪其自身 <code>property</code> 的响应性，但不执行嵌套对象的深层响应式转换 (暴露原始值)。</p>\n<h5 id=\"shallowreadonly\">shallowReadonly</h5>\n<p>创建一个 <code>proxy</code>，使其自身的 <code>property</code> 为只读，但不执行嵌套对象的深度只读转换 (暴露原始值)。</p>\n<h5 id=\"computed\">computed</h5>\n<p>如果传入的是一个函数，则此函数为<code>getter</code>函数，如果传入的是个对象，则<code>get</code>属性函数为<code>getter</code>，<code>set</code>属性函数为<code>setter</code></p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">msg</span> }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">UpperMsg</span> }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onChangeMsg&quot;</span>&gt;</span>改变Msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { computed, ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> msg = ref(<span class=\"hljs-string\">&#x27;codebook&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> UpperMsg = computed(<span class=\"hljs-function\">() =&gt;</span> msg.value.toUpperCase());\n<span class=\"hljs-keyword\">const</span> onChangeMsg = <span class=\"hljs-function\">() =&gt;</span> {\n    msg.value = <span class=\"hljs-string\">&#x27;renzp94&#x27;</span>;\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<h5 id=\"watcheffect\">watchEffect</h5>\n<p>在响应式地跟踪其依赖项时立即运行一个函数，并在更改依赖项时重新运行它。其返回一个停止函数</p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">msg</span> }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">UpperMsg</span> }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onChangeMsg&quot;</span>&gt;</span>改变Msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { computed, ref, watchEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> msg = ref(<span class=\"hljs-string\">&#x27;codebook&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> UpperMsg = computed(<span class=\"hljs-function\">() =&gt;</span> msg.value.toUpperCase());\n<span class=\"hljs-keyword\">const</span> onChangeMsg = <span class=\"hljs-function\">() =&gt;</span> {\n    msg.value = <span class=\"hljs-string\">&#x27;renzp94&#x27;</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> stop = watchEffect(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(msg.value);\n});\n\nonMounted(stop);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<h5 id=\"watch\">watch</h5>\n<p>和<code>watchEffect</code>API 相同，创建后不会立即执行，需要指定监听的数据源</p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">msg</span> }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onChangeMsg&quot;</span>&gt;</span>改变Msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">count</span> }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onAdd&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { ref, watch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> msg = ref(<span class=\"hljs-string\">&#x27;codebook&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> onChangeMsg = <span class=\"hljs-function\">() =&gt;</span> {\n    msg.value = <span class=\"hljs-string\">&#x27;renzp94&#x27;</span>;\n};\n<span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">const</span> onAdd = <span class=\"hljs-function\">() =&gt;</span> count.value++;\n\n<span class=\"hljs-comment\">// 监听单个数据</span>\nwatch(\n    <span class=\"hljs-function\">() =&gt;</span> count.value,\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(val);\n    }\n);\n<span class=\"hljs-comment\">// 监听多个数据</span>\nwatch([count, msg], <span class=\"hljs-function\">(<span class=\"hljs-params\">vals</span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(vals);\n});\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<h2 id=\"新增特性\">新增特性</h2>\n<h3 id=\"teleport\">teleport</h3>\n<p>将一个元素传送到指定位置</p>\n<pre><code class=\"language-vue\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">teleport</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;body&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>父元素是body<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">teleport</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<h3 id=\"片段\">片段</h3>\n<p>支持<code>template</code>中写多个根节点，不再需要指定一个根节点了。</p>\n<h3 id=\"script-setup-语法糖\">script setup 语法糖</h3>\n<p>可以在<code>script</code>标签上指定属性为<code>setup</code>，则在<code>script</code>中书写的变量和函数无需导出即可在<code>template</code>中使用，极大的精简了代码书写，非常 nice 的一个想法。可以看到本文的代码例子都是使用<code>script setup</code>语法糖。</p>\n<h3 id=\"在style中使用js变量\">在<code>style</code>中使用<code>JS</code>变量</h3>\n<p>可以在<code>style</code>标签中通过<code>v-bind</code>使用在<code>setup</code>中导出的变量，而且是响应式的。</p>\n<pre><code class=\"language-vue\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;logo&quot;</span>&gt;</span>CodeBook<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onLargen&quot;</span>&gt;</span>变大<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onLessen&quot;</span>&gt;</span>变小<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> fontSize = ref(<span class=\"hljs-string\">&#x27;14px&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> onLargen = <span class=\"hljs-function\">() =&gt;</span> {\n    fontSize.value = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">parseInt</span>(fontSize.value) + <span class=\"hljs-number\">2</span>}</span>px`</span>;\n};\n<span class=\"hljs-keyword\">const</span> onLessen = <span class=\"hljs-function\">() =&gt;</span> {\n    fontSize.value = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">parseInt</span>(fontSize.value) - <span class=\"hljs-number\">2</span>}</span>px`</span>;\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.logo</span> {\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-built_in\">v-bind</span>(fontSize);\n    <span class=\"hljs-attribute\">font-weight</span>: <span class=\"hljs-number\">700</span>;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></pre>\n<h2 id=\"变更\">变更</h2>\n<h3 id=\"v-model\">v-model</h3>\n<p><code>v-model</code>用于自定义组件的时候，<code>prop</code>由<code>value</code>改为<code>modelValue</code>，<code>event</code>由<code>input</code>改为<code>update:modelValue</code>，用在原生标签则没有变化。移除了<code>.sync</code>修饰符，通过<code>v-model:</code>代替。</p>\n<p><code>AInput.vue</code></p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">title</span> }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onUpper&quot;</span>&gt;</span>title大写<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">&quot;modelValue&quot;</span> @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">&quot;onInput&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { defineEmit, defineProps } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> props = defineProps({\n    <span class=\"hljs-attr\">modelValue</span>: [<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">Number</span>],\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">String</span>\n});\n<span class=\"hljs-keyword\">const</span> emit = defineEmit([<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>, <span class=\"hljs-string\">&#x27;update:title&#x27;</span>]);\n<span class=\"hljs-keyword\">const</span> onInput = (e: Event): <span class=\"hljs-function\"><span class=\"hljs-params\">void</span> =&gt;</span> {\n    emit(<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>, (e.target <span class=\"hljs-keyword\">as</span> HTMLInputElement).value);\n};\n<span class=\"hljs-keyword\">const</span> onUpper = <span class=\"hljs-function\">() =&gt;</span> {\n    emit(<span class=\"hljs-string\">&#x27;update:title&#x27;</span>, props.title?.toUpperCase());\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p><code>App.vue</code></p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n        </span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">inputValue</span> }}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>自定义Input<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a-input</span> <span class=\"hljs-attr\">v-model:title</span>=<span class=\"hljs-string\">&quot;inputTitle&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;inputValue&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>原生Input<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;inputValue&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> AInput <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/AInput.vue&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> inputValue = ref(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> inputTitle = ref(<span class=\"hljs-string\">&#x27;codebook&#x27;</span>);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<h3 id=\"自定义组件-ref\">自定义组件 ref</h3>\n<p>自定义组件指定 ref 时，无法直接绑定到内部根元素上，可以通过<code>expose</code>共享的解决方案解决此问题。</p>\n<p><code>AInput.vue</code></p>\n<pre><code class=\"language-vue\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;input&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">&quot;modelValue&quot;</span> @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">&quot;onInput&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { defineEmit, defineProps, ref, useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\ndefineProps({\n    <span class=\"hljs-attr\">modelValue</span>: [<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">Number</span>]\n});\n<span class=\"hljs-keyword\">const</span> emit = defineEmit([<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>]);\n<span class=\"hljs-keyword\">const</span> onInput = (e: Event): <span class=\"hljs-function\"><span class=\"hljs-params\">void</span> =&gt;</span> {\n    emit(<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>, (e.target <span class=\"hljs-keyword\">as</span> HTMLInputElement).value);\n};\n\n<span class=\"hljs-keyword\">const</span> input = ref&lt;HTMLInputElement | <span class=\"hljs-literal\">null</span>&gt;(<span class=\"hljs-literal\">null</span>);\n<span class=\"hljs-keyword\">const</span> { expose } = useContext();\n<span class=\"hljs-keyword\">const</span> autoFocus = <span class=\"hljs-function\">() =&gt;</span> {\n    input.value?.focus();\n};\n\nexpose({ autoFocus });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p><code>App.vue</code></p>\n<pre><code class=\"language-vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    </span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">inputValue</span> }}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a-input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;input&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;inputValue&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { onMounted, ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> AInput <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/AInput.vue&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> inputValue = ref(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> input = ref&lt;any&gt;(<span class=\"hljs-literal\">null</span>);\n\nonMounted(<span class=\"hljs-function\">() =&gt;</span> {\n    input.value?.autoFocus();\n});\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<h3 id=\"小改变\">小改变</h3>\n<ul>\n<li><code>v-if</code>比<code>v-for</code>的优先级更高。</li>\n<li><code>&lt;template v-for /&gt;</code>现在不需要指定到真实节点了，只需指定到<code>template</code>即可。</li>\n<li><code>异步组件</code>通过<code>defineAsyncComponent</code>来创建。</li>\n<li>组件中的<code>prop</code>的<code>default</code>函数不能访问<code>this</code></li>\n<li><code>data</code>需要始终声明为函数</li>\n<li><code>mixin</code>被设置为浅合并</li>\n</ul>\n"}